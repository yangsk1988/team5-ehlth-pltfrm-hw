
ReadBP_eclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00001924  000019b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000512  00800232  00800232  00001aea  2**0
                  ALLOC
  3 .debug_aranges 00000850  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001713  00000000  00000000  0000233a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000bc83  00000000  00000000  00003a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d8b  00000000  00000000  0000f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000057d4  00000000  00000000  0001145b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ee0  00000000  00000000  00016c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000029bc  00000000  00000000  00017b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000054b7  00000000  00000000  0001a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000840  00000000  00000000  0001f983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//!******************************************************************************

	uint8_t eHealthClass::getGlucometerLength(void)
	{
		return length;
	}
       0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__ctors_end>
};
//***************************************************************
// Constructor of the class										*
//***************************************************************

	eHealthDisplayClass::eHealthDisplayClass(void){/*void constructor*/}
       4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       8:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
       c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
}
      10:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      14:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      18:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      20:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      24:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      28:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      2c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      30:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      34:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      3c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      40:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__vector_16>
      44:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      48:	0c 94 b1 04 	jmp	0x962	; 0x962 <__vector_18>
      4c:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__vector_19>
      50:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      54:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      58:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      5c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      60:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>
      64:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__bad_interrupt>

00000068 <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c_7>:
      68:	20 00                                                .

0000006a <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c_6>:
      6a:	0a 00                                               ..

0000006c <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c_5>:
      6c:	20 00                                                .

0000006e <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c_4>:
      6e:	0a 43 68 65 63 6b 53 75 6d 20 31 0a 00              .CheckSum 1..

0000007b <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c_3>:
      7b:	0a 00                                               ..

0000007d <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c_2>:
      7d:	0a 45 72 72 6f 72 73 3a 20 43 61 6e 27 74 20 66     .Errors: Can't f
      8d:	69 6e 64 20 74 68 65 20 68 65 61 64 20 6f 66 20     ind the head of 
      9d:	64 61 74 61 00                                      data.

000000a2 <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c_1>:
      a2:	20 00                                                .

000000a4 <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c_0>:
      a4:	0a 44 61 74 61 20 48 65 61 64 0a 00                 .Data Head..

000000b0 <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c>:
      b0:	0a 53 65 72 69 61 6c 20 61 76 61 69 6c 61 62 6c     .Serial availabl
      c0:	65 3a 20 00                                         e: .

000000c4 <_ZZ4loopE3__c_14>:
      c4:	20 62 70 6d 00                                       bpm.

000000c9 <_ZZ4loopE3__c_13>:
      c9:	50 75 6c 73 65 20 76 61 6c 75 65 20 3a 20 00        Pulse value : .

000000d8 <_ZZ4loopE3__c_12>:
      d8:	20 6d 6d 48 67 00                                    mmHg.

000000de <_ZZ4loopE3__c_11>:
      de:	44 69 61 73 74 6f 6c 69 63 20 76 61 6c 75 65 20     Diastolic value 
      ee:	3a 20 00                                            : .

000000f1 <_ZZ4loopE3__c_10>:
      f1:	20 6d 6d 48 67 00                                    mmHg.

000000f7 <_ZZ4loopE3__c_9>:
      f7:	53 79 73 74 6f 6c 69 63 20 76 61 6c 75 65 20 3a     Systolic value :
     107:	20 00                                                .

00000109 <_ZZ4loopE3__c_8>:
     109:	3a 00                                               :.

0000010b <_ZZ4loopE3__c_7>:
     10b:	20 61 74 20 00                                       at .

00000110 <_ZZ4loopE3__c_6>:
     110:	20 6f 66 20 00                                       of .

00000115 <_ZZ4loopE3__c_5>:
     115:	20 6f 66 20 00                                       of .

0000011a <_ZZ4loopE3__c_4>:
     11a:	44 61 74 65 20 2d 3e 20 00                          Date -> .

00000123 <_ZZ4loopE3__c_3>:
     123:	4d 65 61 73 75 72 65 20 6e 75 6d 62 65 72 20 00     Measure number .

00000133 <_ZZ4loopE3__c_2>:
     133:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     143:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     153:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 00                    ==========.

0000015e <_ZZ4loopE3__c_1>:
     15e:	4e 75 6d 62 65 72 20 6f 66 20 6d 65 61 73 75 72     Number of measur
     16e:	65 73 20 3a 20 00                                   es : .

00000174 <_ZZ4loopE3__c_0>:
     174:	0a 52 65 61 64 69 6e 67 20 45 6e 64 73 2e 0a 00     .Reading Ends...

00000184 <_ZZ4loopE3__c>:
     184:	0a 3d 3d 0a 52 65 61 64 69 6e 67 20 53 74 61 72     .==.Reading Star
     194:	74 73 2e 2e 2e 0a 00 00                             ts......

0000019c <__ctors_start>:
     19c:	20 01       	movw	r4, r0
     19e:	83 03       	fmuls	r16, r19
     1a0:	66 06       	cpc	r6, r22

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf ef       	ldi	r28, 0xFF	; 255
     1a8:	d8 e0       	ldi	r29, 0x08	; 8
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	cd bf       	out	0x3d, r28	; 61

000001ae <__do_copy_data>:
     1ae:	12 e0       	ldi	r17, 0x02	; 2
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b1 e0       	ldi	r27, 0x01	; 1
     1b4:	e4 e2       	ldi	r30, 0x24	; 36
     1b6:	f9 e1       	ldi	r31, 0x19	; 25
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <.do_copy_data_start>

000001ba <.do_copy_data_loop>:
     1ba:	05 90       	lpm	r0, Z+
     1bc:	0d 92       	st	X+, r0

000001be <.do_copy_data_start>:
     1be:	a2 33       	cpi	r26, 0x32	; 50
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <.do_copy_data_loop>

000001c4 <__do_clear_bss>:
     1c4:	17 e0       	ldi	r17, 0x07	; 7
     1c6:	a2 e3       	ldi	r26, 0x32	; 50
     1c8:	b2 e0       	ldi	r27, 0x02	; 2
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	a4 34       	cpi	r26, 0x44	; 68
     1d0:	b1 07       	cpc	r27, r17
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>

000001d4 <__do_global_ctors>:
     1d4:	11 e0       	ldi	r17, 0x01	; 1
     1d6:	c2 ea       	ldi	r28, 0xA2	; 162
     1d8:	d1 e0       	ldi	r29, 0x01	; 1
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <.do_global_ctors_start>

000001dc <.do_global_ctors_loop>:
     1dc:	22 97       	sbiw	r28, 0x02	; 2
     1de:	fe 01       	movw	r30, r28
     1e0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__tablejump__>

000001e4 <.do_global_ctors_start>:
     1e4:	cc 39       	cpi	r28, 0x9C	; 156
     1e6:	d1 07       	cpc	r29, r17
     1e8:	c9 f7       	brne	.-14     	; 0x1dc <.do_global_ctors_loop>
     1ea:	0e 94 3e 09 	call	0x127c	; 0x127c <main>
     1ee:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <_exit>

000001f2 <__bad_interrupt>:
     1f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f6 <memcpy>:
     1f6:	fb 01       	movw	r30, r22
     1f8:	dc 01       	movw	r26, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <memcpy+0xa>
     1fc:	01 90       	ld	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	41 50       	subi	r20, 0x01	; 1
     202:	50 40       	sbci	r21, 0x00	; 0
     204:	d8 f7       	brcc	.-10     	; 0x1fc <memcpy+0x6>
     206:	08 95       	ret

00000208 <strcpy>:
     208:	fb 01       	movw	r30, r22
     20a:	dc 01       	movw	r26, r24
     20c:	01 90       	ld	r0, Z+
     20e:	0d 92       	st	X+, r0
     210:	00 20       	and	r0, r0
     212:	e1 f7       	brne	.-8      	; 0x20c <strcpy+0x4>
     214:	08 95       	ret

00000216 <_ZN12eHealthClass22getBloodPressureLengthEv>:
	//!		Param : void															*
	//!		Returns: uint8_t with length											*
	//!		Example: int length = eHealth.getBloodPressureLength();					*
	//!******************************************************************************

	uint8_t eHealthClass::getBloodPressureLength(void)
     216:	fc 01       	movw	r30, r24
     218:	e7 52       	subi	r30, 0x27	; 39
     21a:	fd 4f       	sbci	r31, 0xFD	; 253
	{
		return BPlength;
	}
     21c:	80 81       	ld	r24, Z
     21e:	08 95       	ret

00000220 <_ZN12eHealthClass4swapEc>:

	//! Swap data for blood pressure mesure
	
	char eHealthClass::swap(char _data)
	{
		char highBits = (_data & 0xF0) / 16; 
     220:	77 27       	eor	r23, r23
     222:	67 fd       	sbrc	r22, 7
     224:	70 95       	com	r23
     226:	86 2f       	mov	r24, r22
     228:	82 95       	swap	r24
     22a:	80 7f       	andi	r24, 0xF0	; 240
     22c:	60 7f       	andi	r22, 0xF0	; 240
     22e:	70 70       	andi	r23, 0x00	; 0
     230:	e4 e0       	ldi	r30, 0x04	; 4
     232:	75 95       	asr	r23
     234:	67 95       	ror	r22
     236:	ea 95       	dec	r30
     238:	e1 f7       	brne	.-8      	; 0x232 <_ZN12eHealthClass4swapEc+0x12>
     23a:	86 0f       	add	r24, r22
 		char lowBits =  (_data & 0x0F) * 16; 
  		return ~(highBits + lowBits);
	}
     23c:	80 95       	com	r24
     23e:	08 95       	ret

00000240 <_GLOBAL__I__Z7i2cInitv>:

//***************************************************************
// Preinstantiate Objects										*
//***************************************************************

	eHealthClass eHealth = eHealthClass();
     240:	08 95       	ret

00000242 <_ZN12eHealthClass13numberToMonthEi>:
	//!		Param : int month in numerical format									*
	//!		Returns: String with the month characters (January, February...).		*
	//!		Example: Serial.print(eHealth.numberToMonth(month));					*
	//!******************************************************************************
	
	String eHealthClass::numberToMonth(int month)
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
	{
		if (month == 1)  return "January"; 
     248:	41 30       	cpi	r20, 0x01	; 1
     24a:	51 05       	cpc	r21, r1
     24c:	19 f4       	brne	.+6      	; 0x254 <_ZN12eHealthClass13numberToMonthEi+0x12>
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	71 e0       	ldi	r23, 0x01	; 1
     252:	3e c0       	rjmp	.+124    	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 2)  return "February";
     254:	42 30       	cpi	r20, 0x02	; 2
     256:	51 05       	cpc	r21, r1
     258:	19 f4       	brne	.+6      	; 0x260 <_ZN12eHealthClass13numberToMonthEi+0x1e>
     25a:	68 e0       	ldi	r22, 0x08	; 8
     25c:	71 e0       	ldi	r23, 0x01	; 1
     25e:	38 c0       	rjmp	.+112    	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 3)  return "March";
     260:	43 30       	cpi	r20, 0x03	; 3
     262:	51 05       	cpc	r21, r1
     264:	19 f4       	brne	.+6      	; 0x26c <_ZN12eHealthClass13numberToMonthEi+0x2a>
     266:	61 e1       	ldi	r22, 0x11	; 17
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	32 c0       	rjmp	.+100    	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 4)  return "April";
     26c:	44 30       	cpi	r20, 0x04	; 4
     26e:	51 05       	cpc	r21, r1
     270:	19 f4       	brne	.+6      	; 0x278 <_ZN12eHealthClass13numberToMonthEi+0x36>
     272:	67 e1       	ldi	r22, 0x17	; 23
     274:	71 e0       	ldi	r23, 0x01	; 1
     276:	2c c0       	rjmp	.+88     	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 5)  return "May";
     278:	45 30       	cpi	r20, 0x05	; 5
     27a:	51 05       	cpc	r21, r1
     27c:	19 f4       	brne	.+6      	; 0x284 <_ZN12eHealthClass13numberToMonthEi+0x42>
     27e:	6d e1       	ldi	r22, 0x1D	; 29
     280:	71 e0       	ldi	r23, 0x01	; 1
     282:	26 c0       	rjmp	.+76     	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 6)  return "June";
     284:	46 30       	cpi	r20, 0x06	; 6
     286:	51 05       	cpc	r21, r1
     288:	19 f4       	brne	.+6      	; 0x290 <_ZN12eHealthClass13numberToMonthEi+0x4e>
     28a:	61 e2       	ldi	r22, 0x21	; 33
     28c:	71 e0       	ldi	r23, 0x01	; 1
     28e:	20 c0       	rjmp	.+64     	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 7)  return "July";
     290:	47 30       	cpi	r20, 0x07	; 7
     292:	51 05       	cpc	r21, r1
     294:	19 f4       	brne	.+6      	; 0x29c <_ZN12eHealthClass13numberToMonthEi+0x5a>
     296:	66 e2       	ldi	r22, 0x26	; 38
     298:	71 e0       	ldi	r23, 0x01	; 1
     29a:	1a c0       	rjmp	.+52     	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 8)  return "August";
     29c:	48 30       	cpi	r20, 0x08	; 8
     29e:	51 05       	cpc	r21, r1
     2a0:	19 f4       	brne	.+6      	; 0x2a8 <_ZN12eHealthClass13numberToMonthEi+0x66>
     2a2:	6b e2       	ldi	r22, 0x2B	; 43
     2a4:	71 e0       	ldi	r23, 0x01	; 1
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 9)  return "September";
     2a8:	49 30       	cpi	r20, 0x09	; 9
     2aa:	51 05       	cpc	r21, r1
     2ac:	19 f4       	brne	.+6      	; 0x2b4 <_ZN12eHealthClass13numberToMonthEi+0x72>
     2ae:	62 e3       	ldi	r22, 0x32	; 50
     2b0:	71 e0       	ldi	r23, 0x01	; 1
     2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 10) return "October";
     2b4:	4a 30       	cpi	r20, 0x0A	; 10
     2b6:	51 05       	cpc	r21, r1
     2b8:	19 f4       	brne	.+6      	; 0x2c0 <_ZN12eHealthClass13numberToMonthEi+0x7e>
     2ba:	6c e3       	ldi	r22, 0x3C	; 60
     2bc:	71 e0       	ldi	r23, 0x01	; 1
     2be:	08 c0       	rjmp	.+16     	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 11) return "November";
     2c0:	4b 30       	cpi	r20, 0x0B	; 11
     2c2:	51 05       	cpc	r21, r1
     2c4:	19 f4       	brne	.+6      	; 0x2cc <_ZN12eHealthClass13numberToMonthEi+0x8a>
     2c6:	64 e4       	ldi	r22, 0x44	; 68
     2c8:	71 e0       	ldi	r23, 0x01	; 1
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else return "December";
     2cc:	6d e4       	ldi	r22, 0x4D	; 77
     2ce:	71 e0       	ldi	r23, 0x01	; 1
     2d0:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN6StringC1EPKc>
	}
     2d4:	ce 01       	movw	r24, r28
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <_ZN12eHealthClass23readBloodPressureSensorEv>:
	//!	Param : void																*
	//!	Returns: void																*
	//!	Example: eHealth.initBloodPressureSensor();									*
	//!******************************************************************************

	void eHealthClass::readBloodPressureSensor(void)
     2dc:	6f 92       	push	r6
     2de:	7f 92       	push	r7
     2e0:	8f 92       	push	r8
     2e2:	9f 92       	push	r9
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	df 93       	push	r29
     2f4:	cf 93       	push	r28
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <_ZN12eHealthClass23readBloodPressureSensorEv+0x1c>
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <_ZN12eHealthClass23readBloodPressureSensorEv+0x1e>
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	7c 01       	movw	r14, r24
		unsigned char _data;
		unsigned char _buf[4];//1280=80entries * 16 bytes each
		unsigned char Head[4] = {0xC1,0xC2,0xC3,0xC4};//const
		bool is_head_found = false;
		//int ia=0;
		BPlength=0;
     300:	89 ed       	ldi	r24, 0xD9	; 217
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	e8 0e       	add	r14, r24
     306:	f9 1e       	adc	r15, r25
     308:	f7 01       	movw	r30, r14
     30a:	10 82       	st	Z, r1
     30c:	87 e2       	ldi	r24, 0x27	; 39
     30e:	9d ef       	ldi	r25, 0xFD	; 253
     310:	e8 0e       	add	r14, r24
     312:	f9 1e       	adc	r15, r25

		Serial.begin(19200);
     314:	85 e1       	ldi	r24, 0x15	; 21
     316:	97 e0       	ldi	r25, 0x07	; 7
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	5b e4       	ldi	r21, 0x4B	; 75
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN14HardwareSerial5beginEm>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     324:	85 e1       	ldi	r24, 0x15	; 21
     326:	97 e0       	ldi	r25, 0x07	; 7
     328:	6a ea       	ldi	r22, 0xAA	; 170
     32a:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN14HardwareSerial5writeEh>
	 	Serial.write(0xAA);
		delayMicroseconds(1);
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 ee 09 	call	0x13dc	; 0x13dc <delayMicroseconds>
     336:	85 e1       	ldi	r24, 0x15	; 21
     338:	97 e0       	ldi	r25, 0x07	; 7
     33a:	65 e5       	ldi	r22, 0x55	; 85
     33c:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN14HardwareSerial5writeEh>
	 	Serial.write(0x55);
		delayMicroseconds(1);
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 ee 09 	call	0x13dc	; 0x13dc <delayMicroseconds>
     348:	85 e1       	ldi	r24, 0x15	; 21
     34a:	97 e0       	ldi	r25, 0x07	; 7
     34c:	68 e8       	ldi	r22, 0x88	; 136
     34e:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN14HardwareSerial5writeEh>
		Serial.write(0x88);
	 	delay(2500);
     352:	64 ec       	ldi	r22, 0xC4	; 196
     354:	79 e0       	ldi	r23, 0x09	; 9
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 95 09 	call	0x132a	; 0x132a <delay>
		//while(!Serial.available()){}//The first byte is available, but the rest are not.
		
		int num_to_read = Serial.available();
     35e:	85 e1       	ldi	r24, 0x15	; 21
     360:	97 e0       	ldi	r25, 0x07	; 7
     362:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_ZN14HardwareSerial9availableEv>
     366:	8c 01       	movw	r16, r24
		if ( num_to_read > 0) { // The protocol sends the measures 
     368:	18 16       	cp	r1, r24
     36a:	19 06       	cpc	r1, r25
     36c:	0c f0       	brlt	.+2      	; 0x370 <_ZN12eHealthClass23readBloodPressureSensorEv+0x94>
     36e:	b9 c1       	rjmp	.+882    	; 0x6e2 <_ZN12eHealthClass23readBloodPressureSensorEv+0x406>
#ifdef _DEBUG		
			Serial.print(F("\nSerial available: "));// yht, for debug
     370:	85 e1       	ldi	r24, 0x15	; 21
     372:	97 e0       	ldi	r25, 0x07	; 7
     374:	60 eb       	ldi	r22, 0xB0	; 176
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(num_to_read);//yht	 			
     37c:	85 e1       	ldi	r24, 0x15	; 21
     37e:	97 e0       	ldi	r25, 0x07	; 7
     380:	b8 01       	movw	r22, r16
     382:	4a e0       	ldi	r20, 0x0A	; 10
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	0e 94 4f 08 	call	0x109e	; 0x109e <_ZN5Print7printlnEii>
			Serial.print(F("\nData Head\n"));
     38a:	85 e1       	ldi	r24, 0x15	; 21
     38c:	97 e0       	ldi	r25, 0x07	; 7
     38e:	64 ea       	ldi	r22, 0xA4	; 164
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.println(F("\nErrors: Can't find the head of data"));
				return;
			}*/

			while(1){
				_data = Serial.read();
     396:	85 e1       	ldi	r24, 0x15	; 21
     398:	97 e0       	ldi	r25, 0x07	; 7
     39a:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     39e:	18 2f       	mov	r17, r24
#ifdef _DEBUG
				Serial.print(_data,HEX);
     3a0:	85 e1       	ldi	r24, 0x15	; 21
     3a2:	97 e0       	ldi	r25, 0x07	; 7
     3a4:	61 2f       	mov	r22, r17
     3a6:	40 e1       	ldi	r20, 0x10	; 16
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN5Print5printEhi>
				Serial.print(F(" "));
     3ae:	85 e1       	ldi	r24, 0x15	; 21
     3b0:	97 e0       	ldi	r25, 0x07	; 7
     3b2:	62 ea       	ldi	r22, 0xA2	; 162
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
#endif
				//1. FIND THE DATA HEAD, which are "C1 C2 C3 C4"


				if (_data == 0xC1)	{
     3ba:	11 3c       	cpi	r17, 0xC1	; 193
     3bc:	61 f5       	brne	.+88     	; 0x416 <_ZN12eHealthClass23readBloodPressureSensorEv+0x13a>
					//_buf[0]=_data;
					_buf[1]=Serial.read();					
     3be:	85 e1       	ldi	r24, 0x15	; 21
     3c0:	97 e0       	ldi	r25, 0x07	; 7
     3c2:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     3c6:	d8 2e       	mov	r13, r24
					_buf[2]=Serial.read();					
     3c8:	85 e1       	ldi	r24, 0x15	; 21
     3ca:	97 e0       	ldi	r25, 0x07	; 7
     3cc:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     3d0:	08 2f       	mov	r16, r24
					_buf[3]=Serial.read();
     3d2:	85 e1       	ldi	r24, 0x15	; 21
     3d4:	97 e0       	ldi	r25, 0x07	; 7
     3d6:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     3da:	18 2f       	mov	r17, r24
#ifdef _DEBUG
					Serial.print(_buf[1],HEX);
     3dc:	85 e1       	ldi	r24, 0x15	; 21
     3de:	97 e0       	ldi	r25, 0x07	; 7
     3e0:	6d 2d       	mov	r22, r13
     3e2:	40 e1       	ldi	r20, 0x10	; 16
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN5Print5printEhi>
					Serial.print(_buf[2],HEX);
     3ea:	85 e1       	ldi	r24, 0x15	; 21
     3ec:	97 e0       	ldi	r25, 0x07	; 7
     3ee:	60 2f       	mov	r22, r16
     3f0:	40 e1       	ldi	r20, 0x10	; 16
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN5Print5printEhi>
					Serial.print(_buf[3],HEX);
     3f8:	85 e1       	ldi	r24, 0x15	; 21
     3fa:	97 e0       	ldi	r25, 0x07	; 7
     3fc:	61 2f       	mov	r22, r17
     3fe:	40 e1       	ldi	r20, 0x10	; 16
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN5Print5printEhi>
#endif
					if(_buf[1]== 0xC2 && _buf[2] == 0xC3 && _buf[3] == 0xC4){
     406:	92 ec       	ldi	r25, 0xC2	; 194
     408:	d9 16       	cp	r13, r25
     40a:	29 f6       	brne	.-118    	; 0x396 <_ZN12eHealthClass23readBloodPressureSensorEv+0xba>
     40c:	03 3c       	cpi	r16, 0xC3	; 195
     40e:	19 f6       	brne	.-122    	; 0x396 <_ZN12eHealthClass23readBloodPressureSensorEv+0xba>
     410:	14 3c       	cpi	r17, 0xC4	; 196
     412:	09 f6       	brne	.-126    	; 0x396 <_ZN12eHealthClass23readBloodPressureSensorEv+0xba>
     414:	04 c0       	rjmp	.+8      	; 0x41e <_ZN12eHealthClass23readBloodPressureSensorEv+0x142>
						is_head_found = true;
						break;
					}
				}else if(_data == 0xFF)	{
     416:	1f 3f       	cpi	r17, 0xFF	; 255
     418:	09 f0       	breq	.+2      	; 0x41c <_ZN12eHealthClass23readBloodPressureSensorEv+0x140>
     41a:	bd cf       	rjmp	.-134    	; 0x396 <_ZN12eHealthClass23readBloodPressureSensorEv+0xba>
     41c:	5c c1       	rjmp	.+696    	; 0x6d6 <_ZN12eHealthClass23readBloodPressureSensorEv+0x3fa>
     41e:	1c 83       	std	Y+4, r17	; 0x04
     420:	0b 83       	std	Y+3, r16	; 0x03
     422:	da 82       	std	Y+2, r13	; 0x02
			{
				Serial.println(F("\nErrors: Can't find the head of data"));
				return;
			}

			Serial.print(F("\n"));
     424:	85 e1       	ldi	r24, 0x15	; 21
     426:	97 e0       	ldi	r25, 0x07	; 7
     428:	6b e7       	ldi	r22, 0x7B	; 123
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>

			_data = Serial.peek();
     430:	85 e1       	ldi	r24, 0x15	; 21
     432:	97 e0       	ldi	r25, 0x07	; 7
     434:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN14HardwareSerial4peekEv>
     438:	18 2f       	mov	r17, r24
			
 			while( Serial.available() && _data != 0xD1 && _data != 0xD4 && BPlength < BP_VECTOR_LEN) //&& _data != 0xFF  // "&& BPlength < BP_VECTOR_LEN(=80 now)" yht to prevent infinity loop
     43a:	89 ed       	ldi	r24, 0xD9	; 217
     43c:	c8 2e       	mov	r12, r24
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	d8 2e       	mov	r13, r24
     442:	ce 0c       	add	r12, r14
     444:	df 1c       	adc	r13, r15
					BPlength++;
				}


#ifdef _DEBUG
				Serial.print(F("\nCheckSum 1\n"));
     446:	3e 01       	movw	r6, r28
     448:	08 94       	sec
     44a:	61 1c       	adc	r6, r1
     44c:	71 1c       	adc	r7, r1
				for (int i = 0; i<4; i++){ // CheckSum 1, WHICH ARE "FF F0 F1 F2"
     44e:	05 e0       	ldi	r16, 0x05	; 5
     450:	80 2e       	mov	r8, r16
     452:	91 2c       	mov	r9, r1
     454:	8c 0e       	add	r8, r28
     456:	9d 1e       	adc	r9, r29
     458:	2f c0       	rjmp	.+94     	; 0x4b8 <_ZN12eHealthClass23readBloodPressureSensorEv+0x1dc>

				for (int i = 0; i<4; i++){ // CheckSum 1, WHICH ARE "FF F0 F1 F2"
					_buf[i] = Serial.read();
				}

				if(0xFF == _buf[0] && 0xF0 == _buf[1] && 0xF1 == _buf[2] && 0xF2 == _buf[3])
     45a:	e0 ef       	ldi	r30, 0xF0	; 240
     45c:	be 16       	cp	r11, r30
     45e:	41 f4       	brne	.+16     	; 0x470 <_ZN12eHealthClass23readBloodPressureSensorEv+0x194>
     460:	01 3f       	cpi	r16, 0xF1	; 241
     462:	31 f4       	brne	.+12     	; 0x470 <_ZN12eHealthClass23readBloodPressureSensorEv+0x194>
     464:	82 3f       	cpi	r24, 0xF2	; 242
     466:	21 f4       	brne	.+8      	; 0x470 <_ZN12eHealthClass23readBloodPressureSensorEv+0x194>
				{
					//is_entry_valid=true;
					BPlength++;
     468:	f6 01       	movw	r30, r12
     46a:	80 81       	ld	r24, Z
     46c:	8f 5f       	subi	r24, 0xFF	; 255
     46e:	80 83       	st	Z, r24
				}


#ifdef _DEBUG
				Serial.print(F("\nCheckSum 1\n"));
     470:	85 e1       	ldi	r24, 0x15	; 21
     472:	97 e0       	ldi	r25, 0x07	; 7
     474:	6e e6       	ldi	r22, 0x6E	; 110
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
     47c:	83 01       	movw	r16, r6
				for (int i = 0; i<4; i++){ // CheckSum 1, WHICH ARE "FF F0 F1 F2"
					Serial.print(_buf[i],HEX);
     47e:	85 e1       	ldi	r24, 0x15	; 21
     480:	97 e0       	ldi	r25, 0x07	; 7
     482:	f8 01       	movw	r30, r16
     484:	61 91       	ld	r22, Z+
     486:	8f 01       	movw	r16, r30
     488:	40 e1       	ldi	r20, 0x10	; 16
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN5Print5printEhi>
					Serial.print(F(" "));
     490:	85 e1       	ldi	r24, 0x15	; 21
     492:	97 e0       	ldi	r25, 0x07	; 7
     494:	6c e6       	ldi	r22, 0x6C	; 108
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
				}


#ifdef _DEBUG
				Serial.print(F("\nCheckSum 1\n"));
				for (int i = 0; i<4; i++){ // CheckSum 1, WHICH ARE "FF F0 F1 F2"
     49c:	08 15       	cp	r16, r8
     49e:	19 05       	cpc	r17, r9
     4a0:	71 f7       	brne	.-36     	; 0x47e <_ZN12eHealthClass23readBloodPressureSensorEv+0x1a2>
					Serial.print(_buf[i],HEX);
					Serial.print(F(" "));
				}
				Serial.print(F("\n"));
     4a2:	85 e1       	ldi	r24, 0x15	; 21
     4a4:	97 e0       	ldi	r25, 0x07	; 7
     4a6:	6a e6       	ldi	r22, 0x6A	; 106
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
#endif
				_data = Serial.peek(); 
     4ae:	85 e1       	ldi	r24, 0x15	; 21
     4b0:	97 e0       	ldi	r25, 0x07	; 7
     4b2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN14HardwareSerial4peekEv>
     4b6:	18 2f       	mov	r17, r24

			Serial.print(F("\n"));

			_data = Serial.peek();
			
 			while( Serial.available() && _data != 0xD1 && _data != 0xD4 && BPlength < BP_VECTOR_LEN) //&& _data != 0xFF  // "&& BPlength < BP_VECTOR_LEN(=80 now)" yht to prevent infinity loop
     4b8:	85 e1       	ldi	r24, 0x15	; 21
     4ba:	97 e0       	ldi	r25, 0x07	; 7
     4bc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_ZN14HardwareSerial9availableEv>
     4c0:	89 2b       	or	r24, r25
     4c2:	21 f0       	breq	.+8      	; 0x4cc <_ZN12eHealthClass23readBloodPressureSensorEv+0x1f0>
     4c4:	11 3d       	cpi	r17, 0xD1	; 209
     4c6:	11 f0       	breq	.+4      	; 0x4cc <_ZN12eHealthClass23readBloodPressureSensorEv+0x1f0>
     4c8:	14 3d       	cpi	r17, 0xD4	; 212
     4ca:	19 f5       	brne	.+70     	; 0x512 <_ZN12eHealthClass23readBloodPressureSensorEv+0x236>
				
			}


 			for (int i = 0; i<4; i++){ // CheckSum 2, WHICH ARE "D1 D2 D3 D4"
  				_buf[i] = Serial.read();
     4cc:	85 e1       	ldi	r24, 0x15	; 21
     4ce:	97 e0       	ldi	r25, 0x07	; 7
     4d0:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     4d4:	89 83       	std	Y+1, r24	; 0x01
     4d6:	85 e1       	ldi	r24, 0x15	; 21
     4d8:	97 e0       	ldi	r25, 0x07	; 7
     4da:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     4de:	8a 83       	std	Y+2, r24	; 0x02
     4e0:	85 e1       	ldi	r24, 0x15	; 21
     4e2:	97 e0       	ldi	r25, 0x07	; 7
     4e4:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     4e8:	8b 83       	std	Y+3, r24	; 0x03
     4ea:	85 e1       	ldi	r24, 0x15	; 21
     4ec:	97 e0       	ldi	r25, 0x07	; 7
     4ee:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     4f2:	8c 83       	std	Y+4, r24	; 0x04
 			}

#ifdef _DEBUG
 			Serial.print("\nCheckSum 2\n");
     4f4:	85 e1       	ldi	r24, 0x15	; 21
     4f6:	97 e0       	ldi	r25, 0x07	; 7
     4f8:	6e e0       	ldi	r22, 0x0E	; 14
     4fa:	72 e0       	ldi	r23, 0x02	; 2
     4fc:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN5Print5printEPKc>
     500:	8e 01       	movw	r16, r28
     502:	0f 5f       	subi	r16, 0xFF	; 255
     504:	1f 4f       	sbci	r17, 0xFF	; 255
 			for (int i = 0; i<4; i++){
     506:	b5 e0       	ldi	r27, 0x05	; 5
     508:	eb 2e       	mov	r14, r27
     50a:	f1 2c       	mov	r15, r1
     50c:	ec 0e       	add	r14, r28
     50e:	fd 1e       	adc	r15, r29
     510:	c5 c0       	rjmp	.+394    	; 0x69c <_ZN12eHealthClass23readBloodPressureSensorEv+0x3c0>

			Serial.print(F("\n"));

			_data = Serial.peek();
			
 			while( Serial.available() && _data != 0xD1 && _data != 0xD4 && BPlength < BP_VECTOR_LEN) //&& _data != 0xFF  // "&& BPlength < BP_VECTOR_LEN(=80 now)" yht to prevent infinity loop
     512:	f6 01       	movw	r30, r12
     514:	10 81       	ld	r17, Z
     516:	10 35       	cpi	r17, 0x50	; 80
     518:	c8 f6       	brcc	.-78     	; 0x4cc <_ZN12eHealthClass23readBloodPressureSensorEv+0x1f0>
			{				
				bloodPressureDataVector[BPlength].year = swap(Serial.read());
     51a:	85 e1       	ldi	r24, 0x15	; 21
     51c:	97 e0       	ldi	r25, 0x07	; 7
     51e:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     522:	68 2f       	mov	r22, r24
     524:	c7 01       	movw	r24, r14
     526:	0e 94 10 01 	call	0x220	; 0x220 <_ZN12eHealthClass4swapEc>
     52a:	e1 2f       	mov	r30, r17
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	37 96       	adiw	r30, 0x07	; 7
     530:	a3 e0       	ldi	r26, 0x03	; 3
     532:	ee 0f       	add	r30, r30
     534:	ff 1f       	adc	r31, r31
     536:	aa 95       	dec	r26
     538:	e1 f7       	brne	.-8      	; 0x532 <_ZN12eHealthClass23readBloodPressureSensorEv+0x256>
     53a:	ee 0d       	add	r30, r14
     53c:	ff 1d       	adc	r31, r15
     53e:	80 83       	st	Z, r24
				bloodPressureDataVector[BPlength].month = swap(Serial.read());
     540:	f6 01       	movw	r30, r12
     542:	80 81       	ld	r24, Z
     544:	08 2f       	mov	r16, r24
     546:	10 e0       	ldi	r17, 0x00	; 0
     548:	85 e1       	ldi	r24, 0x15	; 21
     54a:	97 e0       	ldi	r25, 0x07	; 7
     54c:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     550:	68 2f       	mov	r22, r24
     552:	c7 01       	movw	r24, r14
     554:	0e 94 10 01 	call	0x220	; 0x220 <_ZN12eHealthClass4swapEc>
     558:	73 e0       	ldi	r23, 0x03	; 3
     55a:	00 0f       	add	r16, r16
     55c:	11 1f       	adc	r17, r17
     55e:	7a 95       	dec	r23
     560:	e1 f7       	brne	.-8      	; 0x55a <_ZN12eHealthClass23readBloodPressureSensorEv+0x27e>
     562:	0e 0d       	add	r16, r14
     564:	1f 1d       	adc	r17, r15
     566:	f8 01       	movw	r30, r16
     568:	81 af       	std	Z+57, r24	; 0x39
				bloodPressureDataVector[BPlength].day = swap(Serial.read());
     56a:	f6 01       	movw	r30, r12
     56c:	80 81       	ld	r24, Z
     56e:	08 2f       	mov	r16, r24
     570:	10 e0       	ldi	r17, 0x00	; 0
     572:	85 e1       	ldi	r24, 0x15	; 21
     574:	97 e0       	ldi	r25, 0x07	; 7
     576:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     57a:	68 2f       	mov	r22, r24
     57c:	c7 01       	movw	r24, r14
     57e:	0e 94 10 01 	call	0x220	; 0x220 <_ZN12eHealthClass4swapEc>
     582:	63 e0       	ldi	r22, 0x03	; 3
     584:	00 0f       	add	r16, r16
     586:	11 1f       	adc	r17, r17
     588:	6a 95       	dec	r22
     58a:	e1 f7       	brne	.-8      	; 0x584 <_ZN12eHealthClass23readBloodPressureSensorEv+0x2a8>
     58c:	0e 0d       	add	r16, r14
     58e:	1f 1d       	adc	r17, r15
     590:	f8 01       	movw	r30, r16
     592:	82 af       	std	Z+58, r24	; 0x3a
				bloodPressureDataVector[BPlength].hour = swap(Serial.read());
     594:	f6 01       	movw	r30, r12
     596:	80 81       	ld	r24, Z
     598:	08 2f       	mov	r16, r24
     59a:	10 e0       	ldi	r17, 0x00	; 0
     59c:	85 e1       	ldi	r24, 0x15	; 21
     59e:	97 e0       	ldi	r25, 0x07	; 7
     5a0:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     5a4:	68 2f       	mov	r22, r24
     5a6:	c7 01       	movw	r24, r14
     5a8:	0e 94 10 01 	call	0x220	; 0x220 <_ZN12eHealthClass4swapEc>
     5ac:	53 e0       	ldi	r21, 0x03	; 3
     5ae:	00 0f       	add	r16, r16
     5b0:	11 1f       	adc	r17, r17
     5b2:	5a 95       	dec	r21
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <_ZN12eHealthClass23readBloodPressureSensorEv+0x2d2>
     5b6:	0e 0d       	add	r16, r14
     5b8:	1f 1d       	adc	r17, r15
     5ba:	f8 01       	movw	r30, r16
     5bc:	83 af       	std	Z+59, r24	; 0x3b
				bloodPressureDataVector[BPlength].minutes = swap(Serial.read());
     5be:	f6 01       	movw	r30, r12
     5c0:	80 81       	ld	r24, Z
     5c2:	08 2f       	mov	r16, r24
     5c4:	10 e0       	ldi	r17, 0x00	; 0
     5c6:	85 e1       	ldi	r24, 0x15	; 21
     5c8:	97 e0       	ldi	r25, 0x07	; 7
     5ca:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     5ce:	68 2f       	mov	r22, r24
     5d0:	c7 01       	movw	r24, r14
     5d2:	0e 94 10 01 	call	0x220	; 0x220 <_ZN12eHealthClass4swapEc>
     5d6:	43 e0       	ldi	r20, 0x03	; 3
     5d8:	00 0f       	add	r16, r16
     5da:	11 1f       	adc	r17, r17
     5dc:	4a 95       	dec	r20
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <_ZN12eHealthClass23readBloodPressureSensorEv+0x2fc>
     5e0:	0e 0d       	add	r16, r14
     5e2:	1f 1d       	adc	r17, r15
     5e4:	f8 01       	movw	r30, r16
     5e6:	84 af       	std	Z+60, r24	; 0x3c
				bloodPressureDataVector[BPlength].systolic = swap(Serial.read());
     5e8:	f6 01       	movw	r30, r12
     5ea:	80 81       	ld	r24, Z
     5ec:	08 2f       	mov	r16, r24
     5ee:	10 e0       	ldi	r17, 0x00	; 0
     5f0:	85 e1       	ldi	r24, 0x15	; 21
     5f2:	97 e0       	ldi	r25, 0x07	; 7
     5f4:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     5f8:	68 2f       	mov	r22, r24
     5fa:	c7 01       	movw	r24, r14
     5fc:	0e 94 10 01 	call	0x220	; 0x220 <_ZN12eHealthClass4swapEc>
     600:	33 e0       	ldi	r19, 0x03	; 3
     602:	00 0f       	add	r16, r16
     604:	11 1f       	adc	r17, r17
     606:	3a 95       	dec	r19
     608:	e1 f7       	brne	.-8      	; 0x602 <_ZN12eHealthClass23readBloodPressureSensorEv+0x326>
     60a:	0e 0d       	add	r16, r14
     60c:	1f 1d       	adc	r17, r15
     60e:	f8 01       	movw	r30, r16
     610:	85 af       	std	Z+61, r24	; 0x3d
				bloodPressureDataVector[BPlength].diastolic = swap(Serial.read());
     612:	f6 01       	movw	r30, r12
     614:	80 81       	ld	r24, Z
     616:	08 2f       	mov	r16, r24
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	85 e1       	ldi	r24, 0x15	; 21
     61c:	97 e0       	ldi	r25, 0x07	; 7
     61e:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     622:	68 2f       	mov	r22, r24
     624:	c7 01       	movw	r24, r14
     626:	0e 94 10 01 	call	0x220	; 0x220 <_ZN12eHealthClass4swapEc>
     62a:	23 e0       	ldi	r18, 0x03	; 3
     62c:	00 0f       	add	r16, r16
     62e:	11 1f       	adc	r17, r17
     630:	2a 95       	dec	r18
     632:	e1 f7       	brne	.-8      	; 0x62c <_ZN12eHealthClass23readBloodPressureSensorEv+0x350>
     634:	0e 0d       	add	r16, r14
     636:	1f 1d       	adc	r17, r15
     638:	f8 01       	movw	r30, r16
     63a:	86 af       	std	Z+62, r24	; 0x3e
				bloodPressureDataVector[BPlength].pulse = swap(Serial.read());
     63c:	f6 01       	movw	r30, r12
     63e:	80 81       	ld	r24, Z
     640:	08 2f       	mov	r16, r24
     642:	10 e0       	ldi	r17, 0x00	; 0
     644:	85 e1       	ldi	r24, 0x15	; 21
     646:	97 e0       	ldi	r25, 0x07	; 7
     648:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     64c:	68 2f       	mov	r22, r24
     64e:	c7 01       	movw	r24, r14
     650:	0e 94 10 01 	call	0x220	; 0x220 <_ZN12eHealthClass4swapEc>
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	00 0f       	add	r16, r16
     658:	11 1f       	adc	r17, r17
     65a:	9a 95       	dec	r25
     65c:	e1 f7       	brne	.-8      	; 0x656 <_ZN12eHealthClass23readBloodPressureSensorEv+0x37a>
     65e:	0e 0d       	add	r16, r14
     660:	1f 1d       	adc	r17, r15
     662:	f8 01       	movw	r30, r16
     664:	87 af       	std	Z+63, r24	; 0x3f

				for (int i = 0; i<4; i++){ // CheckSum 1, WHICH ARE "FF F0 F1 F2"
					_buf[i] = Serial.read();
     666:	85 e1       	ldi	r24, 0x15	; 21
     668:	97 e0       	ldi	r25, 0x07	; 7
     66a:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     66e:	18 2f       	mov	r17, r24
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	85 e1       	ldi	r24, 0x15	; 21
     674:	97 e0       	ldi	r25, 0x07	; 7
     676:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     67a:	b8 2e       	mov	r11, r24
     67c:	8a 83       	std	Y+2, r24	; 0x02
     67e:	85 e1       	ldi	r24, 0x15	; 21
     680:	97 e0       	ldi	r25, 0x07	; 7
     682:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     686:	08 2f       	mov	r16, r24
     688:	8b 83       	std	Y+3, r24	; 0x03
     68a:	85 e1       	ldi	r24, 0x15	; 21
     68c:	97 e0       	ldi	r25, 0x07	; 7
     68e:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN14HardwareSerial4readEv>
     692:	8c 83       	std	Y+4, r24	; 0x04
				}

				if(0xFF == _buf[0] && 0xF0 == _buf[1] && 0xF1 == _buf[2] && 0xF2 == _buf[3])
     694:	1f 3f       	cpi	r17, 0xFF	; 255
     696:	09 f0       	breq	.+2      	; 0x69a <_ZN12eHealthClass23readBloodPressureSensorEv+0x3be>
     698:	eb ce       	rjmp	.-554    	; 0x470 <_ZN12eHealthClass23readBloodPressureSensorEv+0x194>
     69a:	df ce       	rjmp	.-578    	; 0x45a <_ZN12eHealthClass23readBloodPressureSensorEv+0x17e>
 			}

#ifdef _DEBUG
 			Serial.print("\nCheckSum 2\n");
 			for (int i = 0; i<4; i++){
				Serial.print(_buf[i],HEX);//yht
     69c:	85 e1       	ldi	r24, 0x15	; 21
     69e:	97 e0       	ldi	r25, 0x07	; 7
     6a0:	f8 01       	movw	r30, r16
     6a2:	61 91       	ld	r22, Z+
     6a4:	8f 01       	movw	r16, r30
     6a6:	40 e1       	ldi	r20, 0x10	; 16
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN5Print5printEhi>
				Serial.print(F(" "));
     6ae:	85 e1       	ldi	r24, 0x15	; 21
     6b0:	97 e0       	ldi	r25, 0x07	; 7
     6b2:	68 e6       	ldi	r22, 0x68	; 104
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
  				_buf[i] = Serial.read();
 			}

#ifdef _DEBUG
 			Serial.print("\nCheckSum 2\n");
 			for (int i = 0; i<4; i++){
     6ba:	0e 15       	cp	r16, r14
     6bc:	1f 05       	cpc	r17, r15
     6be:	71 f7       	brne	.-36     	; 0x69c <_ZN12eHealthClass23readBloodPressureSensorEv+0x3c0>
				Serial.print(_buf[i],HEX);//yht
				Serial.print(F(" "));
 			}
			Serial.print(("\n"));	
     6c0:	85 e1       	ldi	r24, 0x15	; 21
     6c2:	97 e0       	ldi	r25, 0x07	; 7
     6c4:	69 e5       	ldi	r22, 0x59	; 89
     6c6:	71 e0       	ldi	r23, 0x01	; 1
     6c8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN5Print5printEPKc>
#endif
			Serial.flush();	//flush all the data unread.		
     6cc:	85 e1       	ldi	r24, 0x15	; 21
     6ce:	97 e0       	ldi	r25, 0x07	; 7
     6d0:	0e 94 17 06 	call	0xc2e	; 0xc2e <_ZN14HardwareSerial5flushEv>
     6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <_ZN12eHealthClass23readBloodPressureSensorEv+0x406>
				}				 
			}

			if(!is_head_found)
			{
				Serial.println(F("\nErrors: Can't find the head of data"));
     6d6:	85 e1       	ldi	r24, 0x15	; 21
     6d8:	97 e0       	ldi	r25, 0x07	; 7
     6da:	6d e7       	ldi	r22, 0x7D	; 125
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN5Print7printlnEPK19__FlashStringHelper>
 			}
			Serial.print(("\n"));	
#endif
			Serial.flush();	//flush all the data unread.		
		}
	}
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	cf 91       	pop	r28
     6ec:	df 91       	pop	r29
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	9f 90       	pop	r9
     6fe:	8f 90       	pop	r8
     700:	7f 90       	pop	r7
     702:	6f 90       	pop	r6
     704:	08 95       	ret

00000706 <_GLOBAL__I_eHealthLogo>:

//***************************************************************
// Preinstantiate Objects										*
//***************************************************************

	eHealthDisplayClass eHealthDisplay = eHealthDisplayClass();
     706:	08 95       	ret

00000708 <loop>:

void setup() {
   Serial.begin(19200); //115200
}

void loop() {
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	27 97       	sbiw	r28, 0x07	; 7
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61

  //READ BP DATA
  //Serial.write(0x0D);Serial.write(0x0A);
  Serial.print(F("\n==\nReading Starts...\n"));
     72c:	85 e1       	ldi	r24, 0x15	; 21
     72e:	97 e0       	ldi	r25, 0x07	; 7
     730:	64 e8       	ldi	r22, 0x84	; 132
     732:	71 e0       	ldi	r23, 0x01	; 1
     734:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
  eHealth.readBloodPressureSensor();
     738:	82 e3       	ldi	r24, 0x32	; 50
     73a:	92 e0       	ldi	r25, 0x02	; 2
     73c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN12eHealthClass23readBloodPressureSensorEv>
  Serial.print(F("\nReading Ends.\n"));
     740:	85 e1       	ldi	r24, 0x15	; 21
     742:	97 e0       	ldi	r25, 0x07	; 7
     744:	64 e7       	ldi	r22, 0x74	; 116
     746:	71 e0       	ldi	r23, 0x01	; 1
     748:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>

  //PRINT BP DATA
  uint8_t numberOfData = eHealth.getBloodPressureLength();
     74c:	82 e3       	ldi	r24, 0x32	; 50
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN12eHealthClass22getBloodPressureLengthEv>
     754:	18 2f       	mov	r17, r24
  Serial.print(F("Number of measures : "));
     756:	85 e1       	ldi	r24, 0x15	; 21
     758:	97 e0       	ldi	r25, 0x07	; 7
     75a:	6e e5       	ldi	r22, 0x5E	; 94
     75c:	71 e0       	ldi	r23, 0x01	; 1
     75e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(numberOfData, DEC);
     762:	85 e1       	ldi	r24, 0x15	; 21
     764:	97 e0       	ldi	r25, 0x07	; 7
     766:	61 2f       	mov	r22, r17
     768:	4a e0       	ldi	r20, 0x0A	; 10
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN5Print7printlnEhi>
  delay(200);
     770:	68 ec       	ldi	r22, 0xC8	; 200
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 95 09 	call	0x132a	; 0x132a <delay>
     77c:	8a e6       	ldi	r24, 0x6A	; 106
     77e:	e8 2e       	mov	r14, r24
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	f8 2e       	mov	r15, r24
     784:	cc 24       	eor	r12, r12
     786:	dd 24       	eor	r13, r13


  for (int i = 0; i<numberOfData; i++) {
     788:	a1 2e       	mov	r10, r17
     78a:	bb 24       	eor	r11, r11
    Serial.println(i + 1);

    Serial.print(F("Date -> "));
    Serial.print(eHealth.bloodPressureDataVector[i].day);
    Serial.print(F(" of "));
    Serial.print(eHealth.numberToMonth(eHealth.bloodPressureDataVector[i].month));
     78c:	8e 01       	movw	r16, r28
     78e:	0f 5f       	subi	r16, 0xFF	; 255
     790:	1f 4f       	sbci	r17, 0xFF	; 255
     792:	c2 c0       	rjmp	.+388    	; 0x918 <__stack+0x19>
  delay(200);


  for (int i = 0; i<numberOfData; i++) {
    // The protocol sends data in this order
    Serial.println(F("=========================================="));
     794:	85 e1       	ldi	r24, 0x15	; 21
     796:	97 e0       	ldi	r25, 0x07	; 7
     798:	63 e3       	ldi	r22, 0x33	; 51
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN5Print7printlnEPK19__FlashStringHelper>

    Serial.print(F("Measure number "));
     7a0:	85 e1       	ldi	r24, 0x15	; 21
     7a2:	97 e0       	ldi	r25, 0x07	; 7
     7a4:	63 e2       	ldi	r22, 0x23	; 35
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(i + 1);
     7ac:	08 94       	sec
     7ae:	c1 1c       	adc	r12, r1
     7b0:	d1 1c       	adc	r13, r1
     7b2:	85 e1       	ldi	r24, 0x15	; 21
     7b4:	97 e0       	ldi	r25, 0x07	; 7
     7b6:	b6 01       	movw	r22, r12
     7b8:	4a e0       	ldi	r20, 0x0A	; 10
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	0e 94 4f 08 	call	0x109e	; 0x109e <_ZN5Print7printlnEii>

    Serial.print(F("Date -> "));
     7c0:	85 e1       	ldi	r24, 0x15	; 21
     7c2:	97 e0       	ldi	r25, 0x07	; 7
     7c4:	6a e1       	ldi	r22, 0x1A	; 26
     7c6:	71 e0       	ldi	r23, 0x01	; 1
     7c8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(eHealth.bloodPressureDataVector[i].day);
     7cc:	85 e1       	ldi	r24, 0x15	; 21
     7ce:	97 e0       	ldi	r25, 0x07	; 7
     7d0:	f7 01       	movw	r30, r14
     7d2:	62 81       	ldd	r22, Z+2	; 0x02
     7d4:	4a e0       	ldi	r20, 0x0A	; 10
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN5Print5printEhi>
    Serial.print(F(" of "));
     7dc:	85 e1       	ldi	r24, 0x15	; 21
     7de:	97 e0       	ldi	r25, 0x07	; 7
     7e0:	65 e1       	ldi	r22, 0x15	; 21
     7e2:	71 e0       	ldi	r23, 0x01	; 1
     7e4:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(eHealth.numberToMonth(eHealth.bloodPressureDataVector[i].month));
     7e8:	f7 01       	movw	r30, r14
     7ea:	41 81       	ldd	r20, Z+1	; 0x01
     7ec:	c8 01       	movw	r24, r16
     7ee:	62 e3       	ldi	r22, 0x32	; 50
     7f0:	72 e0       	ldi	r23, 0x02	; 2
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN12eHealthClass13numberToMonthEi>
     7f8:	85 e1       	ldi	r24, 0x15	; 21
     7fa:	97 e0       	ldi	r25, 0x07	; 7
     7fc:	b8 01       	movw	r22, r16
     7fe:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN5Print5printERK6String>
     802:	c8 01       	movw	r24, r16
     804:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN6StringD1Ev>
    Serial.print(F(" of "));
     808:	85 e1       	ldi	r24, 0x15	; 21
     80a:	97 e0       	ldi	r25, 0x07	; 7
     80c:	60 e1       	ldi	r22, 0x10	; 16
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(2000 + eHealth.bloodPressureDataVector[i].year);
     814:	f7 01       	movw	r30, r14
     816:	60 81       	ld	r22, Z
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	60 53       	subi	r22, 0x30	; 48
     81c:	78 4f       	sbci	r23, 0xF8	; 248
     81e:	85 e1       	ldi	r24, 0x15	; 21
     820:	97 e0       	ldi	r25, 0x07	; 7
     822:	4a e0       	ldi	r20, 0x0A	; 10
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN5Print5printEii>
    Serial.print(F(" at "));
     82a:	85 e1       	ldi	r24, 0x15	; 21
     82c:	97 e0       	ldi	r25, 0x07	; 7
     82e:	6b e0       	ldi	r22, 0x0B	; 11
     830:	71 e0       	ldi	r23, 0x01	; 1
     832:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>

    if (eHealth.bloodPressureDataVector[i].hour < 10) {
     836:	f7 01       	movw	r30, r14
     838:	83 81       	ldd	r24, Z+3	; 0x03
     83a:	8a 30       	cpi	r24, 0x0A	; 10
     83c:	40 f4       	brcc	.+16     	; 0x84e <loop+0x146>
      Serial.print(0); // Only for best representation.
     83e:	85 e1       	ldi	r24, 0x15	; 21
     840:	97 e0       	ldi	r25, 0x07	; 7
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	4a e0       	ldi	r20, 0x0A	; 10
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN5Print5printEii>
    }

    Serial.print(eHealth.bloodPressureDataVector[i].hour);
     84e:	85 e1       	ldi	r24, 0x15	; 21
     850:	97 e0       	ldi	r25, 0x07	; 7
     852:	f7 01       	movw	r30, r14
     854:	63 81       	ldd	r22, Z+3	; 0x03
     856:	4a e0       	ldi	r20, 0x0A	; 10
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN5Print5printEhi>
    Serial.print(F(":"));
     85e:	85 e1       	ldi	r24, 0x15	; 21
     860:	97 e0       	ldi	r25, 0x07	; 7
     862:	69 e0       	ldi	r22, 0x09	; 9
     864:	71 e0       	ldi	r23, 0x01	; 1
     866:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>

    if (eHealth.bloodPressureDataVector[i].minutes < 10) {
     86a:	f7 01       	movw	r30, r14
     86c:	84 81       	ldd	r24, Z+4	; 0x04
     86e:	8a 30       	cpi	r24, 0x0A	; 10
     870:	40 f4       	brcc	.+16     	; 0x882 <loop+0x17a>
      Serial.print(0);// Only for best representation.
     872:	85 e1       	ldi	r24, 0x15	; 21
     874:	97 e0       	ldi	r25, 0x07	; 7
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	4a e0       	ldi	r20, 0x0A	; 10
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN5Print5printEii>
    }
    Serial.println(eHealth.bloodPressureDataVector[i].minutes);
     882:	85 e1       	ldi	r24, 0x15	; 21
     884:	97 e0       	ldi	r25, 0x07	; 7
     886:	f7 01       	movw	r30, r14
     888:	64 81       	ldd	r22, Z+4	; 0x04
     88a:	4a e0       	ldi	r20, 0x0A	; 10
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN5Print7printlnEhi>

    Serial.print(F("Systolic value : "));
     892:	85 e1       	ldi	r24, 0x15	; 21
     894:	97 e0       	ldi	r25, 0x07	; 7
     896:	67 ef       	ldi	r22, 0xF7	; 247
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(30+eHealth.bloodPressureDataVector[i].systolic);
     89e:	f7 01       	movw	r30, r14
     8a0:	65 81       	ldd	r22, Z+5	; 0x05
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	62 5e       	subi	r22, 0xE2	; 226
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	85 e1       	ldi	r24, 0x15	; 21
     8aa:	97 e0       	ldi	r25, 0x07	; 7
     8ac:	4a e0       	ldi	r20, 0x0A	; 10
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN5Print5printEii>
    Serial.println(F(" mmHg"));
     8b4:	85 e1       	ldi	r24, 0x15	; 21
     8b6:	97 e0       	ldi	r25, 0x07	; 7
     8b8:	61 ef       	ldi	r22, 0xF1	; 241
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN5Print7printlnEPK19__FlashStringHelper>

    Serial.print(F("Diastolic value : "));
     8c0:	85 e1       	ldi	r24, 0x15	; 21
     8c2:	97 e0       	ldi	r25, 0x07	; 7
     8c4:	6e ed       	ldi	r22, 0xDE	; 222
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(eHealth.bloodPressureDataVector[i].diastolic);
     8cc:	85 e1       	ldi	r24, 0x15	; 21
     8ce:	97 e0       	ldi	r25, 0x07	; 7
     8d0:	f7 01       	movw	r30, r14
     8d2:	66 81       	ldd	r22, Z+6	; 0x06
     8d4:	4a e0       	ldi	r20, 0x0A	; 10
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN5Print5printEhi>
    Serial.println(F(" mmHg"));
     8dc:	85 e1       	ldi	r24, 0x15	; 21
     8de:	97 e0       	ldi	r25, 0x07	; 7
     8e0:	68 ed       	ldi	r22, 0xD8	; 216
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN5Print7printlnEPK19__FlashStringHelper>

    Serial.print(F("Pulse value : "));
     8e8:	85 e1       	ldi	r24, 0x15	; 21
     8ea:	97 e0       	ldi	r25, 0x07	; 7
     8ec:	69 ec       	ldi	r22, 0xC9	; 201
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(eHealth.bloodPressureDataVector[i].pulse);
     8f4:	85 e1       	ldi	r24, 0x15	; 21
     8f6:	97 e0       	ldi	r25, 0x07	; 7
     8f8:	f7 01       	movw	r30, r14
     8fa:	67 81       	ldd	r22, Z+7	; 0x07
     8fc:	4a e0       	ldi	r20, 0x0A	; 10
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN5Print5printEhi>
    Serial.println(F(" bpm"));
     904:	85 e1       	ldi	r24, 0x15	; 21
     906:	97 e0       	ldi	r25, 0x07	; 7
     908:	64 ec       	ldi	r22, 0xC4	; 196
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN5Print7printlnEPK19__FlashStringHelper>
     910:	88 e0       	ldi	r24, 0x08	; 8
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	e8 0e       	add	r14, r24
     916:	f9 1e       	adc	r15, r25
  Serial.print(F("Number of measures : "));
  Serial.println(numberOfData, DEC);
  delay(200);


  for (int i = 0; i<numberOfData; i++) {
     918:	ca 14       	cp	r12, r10
     91a:	db 04       	cpc	r13, r11
     91c:	0c f4       	brge	.+2      	; 0x920 <__stack+0x21>
     91e:	3a cf       	rjmp	.-396    	; 0x794 <loop+0x8c>
    Serial.print(F("Pulse value : "));
    Serial.print(eHealth.bloodPressureDataVector[i].pulse);
    Serial.println(F(" bpm"));
  }

  delay(20000);
     920:	60 e2       	ldi	r22, 0x20	; 32
     922:	7e e4       	ldi	r23, 0x4E	; 78
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 95 09 	call	0x132a	; 0x132a <delay>
}
     92c:	27 96       	adiw	r28, 0x07	; 7
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	cf 91       	pop	r28
     93a:	df 91       	pop	r29
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	af 90       	pop	r10
     94c:	08 95       	ret

0000094e <setup>:

#include "eHealth.h"
//#include <eHealthDisplay.h>

void setup() {
   Serial.begin(19200); //115200
     94e:	85 e1       	ldi	r24, 0x15	; 21
     950:	97 e0       	ldi	r25, 0x07	; 7
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	5b e4       	ldi	r21, 0x4B	; 75
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN14HardwareSerial5beginEm>
}
     95e:	08 95       	ret

00000960 <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     960:	08 95       	ret

00000962 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
     962:	1f 92       	push	r1
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	0f 92       	push	r0
     96a:	11 24       	eor	r1, r1
     96c:	2f 93       	push	r18
     96e:	3f 93       	push	r19
     970:	4f 93       	push	r20
     972:	8f 93       	push	r24
     974:	9f 93       	push	r25
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
     97a:	80 91 c0 00 	lds	r24, 0x00C0
     97e:	82 fd       	sbrc	r24, 2
     980:	1c c0       	rjmp	.+56     	; 0x9ba <__vector_18+0x58>
      unsigned char c = UDR0;
     982:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     986:	20 91 0d 06 	lds	r18, 0x060D
     98a:	30 91 0e 06 	lds	r19, 0x060E

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     98e:	2f 5f       	subi	r18, 0xFF	; 255
     990:	3f 4f       	sbci	r19, 0xFF	; 255
     992:	30 70       	andi	r19, 0x00	; 0
     994:	80 91 0f 06 	lds	r24, 0x060F
     998:	90 91 10 06 	lds	r25, 0x0610
     99c:	28 17       	cp	r18, r24
     99e:	39 07       	cpc	r19, r25
     9a0:	71 f0       	breq	.+28     	; 0x9be <__vector_18+0x5c>
    buffer->buffer[buffer->head] = c;
     9a2:	e0 91 0d 06 	lds	r30, 0x060D
     9a6:	f0 91 0e 06 	lds	r31, 0x060E
     9aa:	e3 5f       	subi	r30, 0xF3	; 243
     9ac:	fa 4f       	sbci	r31, 0xFA	; 250
     9ae:	40 83       	st	Z, r20
    buffer->head = i;
     9b0:	30 93 0e 06 	sts	0x060E, r19
     9b4:	20 93 0d 06 	sts	0x060D, r18
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <__vector_18+0x5c>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
     9ba:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
     9be:	ff 91       	pop	r31
     9c0:	ef 91       	pop	r30
     9c2:	9f 91       	pop	r25
     9c4:	8f 91       	pop	r24
     9c6:	4f 91       	pop	r20
     9c8:	3f 91       	pop	r19
     9ca:	2f 91       	pop	r18
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	0f 90       	pop	r0
     9d2:	1f 90       	pop	r1
     9d4:	18 95       	reti

000009d6 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     9d6:	e0 91 21 07 	lds	r30, 0x0721
     9da:	f0 91 22 07 	lds	r31, 0x0722
     9de:	e0 50       	subi	r30, 0x00	; 0
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	81 91       	ld	r24, Z+
     9e4:	91 91       	ld	r25, Z+
     9e6:	20 81       	ld	r18, Z
     9e8:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     9ea:	80 50       	subi	r24, 0x00	; 0
     9ec:	9f 4f       	sbci	r25, 0xFF	; 255
     9ee:	82 17       	cp	r24, r18
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <_Z14serialEventRunv+0x20>
     9f2:	0e 94 b0 04 	call	0x960	; 0x960 <_Z11serialEventv>
     9f6:	08 95       	ret

000009f8 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     9f8:	1f 92       	push	r1
     9fa:	0f 92       	push	r0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	2f 93       	push	r18
     a04:	3f 93       	push	r19
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	ef 93       	push	r30
     a0c:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     a0e:	20 91 11 07 	lds	r18, 0x0711
     a12:	30 91 12 07 	lds	r19, 0x0712
     a16:	80 91 13 07 	lds	r24, 0x0713
     a1a:	90 91 14 07 	lds	r25, 0x0714
     a1e:	28 17       	cp	r18, r24
     a20:	39 07       	cpc	r19, r25
     a22:	31 f4       	brne	.+12     	; 0xa30 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     a24:	80 91 c1 00 	lds	r24, 0x00C1
     a28:	8f 7d       	andi	r24, 0xDF	; 223
     a2a:	80 93 c1 00 	sts	0x00C1, r24
     a2e:	13 c0       	rjmp	.+38     	; 0xa56 <__vector_19+0x5e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     a30:	e0 91 13 07 	lds	r30, 0x0713
     a34:	f0 91 14 07 	lds	r31, 0x0714
     a38:	ef 5e       	subi	r30, 0xEF	; 239
     a3a:	f9 4f       	sbci	r31, 0xF9	; 249
     a3c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     a3e:	80 91 13 07 	lds	r24, 0x0713
     a42:	90 91 14 07 	lds	r25, 0x0714
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	90 70       	andi	r25, 0x00	; 0
     a4a:	90 93 14 07 	sts	0x0714, r25
     a4e:	80 93 13 07 	sts	0x0713, r24
	
  #if defined(UDR0)
    UDR0 = c;
     a52:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	1f 90       	pop	r1
     a6a:	18 95       	reti

00000a6c <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     a6c:	af 92       	push	r10
     a6e:	bf 92       	push	r11
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	ec 01       	movw	r28, r24
     a80:	7a 01       	movw	r14, r20
     a82:	8b 01       	movw	r16, r22
     a84:	dd 24       	eor	r13, r13
     a86:	40 30       	cpi	r20, 0x00	; 0
     a88:	81 ee       	ldi	r24, 0xE1	; 225
     a8a:	58 07       	cpc	r21, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	68 07       	cpc	r22, r24
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	78 07       	cpc	r23, r24
     a94:	11 f0       	breq	.+4      	; 0xa9a <_ZN14HardwareSerial5beginEm+0x2e>
     a96:	dd 24       	eor	r13, r13
     a98:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	a9 2e       	mov	r10, r25
     a9e:	b1 2c       	mov	r11, r1
     aa0:	ec 89       	ldd	r30, Y+20	; 0x14
     aa2:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     aa4:	dd 20       	and	r13, r13
     aa6:	69 f0       	breq	.+26     	; 0xac2 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
     aa8:	c5 01       	movw	r24, r10
     aaa:	08 a0       	ldd	r0, Y+32	; 0x20
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <_ZN14HardwareSerial5beginEm+0x46>
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	0a 94       	dec	r0
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <_ZN14HardwareSerial5beginEm+0x42>
     ab6:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	79 e0       	ldi	r23, 0x09	; 9
     abc:	8d e3       	ldi	r24, 0x3D	; 61
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
     ac2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ac4:	60 e8       	ldi	r22, 0x80	; 128
     ac6:	74 e8       	ldi	r23, 0x84	; 132
     ac8:	8e e1       	ldi	r24, 0x1E	; 30
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a8 01       	movw	r20, r16
     ace:	97 01       	movw	r18, r14
     ad0:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__udivmodsi4>
     ad4:	21 50       	subi	r18, 0x01	; 1
     ad6:	30 40       	sbci	r19, 0x00	; 0
     ad8:	40 40       	sbci	r20, 0x00	; 0
     ada:	50 40       	sbci	r21, 0x00	; 0
     adc:	56 95       	lsr	r21
     ade:	47 95       	ror	r20
     ae0:	37 95       	ror	r19
     ae2:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     ae4:	80 e1       	ldi	r24, 0x10	; 16
     ae6:	20 30       	cpi	r18, 0x00	; 0
     ae8:	38 07       	cpc	r19, r24
     aea:	20 f0       	brcs	.+8      	; 0xaf4 <_ZN14HardwareSerial5beginEm+0x88>
     aec:	dd 20       	and	r13, r13
     aee:	11 f0       	breq	.+4      	; 0xaf4 <_ZN14HardwareSerial5beginEm+0x88>
     af0:	dd 24       	eor	r13, r13
     af2:	d6 cf       	rjmp	.-84     	; 0xaa0 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     af4:	e8 89       	ldd	r30, Y+16	; 0x10
     af6:	f9 89       	ldd	r31, Y+17	; 0x11
     af8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     afa:	ea 89       	ldd	r30, Y+18	; 0x12
     afc:	fb 89       	ldd	r31, Y+19	; 0x13
     afe:	20 83       	st	Z, r18

  transmitting = false;
     b00:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
     b02:	ee 89       	ldd	r30, Y+22	; 0x16
     b04:	ff 89       	ldd	r31, Y+23	; 0x17
     b06:	40 81       	ld	r20, Z
     b08:	21 e0       	ldi	r18, 0x01	; 1
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	c9 01       	movw	r24, r18
     b0e:	0c 8c       	ldd	r0, Y+28	; 0x1c
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <_ZN14HardwareSerial5beginEm+0xaa>
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	0a 94       	dec	r0
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <_ZN14HardwareSerial5beginEm+0xa6>
     b1a:	48 2b       	or	r20, r24
     b1c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     b1e:	ee 89       	ldd	r30, Y+22	; 0x16
     b20:	ff 89       	ldd	r31, Y+23	; 0x17
     b22:	40 81       	ld	r20, Z
     b24:	c9 01       	movw	r24, r18
     b26:	0d 8c       	ldd	r0, Y+29	; 0x1d
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <_ZN14HardwareSerial5beginEm+0xc2>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	0a 94       	dec	r0
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <_ZN14HardwareSerial5beginEm+0xbe>
     b32:	48 2b       	or	r20, r24
     b34:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     b36:	ee 89       	ldd	r30, Y+22	; 0x16
     b38:	ff 89       	ldd	r31, Y+23	; 0x17
     b3a:	40 81       	ld	r20, Z
     b3c:	c9 01       	movw	r24, r18
     b3e:	0e 8c       	ldd	r0, Y+30	; 0x1e
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <_ZN14HardwareSerial5beginEm+0xda>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	0a 94       	dec	r0
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <_ZN14HardwareSerial5beginEm+0xd6>
     b4a:	48 2b       	or	r20, r24
     b4c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     b4e:	ee 89       	ldd	r30, Y+22	; 0x16
     b50:	ff 89       	ldd	r31, Y+23	; 0x17
     b52:	80 81       	ld	r24, Z
     b54:	0f 8c       	ldd	r0, Y+31	; 0x1f
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <_ZN14HardwareSerial5beginEm+0xf0>
     b58:	22 0f       	add	r18, r18
     b5a:	33 1f       	adc	r19, r19
     b5c:	0a 94       	dec	r0
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <_ZN14HardwareSerial5beginEm+0xec>
     b60:	20 95       	com	r18
     b62:	28 23       	and	r18, r24
     b64:	20 83       	st	Z, r18
}
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	df 90       	pop	r13
     b74:	bf 90       	pop	r11
     b76:	af 90       	pop	r10
     b78:	08 95       	ret

00000b7a <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     b7a:	dc 01       	movw	r26, r24
     b7c:	1c 96       	adiw	r26, 0x0c	; 12
     b7e:	ed 91       	ld	r30, X+
     b80:	fc 91       	ld	r31, X
     b82:	1d 97       	sbiw	r26, 0x0d	; 13
     b84:	e0 50       	subi	r30, 0x00	; 0
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	21 91       	ld	r18, Z+
     b8a:	31 91       	ld	r19, Z+
     b8c:	80 81       	ld	r24, Z
     b8e:	91 81       	ldd	r25, Z+1	; 0x01
     b90:	20 50       	subi	r18, 0x00	; 0
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	28 1b       	sub	r18, r24
     b96:	39 0b       	sbc	r19, r25
     b98:	30 70       	andi	r19, 0x00	; 0
}
     b9a:	c9 01       	movw	r24, r18
     b9c:	08 95       	ret

00000b9e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     b9e:	dc 01       	movw	r26, r24
     ba0:	1c 96       	adiw	r26, 0x0c	; 12
     ba2:	ed 91       	ld	r30, X+
     ba4:	fc 91       	ld	r31, X
     ba6:	1d 97       	sbiw	r26, 0x0d	; 13
     ba8:	e0 50       	subi	r30, 0x00	; 0
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	20 81       	ld	r18, Z
     bae:	31 81       	ldd	r19, Z+1	; 0x01
     bb0:	e0 50       	subi	r30, 0x00	; 0
     bb2:	f1 40       	sbci	r31, 0x01	; 1
     bb4:	df 01       	movw	r26, r30
     bb6:	ae 5f       	subi	r26, 0xFE	; 254
     bb8:	be 4f       	sbci	r27, 0xFE	; 254
     bba:	8d 91       	ld	r24, X+
     bbc:	9c 91       	ld	r25, X
     bbe:	11 97       	sbiw	r26, 0x01	; 1
     bc0:	28 17       	cp	r18, r24
     bc2:	39 07       	cpc	r19, r25
     bc4:	19 f4       	brne	.+6      	; 0xbcc <_ZN14HardwareSerial4peekEv+0x2e>
     bc6:	2f ef       	ldi	r18, 0xFF	; 255
     bc8:	3f ef       	ldi	r19, 0xFF	; 255
     bca:	07 c0       	rjmp	.+14     	; 0xbda <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     bcc:	8d 91       	ld	r24, X+
     bce:	9c 91       	ld	r25, X
     bd0:	e8 0f       	add	r30, r24
     bd2:	f9 1f       	adc	r31, r25
     bd4:	80 81       	ld	r24, Z
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     bda:	c9 01       	movw	r24, r18
     bdc:	08 95       	ret

00000bde <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     bde:	dc 01       	movw	r26, r24
     be0:	1c 96       	adiw	r26, 0x0c	; 12
     be2:	ed 91       	ld	r30, X+
     be4:	fc 91       	ld	r31, X
     be6:	1d 97       	sbiw	r26, 0x0d	; 13
     be8:	e0 50       	subi	r30, 0x00	; 0
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	20 81       	ld	r18, Z
     bee:	31 81       	ldd	r19, Z+1	; 0x01
     bf0:	e0 50       	subi	r30, 0x00	; 0
     bf2:	f1 40       	sbci	r31, 0x01	; 1
     bf4:	df 01       	movw	r26, r30
     bf6:	ae 5f       	subi	r26, 0xFE	; 254
     bf8:	be 4f       	sbci	r27, 0xFE	; 254
     bfa:	8d 91       	ld	r24, X+
     bfc:	9c 91       	ld	r25, X
     bfe:	11 97       	sbiw	r26, 0x01	; 1
     c00:	28 17       	cp	r18, r24
     c02:	39 07       	cpc	r19, r25
     c04:	19 f4       	brne	.+6      	; 0xc0c <_ZN14HardwareSerial4readEv+0x2e>
     c06:	2f ef       	ldi	r18, 0xFF	; 255
     c08:	3f ef       	ldi	r19, 0xFF	; 255
     c0a:	0f c0       	rjmp	.+30     	; 0xc2a <_ZN14HardwareSerial4readEv+0x4c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     c0c:	8d 91       	ld	r24, X+
     c0e:	9c 91       	ld	r25, X
     c10:	11 97       	sbiw	r26, 0x01	; 1
     c12:	e8 0f       	add	r30, r24
     c14:	f9 1f       	adc	r31, r25
     c16:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     c18:	8d 91       	ld	r24, X+
     c1a:	9c 91       	ld	r25, X
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	90 70       	andi	r25, 0x00	; 0
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	9c 93       	st	X, r25
     c26:	8e 93       	st	-X, r24
    return c;
     c28:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     c2a:	c9 01       	movw	r24, r18
     c2c:	08 95       	ret

00000c2e <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
     c2e:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
     c30:	91 96       	adiw	r26, 0x21	; 33
     c32:	8c 91       	ld	r24, X
     c34:	91 97       	sbiw	r26, 0x21	; 33
     c36:	88 23       	and	r24, r24
     c38:	39 f0       	breq	.+14     	; 0xc48 <_ZN14HardwareSerial5flushEv+0x1a>
     c3a:	54 96       	adiw	r26, 0x14	; 20
     c3c:	ed 91       	ld	r30, X+
     c3e:	fc 91       	ld	r31, X
     c40:	55 97       	sbiw	r26, 0x15	; 21
     c42:	80 81       	ld	r24, Z
     c44:	86 ff       	sbrs	r24, 6
     c46:	f9 cf       	rjmp	.-14     	; 0xc3a <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
     c48:	91 96       	adiw	r26, 0x21	; 33
     c4a:	1c 92       	st	X, r1
}
     c4c:	08 95       	ret

00000c4e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     c54:	ee 85       	ldd	r30, Y+14	; 0x0e
     c56:	ff 85       	ldd	r31, Y+15	; 0x0f
     c58:	e0 50       	subi	r30, 0x00	; 0
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	20 81       	ld	r18, Z
     c5e:	31 81       	ldd	r19, Z+1	; 0x01
     c60:	e0 50       	subi	r30, 0x00	; 0
     c62:	f1 40       	sbci	r31, 0x01	; 1
     c64:	2f 5f       	subi	r18, 0xFF	; 255
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     c6a:	df 01       	movw	r26, r30
     c6c:	ae 5f       	subi	r26, 0xFE	; 254
     c6e:	be 4f       	sbci	r27, 0xFE	; 254
     c70:	8d 91       	ld	r24, X+
     c72:	9c 91       	ld	r25, X
     c74:	11 97       	sbiw	r26, 0x01	; 1
     c76:	28 17       	cp	r18, r24
     c78:	39 07       	cpc	r19, r25
     c7a:	d1 f3       	breq	.-12     	; 0xc70 <_ZN14HardwareSerial5writeEh+0x22>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     c7c:	e0 50       	subi	r30, 0x00	; 0
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	e0 50       	subi	r30, 0x00	; 0
     c86:	f1 40       	sbci	r31, 0x01	; 1
     c88:	e8 0f       	add	r30, r24
     c8a:	f9 1f       	adc	r31, r25
     c8c:	60 83       	st	Z, r22
  _tx_buffer->head = i;
     c8e:	ee 85       	ldd	r30, Y+14	; 0x0e
     c90:	ff 85       	ldd	r31, Y+15	; 0x0f
     c92:	e0 50       	subi	r30, 0x00	; 0
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	31 83       	std	Z+1, r19	; 0x01
     c98:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     c9a:	ee 89       	ldd	r30, Y+22	; 0x16
     c9c:	ff 89       	ldd	r31, Y+23	; 0x17
     c9e:	20 81       	ld	r18, Z
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0f 8c       	ldd	r0, Y+31	; 0x1f
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <_ZN14HardwareSerial5writeEh+0x5e>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <_ZN14HardwareSerial5writeEh+0x5a>
     cb0:	28 2b       	or	r18, r24
     cb2:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
     cb8:	ec 89       	ldd	r30, Y+20	; 0x14
     cba:	fd 89       	ldd	r31, Y+21	; 0x15
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	80 83       	st	Z, r24
  
  return 1;
}
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ccc:	10 92 18 07 	sts	0x0718, r1
     cd0:	10 92 17 07 	sts	0x0717, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=10000;}//increase time out by ten times yht
     cd4:	80 e1       	ldi	r24, 0x10	; 16
     cd6:	97 e2       	ldi	r25, 0x27	; 39
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	80 93 19 07 	sts	0x0719, r24
     ce0:	90 93 1a 07 	sts	0x071A, r25
     ce4:	a0 93 1b 07 	sts	0x071B, r26
     ce8:	b0 93 1c 07 	sts	0x071C, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     cec:	85 e2       	ldi	r24, 0x25	; 37
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	90 93 16 07 	sts	0x0716, r25
     cf4:	80 93 15 07 	sts	0x0715, r24
{
  _rx_buffer = rx_buffer;
     cf8:	8d e0       	ldi	r24, 0x0D	; 13
     cfa:	95 e0       	ldi	r25, 0x05	; 5
     cfc:	90 93 22 07 	sts	0x0722, r25
     d00:	80 93 21 07 	sts	0x0721, r24
  _tx_buffer = tx_buffer;
     d04:	81 e1       	ldi	r24, 0x11	; 17
     d06:	96 e0       	ldi	r25, 0x06	; 6
     d08:	90 93 24 07 	sts	0x0724, r25
     d0c:	80 93 23 07 	sts	0x0723, r24
  _ubrrh = ubrrh;
     d10:	85 ec       	ldi	r24, 0xC5	; 197
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	90 93 26 07 	sts	0x0726, r25
     d18:	80 93 25 07 	sts	0x0725, r24
  _ubrrl = ubrrl;
     d1c:	84 ec       	ldi	r24, 0xC4	; 196
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	90 93 28 07 	sts	0x0728, r25
     d24:	80 93 27 07 	sts	0x0727, r24
  _ucsra = ucsra;
     d28:	80 ec       	ldi	r24, 0xC0	; 192
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	90 93 2a 07 	sts	0x072A, r25
     d30:	80 93 29 07 	sts	0x0729, r24
  _ucsrb = ucsrb;
     d34:	81 ec       	ldi	r24, 0xC1	; 193
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	90 93 2c 07 	sts	0x072C, r25
     d3c:	80 93 2b 07 	sts	0x072B, r24
  _ucsrc = ucsrc;
     d40:	82 ec       	ldi	r24, 0xC2	; 194
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	90 93 2e 07 	sts	0x072E, r25
     d48:	80 93 2d 07 	sts	0x072D, r24
  _udr = udr;
     d4c:	86 ec       	ldi	r24, 0xC6	; 198
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	90 93 30 07 	sts	0x0730, r25
     d54:	80 93 2f 07 	sts	0x072F, r24
  _rxen = rxen;
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	80 93 31 07 	sts	0x0731, r24
  _txen = txen;
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	80 93 32 07 	sts	0x0732, r24
  _rxcie = rxcie;
     d64:	87 e0       	ldi	r24, 0x07	; 7
     d66:	80 93 33 07 	sts	0x0733, r24
  _udrie = udrie;
     d6a:	85 e0       	ldi	r24, 0x05	; 5
     d6c:	80 93 34 07 	sts	0x0734, r24
  _u2x = u2x;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 35 07 	sts	0x0735, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     d76:	08 95       	ret

00000d78 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	7c 01       	movw	r14, r24
     d8a:	6b 01       	movw	r12, r22
     d8c:	8a 01       	movw	r16, r20
     d8e:	c0 e0       	ldi	r28, 0x00	; 0
     d90:	d0 e0       	ldi	r29, 0x00	; 0
     d92:	0f c0       	rjmp	.+30     	; 0xdb2 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
     d94:	d6 01       	movw	r26, r12
     d96:	6d 91       	ld	r22, X+
     d98:	6d 01       	movw	r12, r26
     d9a:	d7 01       	movw	r26, r14
     d9c:	ed 91       	ld	r30, X+
     d9e:	fc 91       	ld	r31, X
     da0:	01 90       	ld	r0, Z+
     da2:	f0 81       	ld	r31, Z
     da4:	e0 2d       	mov	r30, r0
     da6:	c7 01       	movw	r24, r14
     da8:	09 95       	icall
     daa:	c8 0f       	add	r28, r24
     dac:	d9 1f       	adc	r29, r25
     dae:	01 50       	subi	r16, 0x01	; 1
     db0:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     db2:	01 15       	cp	r16, r1
     db4:	11 05       	cpc	r17, r1
     db6:	71 f7       	brne	.-36     	; 0xd94 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     db8:	ce 01       	movw	r24, r28
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	08 95       	ret

00000dcc <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
     dda:	8b 01       	movw	r16, r22
     ddc:	c0 e0       	ldi	r28, 0x00	; 0
     dde:	d0 e0       	ldi	r29, 0x00	; 0
     de0:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     de2:	0f 5f       	subi	r16, 0xFF	; 255
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	64 91       	lpm	r22, Z+
    if (c == 0) break;
     de8:	66 23       	and	r22, r22
     dea:	59 f0       	breq	.+22     	; 0xe02 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
     dec:	d7 01       	movw	r26, r14
     dee:	ed 91       	ld	r30, X+
     df0:	fc 91       	ld	r31, X
     df2:	01 90       	ld	r0, Z+
     df4:	f0 81       	ld	r31, Z
     df6:	e0 2d       	mov	r30, r0
     df8:	c7 01       	movw	r24, r14
     dfa:	09 95       	icall
     dfc:	c8 0f       	add	r28, r24
     dfe:	d9 1f       	adc	r29, r25
     e00:	ef cf       	rjmp	.-34     	; 0xde0 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
     e02:	ce 01       	movw	r24, r28
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	08 95       	ret

00000e12 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     e1c:	dc 01       	movw	r26, r24
     e1e:	ed 91       	ld	r30, X+
     e20:	fc 91       	ld	r31, X
     e22:	01 90       	ld	r0, Z+
     e24:	f0 81       	ld	r31, Z
     e26:	e0 2d       	mov	r30, r0
     e28:	6d e0       	ldi	r22, 0x0D	; 13
     e2a:	09 95       	icall
     e2c:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
     e2e:	d8 01       	movw	r26, r16
     e30:	ed 91       	ld	r30, X+
     e32:	fc 91       	ld	r31, X
     e34:	01 90       	ld	r0, Z+
     e36:	f0 81       	ld	r31, Z
     e38:	e0 2d       	mov	r30, r0
     e3a:	c8 01       	movw	r24, r16
     e3c:	6a e0       	ldi	r22, 0x0A	; 10
     e3e:	09 95       	icall
     e40:	9c 01       	movw	r18, r24
     e42:	2e 0d       	add	r18, r14
     e44:	3f 1d       	adc	r19, r15
     e46:	c9 01       	movw	r24, r18
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	08 95       	ret

00000e52 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
     e5c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPK19__FlashStringHelper>
     e60:	8c 01       	movw	r16, r24
  n += println();
     e62:	c7 01       	movw	r24, r14
     e64:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN5Print7printlnEv>
     e68:	9c 01       	movw	r18, r24
     e6a:	20 0f       	add	r18, r16
     e6c:	31 1f       	adc	r19, r17
  return n;
}
     e6e:	c9 01       	movw	r24, r18
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	08 95       	ret

00000e7a <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
     e80:	61 15       	cp	r22, r1
     e82:	71 05       	cpc	r23, r1
     e84:	19 f4       	brne	.+6      	; 0xe8c <_ZN5Print5writeEPKc+0x12>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	0f c0       	rjmp	.+30     	; 0xeaa <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
     e8c:	db 01       	movw	r26, r22
     e8e:	0d 90       	ld	r0, X+
     e90:	00 20       	and	r0, r0
     e92:	e9 f7       	brne	.-6      	; 0xe8e <_ZN5Print5writeEPKc+0x14>
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	a6 1b       	sub	r26, r22
     e98:	b7 0b       	sbc	r27, r23
     e9a:	e8 81       	ld	r30, Y
     e9c:	f9 81       	ldd	r31, Y+1	; 0x01
     e9e:	02 80       	ldd	r0, Z+2	; 0x02
     ea0:	f3 81       	ldd	r31, Z+3	; 0x03
     ea2:	e0 2d       	mov	r30, r0
     ea4:	ad 01       	movw	r20, r26
     ea6:	09 95       	icall
     ea8:	9c 01       	movw	r18, r24
    }
     eaa:	c9 01       	movw	r24, r18
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     eb2:	4f 92       	push	r4
     eb4:	5f 92       	push	r5
     eb6:	7f 92       	push	r7
     eb8:	8f 92       	push	r8
     eba:	9f 92       	push	r9
     ebc:	af 92       	push	r10
     ebe:	bf 92       	push	r11
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	a1 97       	sbiw	r28, 0x21	; 33
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	2c 01       	movw	r4, r24
     ee2:	74 2e       	mov	r7, r20
     ee4:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     ee6:	22 30       	cpi	r18, 0x02	; 2
     ee8:	08 f4       	brcc	.+2      	; 0xeec <_ZN5Print11printNumberEmh+0x3a>
     eea:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     eec:	19 a2       	std	Y+33, r1	; 0x21
     eee:	31 e2       	ldi	r19, 0x21	; 33
     ef0:	c3 2e       	mov	r12, r19
     ef2:	d1 2c       	mov	r13, r1
     ef4:	cc 0e       	add	r12, r28
     ef6:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     ef8:	82 2e       	mov	r8, r18
     efa:	99 24       	eor	r9, r9
     efc:	aa 24       	eor	r10, r10
     efe:	bb 24       	eor	r11, r11
     f00:	67 2d       	mov	r22, r7
     f02:	75 2f       	mov	r23, r21
     f04:	a5 01       	movw	r20, r10
     f06:	94 01       	movw	r18, r8
     f08:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__udivmodsi4>
     f0c:	79 01       	movw	r14, r18
     f0e:	8a 01       	movw	r16, r20
    char c = m - base * n;
     f10:	c8 01       	movw	r24, r16
     f12:	b7 01       	movw	r22, r14
     f14:	a5 01       	movw	r20, r10
     f16:	94 01       	movw	r18, r8
     f18:	0e 94 49 0c 	call	0x1892	; 0x1892 <__mulsi3>
     f1c:	47 2d       	mov	r20, r7
     f1e:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     f20:	08 94       	sec
     f22:	c1 08       	sbc	r12, r1
     f24:	d1 08       	sbc	r13, r1
     f26:	4a 30       	cpi	r20, 0x0A	; 10
     f28:	14 f4       	brge	.+4      	; 0xf2e <_ZN5Print11printNumberEmh+0x7c>
     f2a:	40 5d       	subi	r20, 0xD0	; 208
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <_ZN5Print11printNumberEmh+0x7e>
     f2e:	49 5c       	subi	r20, 0xC9	; 201
     f30:	f6 01       	movw	r30, r12
     f32:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     f34:	e1 14       	cp	r14, r1
     f36:	f1 04       	cpc	r15, r1
     f38:	01 05       	cpc	r16, r1
     f3a:	11 05       	cpc	r17, r1
     f3c:	21 f0       	breq	.+8      	; 0xf46 <_ZN5Print11printNumberEmh+0x94>
     f3e:	7e 2c       	mov	r7, r14
     f40:	5f 2d       	mov	r21, r15
     f42:	c8 01       	movw	r24, r16
     f44:	dd cf       	rjmp	.-70     	; 0xf00 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     f46:	c2 01       	movw	r24, r4
     f48:	b6 01       	movw	r22, r12
     f4a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN5Print5writeEPKc>
}
     f4e:	a1 96       	adiw	r28, 0x21	; 33
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	bf 90       	pop	r11
     f6c:	af 90       	pop	r10
     f6e:	9f 90       	pop	r9
     f70:	8f 90       	pop	r8
     f72:	7f 90       	pop	r7
     f74:	5f 90       	pop	r5
     f76:	4f 90       	pop	r4
     f78:	08 95       	ret

00000f7a <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
     f7a:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	41 f4       	brne	.+16     	; 0xf92 <_ZN5Print5printEmi+0x18>
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	01 90       	ld	r0, Z+
     f88:	f0 81       	ld	r31, Z
     f8a:	e0 2d       	mov	r30, r0
     f8c:	64 2f       	mov	r22, r20
     f8e:	09 95       	icall
     f90:	08 95       	ret
  else return printNumber(n, base);
     f92:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN5Print11printNumberEmh>
}
     f96:	08 95       	ret

00000f98 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
     fa2:	e6 2e       	mov	r14, r22
     fa4:	ff 24       	eor	r15, r15
     fa6:	00 e0       	ldi	r16, 0x00	; 0
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	b8 01       	movw	r22, r16
     fac:	a7 01       	movw	r20, r14
     fae:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN5Print5printEmi>
}
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	08 95       	ret

00000fbc <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	6c 01       	movw	r12, r24
     fca:	e6 2e       	mov	r14, r22
     fcc:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     fce:	ff 24       	eor	r15, r15
     fd0:	00 e0       	ldi	r16, 0x00	; 0
     fd2:	10 e0       	ldi	r17, 0x00	; 0
     fd4:	b8 01       	movw	r22, r16
     fd6:	a7 01       	movw	r20, r14
     fd8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN5Print5printEmi>
     fdc:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
     fde:	c6 01       	movw	r24, r12
     fe0:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN5Print7printlnEv>
     fe4:	08 0f       	add	r16, r24
     fe6:	19 1f       	adc	r17, r25
  return n;
}
     fe8:	c8 01       	movw	r24, r16
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	08 95       	ret

00000ff8 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	ec 01       	movw	r28, r24
    100a:	6a 01       	movw	r12, r20
    100c:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    100e:	21 15       	cp	r18, r1
    1010:	31 05       	cpc	r19, r1
    1012:	41 f4       	brne	.+16     	; 0x1024 <_ZN5Print5printEli+0x2c>
    return write(n);
    1014:	e8 81       	ld	r30, Y
    1016:	f9 81       	ldd	r31, Y+1	; 0x01
    1018:	01 90       	ld	r0, Z+
    101a:	f0 81       	ld	r31, Z
    101c:	e0 2d       	mov	r30, r0
    101e:	64 2f       	mov	r22, r20
    1020:	09 95       	icall
    1022:	1f c0       	rjmp	.+62     	; 0x1062 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    1024:	2a 30       	cpi	r18, 0x0A	; 10
    1026:	31 05       	cpc	r19, r1
    1028:	d1 f4       	brne	.+52     	; 0x105e <_ZN5Print5printEli+0x66>
    if (n < 0) {
    102a:	77 ff       	sbrs	r23, 7
    102c:	17 c0       	rjmp	.+46     	; 0x105c <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    102e:	e8 81       	ld	r30, Y
    1030:	f9 81       	ldd	r31, Y+1	; 0x01
    1032:	01 90       	ld	r0, Z+
    1034:	f0 81       	ld	r31, Z
    1036:	e0 2d       	mov	r30, r0
    1038:	6d e2       	ldi	r22, 0x2D	; 45
    103a:	09 95       	icall
    103c:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    103e:	44 27       	eor	r20, r20
    1040:	55 27       	eor	r21, r21
    1042:	ba 01       	movw	r22, r20
    1044:	4c 19       	sub	r20, r12
    1046:	5d 09       	sbc	r21, r13
    1048:	6e 09       	sbc	r22, r14
    104a:	7f 09       	sbc	r23, r15
    104c:	ce 01       	movw	r24, r28
    104e:	2a e0       	ldi	r18, 0x0A	; 10
    1050:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN5Print11printNumberEmh>
    1054:	98 01       	movw	r18, r16
    1056:	28 0f       	add	r18, r24
    1058:	39 1f       	adc	r19, r25
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    105c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    105e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN5Print11printNumberEmh>
    1062:	9c 01       	movw	r18, r24
  }
}
    1064:	c9 01       	movw	r24, r18
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	08 95       	ret

00001078 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	7b 01       	movw	r14, r22
    1082:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    1084:	00 27       	eor	r16, r16
    1086:	f7 fc       	sbrc	r15, 7
    1088:	00 95       	com	r16
    108a:	10 2f       	mov	r17, r16
    108c:	b8 01       	movw	r22, r16
    108e:	a7 01       	movw	r20, r14
    1090:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN5Print5printEli>
}
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	08 95       	ret

0000109e <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	6c 01       	movw	r12, r24
    10ac:	7b 01       	movw	r14, r22
    10ae:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    10b0:	00 27       	eor	r16, r16
    10b2:	f7 fc       	sbrc	r15, 7
    10b4:	00 95       	com	r16
    10b6:	10 2f       	mov	r17, r16
    10b8:	b8 01       	movw	r22, r16
    10ba:	a7 01       	movw	r20, r14
    10bc:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN5Print5printEli>
    10c0:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    10c2:	c6 01       	movw	r24, r12
    10c4:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN5Print7printlnEv>
    10c8:	08 0f       	add	r16, r24
    10ca:	19 1f       	adc	r17, r25
  return n;
}
    10cc:	c8 01       	movw	r24, r16
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	08 95       	ret

000010dc <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    10dc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN5Print5writeEPKc>
}
    10e0:	08 95       	ret

000010e2 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    10e2:	af 92       	push	r10
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	5c 01       	movw	r10, r24
    10f8:	6b 01       	movw	r12, r22
    10fa:	ee 24       	eor	r14, r14
    10fc:	ff 24       	eor	r15, r15
    10fe:	c0 e0       	ldi	r28, 0x00	; 0
    1100:	d0 e0       	ldi	r29, 0x00	; 0
    1102:	10 c0       	rjmp	.+32     	; 0x1124 <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    1104:	d5 01       	movw	r26, r10
    1106:	ed 91       	ld	r30, X+
    1108:	fc 91       	ld	r31, X
    110a:	00 81       	ld	r16, Z
    110c:	11 81       	ldd	r17, Z+1	; 0x01
    110e:	c6 01       	movw	r24, r12
    1110:	be 01       	movw	r22, r28
    1112:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZNK6StringixEj>
    1116:	68 2f       	mov	r22, r24
    1118:	c5 01       	movw	r24, r10
    111a:	f8 01       	movw	r30, r16
    111c:	09 95       	icall
    111e:	e8 0e       	add	r14, r24
    1120:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    1122:	21 96       	adiw	r28, 0x01	; 1
    1124:	f6 01       	movw	r30, r12
    1126:	84 81       	ldd	r24, Z+4	; 0x04
    1128:	95 81       	ldd	r25, Z+5	; 0x05
    112a:	c8 17       	cp	r28, r24
    112c:	d9 07       	cpc	r29, r25
    112e:	50 f3       	brcs	.-44     	; 0x1104 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    1130:	c7 01       	movw	r24, r14
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	cf 90       	pop	r12
    1142:	bf 90       	pop	r11
    1144:	af 90       	pop	r10
    1146:	08 95       	ret

00001148 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    1148:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    114a:	84 81       	ldd	r24, Z+4	; 0x04
    114c:	95 81       	ldd	r25, Z+5	; 0x05
    114e:	68 17       	cp	r22, r24
    1150:	79 07       	cpc	r23, r25
    1152:	48 f4       	brcc	.+18     	; 0x1166 <_ZNK6StringixEj+0x1e>
    1154:	01 90       	ld	r0, Z+
    1156:	f0 81       	ld	r31, Z
    1158:	e0 2d       	mov	r30, r0
    115a:	30 97       	sbiw	r30, 0x00	; 0
    115c:	21 f0       	breq	.+8      	; 0x1166 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    115e:	e6 0f       	add	r30, r22
    1160:	f7 1f       	adc	r31, r23
    1162:	80 81       	ld	r24, Z
    1164:	08 95       	ret
    1166:	80 e0       	ldi	r24, 0x00	; 0
}
    1168:	08 95       	ret

0000116a <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1176:	6f 5f       	subi	r22, 0xFF	; 255
    1178:	7f 4f       	sbci	r23, 0xFF	; 255
    117a:	88 81       	ld	r24, Y
    117c:	99 81       	ldd	r25, Y+1	; 0x01
    117e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <realloc>
	if (newbuffer) {
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	11 f4       	brne	.+4      	; 0x118a <_ZN6String12changeBufferEj+0x20>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    118a:	99 83       	std	Y+1, r25	; 0x01
    118c:	88 83       	st	Y, r24
		capacity = maxStrLen;
    118e:	1b 83       	std	Y+3, r17	; 0x03
    1190:	0a 83       	std	Y+2, r16	; 0x02
    1192:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    11a4:	88 81       	ld	r24, Y
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	89 2b       	or	r24, r25
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <_ZN6String7reserveEj+0x18>
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	9b 81       	ldd	r25, Y+3	; 0x03
    11b0:	86 17       	cp	r24, r22
    11b2:	97 07       	cpc	r25, r23
    11b4:	60 f4       	brcc	.+24     	; 0x11ce <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    11b6:	ce 01       	movw	r24, r28
    11b8:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN6String12changeBufferEj>
    11bc:	88 23       	and	r24, r24
    11be:	41 f0       	breq	.+16     	; 0x11d0 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	89 2b       	or	r24, r25
    11c6:	19 f4       	brne	.+6      	; 0x11ce <_ZN6String7reserveEj+0x30>
    11c8:	e8 81       	ld	r30, Y
    11ca:	f9 81       	ldd	r31, Y+1	; 0x01
    11cc:	10 82       	st	Z, r1
    11ce:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	08 95       	ret

000011d6 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    11dc:	88 81       	ld	r24, Y
    11de:	99 81       	ldd	r25, Y+1	; 0x01
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	11 f0       	breq	.+4      	; 0x11e8 <_ZN6String10invalidateEv+0x12>
    11e4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <free>
	buffer = NULL;
    11e8:	19 82       	std	Y+1, r1	; 0x01
    11ea:	18 82       	st	Y, r1
	capacity = len = 0;
    11ec:	1d 82       	std	Y+5, r1	; 0x05
    11ee:	1c 82       	std	Y+4, r1	; 0x04
    11f0:	1b 82       	std	Y+3, r1	; 0x03
    11f2:	1a 82       	std	Y+2, r1	; 0x02
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
    1208:	7b 01       	movw	r14, r22
    120a:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    120c:	ba 01       	movw	r22, r20
    120e:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN6String7reserveEj>
    1212:	88 23       	and	r24, r24
    1214:	21 f4       	brne	.+8      	; 0x121e <_ZN6String4copyEPKcj+0x24>
		invalidate();
    1216:	ce 01       	movw	r24, r28
    1218:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <_ZN6String10invalidateEv>
    121c:	07 c0       	rjmp	.+14     	; 0x122c <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    121e:	1d 83       	std	Y+5, r17	; 0x05
    1220:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    1222:	88 81       	ld	r24, Y
    1224:	99 81       	ldd	r25, Y+1	; 0x01
    1226:	b7 01       	movw	r22, r14
    1228:	0e 94 04 01 	call	0x208	; 0x208 <strcpy>
	return *this;
}
    122c:	ce 01       	movw	r24, r28
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	08 95       	ret

0000123c <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1242:	19 82       	std	Y+1, r1	; 0x01
    1244:	18 82       	st	Y, r1
	capacity = 0;
    1246:	1b 82       	std	Y+3, r1	; 0x03
    1248:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    124a:	1d 82       	std	Y+5, r1	; 0x05
    124c:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    124e:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    1250:	61 15       	cp	r22, r1
    1252:	71 05       	cpc	r23, r1
    1254:	51 f0       	breq	.+20     	; 0x126a <_ZN6StringC1EPKc+0x2e>
    1256:	db 01       	movw	r26, r22
    1258:	0d 90       	ld	r0, X+
    125a:	00 20       	and	r0, r0
    125c:	e9 f7       	brne	.-6      	; 0x1258 <_ZN6StringC1EPKc+0x1c>
    125e:	11 97       	sbiw	r26, 0x01	; 1
    1260:	a6 1b       	sub	r26, r22
    1262:	b7 0b       	sbc	r27, r23
    1264:	ad 01       	movw	r20, r26
    1266:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_ZN6String4copyEPKcj>
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    1270:	fc 01       	movw	r30, r24
{
	free(buffer);
    1272:	80 81       	ld	r24, Z
    1274:	91 81       	ldd	r25, Z+1	; 0x01
    1276:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <free>
}
    127a:	08 95       	ret

0000127c <main>:
#include <Arduino.h>

int main(void)
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
{
	init();
    1280:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1284:	0e 94 a7 04 	call	0x94e	; 0x94e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1288:	cb ee       	ldi	r28, 0xEB	; 235
    128a:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
    128c:	0e 94 84 03 	call	0x708	; 0x708 <loop>
		if (serialEventRun) serialEventRun();
    1290:	20 97       	sbiw	r28, 0x00	; 0
    1292:	e1 f3       	breq	.-8      	; 0x128c <main+0x10>
    1294:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z14serialEventRunv>
    1298:	f9 cf       	rjmp	.-14     	; 0x128c <main+0x10>

0000129a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    129a:	1f 92       	push	r1
    129c:	0f 92       	push	r0
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	0f 92       	push	r0
    12a2:	11 24       	eor	r1, r1
    12a4:	2f 93       	push	r18
    12a6:	3f 93       	push	r19
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25
    12ac:	af 93       	push	r26
    12ae:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    12b0:	80 91 3b 07 	lds	r24, 0x073B
    12b4:	90 91 3c 07 	lds	r25, 0x073C
    12b8:	a0 91 3d 07 	lds	r26, 0x073D
    12bc:	b0 91 3e 07 	lds	r27, 0x073E
	unsigned char f = timer0_fract;
    12c0:	30 91 3f 07 	lds	r19, 0x073F

	m += MILLIS_INC;
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	a1 1d       	adc	r26, r1
    12c8:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    12ca:	23 2f       	mov	r18, r19
    12cc:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    12ce:	2d 37       	cpi	r18, 0x7D	; 125
    12d0:	20 f0       	brcs	.+8      	; 0x12da <__vector_16+0x40>
		f -= FRACT_MAX;
    12d2:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	a1 1d       	adc	r26, r1
    12d8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    12da:	20 93 3f 07 	sts	0x073F, r18
	timer0_millis = m;
    12de:	80 93 3b 07 	sts	0x073B, r24
    12e2:	90 93 3c 07 	sts	0x073C, r25
    12e6:	a0 93 3d 07 	sts	0x073D, r26
    12ea:	b0 93 3e 07 	sts	0x073E, r27
	timer0_overflow_count++;
    12ee:	80 91 37 07 	lds	r24, 0x0737
    12f2:	90 91 38 07 	lds	r25, 0x0738
    12f6:	a0 91 39 07 	lds	r26, 0x0739
    12fa:	b0 91 3a 07 	lds	r27, 0x073A
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	a1 1d       	adc	r26, r1
    1302:	b1 1d       	adc	r27, r1
    1304:	80 93 37 07 	sts	0x0737, r24
    1308:	90 93 38 07 	sts	0x0738, r25
    130c:	a0 93 39 07 	sts	0x0739, r26
    1310:	b0 93 3a 07 	sts	0x073A, r27
}
    1314:	bf 91       	pop	r27
    1316:	af 91       	pop	r26
    1318:	9f 91       	pop	r25
    131a:	8f 91       	pop	r24
    131c:	3f 91       	pop	r19
    131e:	2f 91       	pop	r18
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    132e:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    1330:	f8 94       	cli
	m = timer0_overflow_count;
    1332:	80 91 37 07 	lds	r24, 0x0737
    1336:	90 91 38 07 	lds	r25, 0x0738
    133a:	a0 91 39 07 	lds	r26, 0x0739
    133e:	b0 91 3a 07 	lds	r27, 0x073A
#if defined(TCNT0)
	t = TCNT0;
    1342:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1344:	a8 9b       	sbis	0x15, 0	; 21
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <delay+0x28>
    1348:	6f 3f       	cpi	r22, 0xFF	; 255
    134a:	19 f0       	breq	.+6      	; 0x1352 <delay+0x28>
		m++;
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	a1 1d       	adc	r26, r1
    1350:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1352:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    1354:	ba 2f       	mov	r27, r26
    1356:	a9 2f       	mov	r26, r25
    1358:	98 2f       	mov	r25, r24
    135a:	88 27       	eor	r24, r24
    135c:	86 0f       	add	r24, r22
    135e:	91 1d       	adc	r25, r1
    1360:	a1 1d       	adc	r26, r1
    1362:	b1 1d       	adc	r27, r1
    1364:	62 e0       	ldi	r22, 0x02	; 2
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	aa 1f       	adc	r26, r26
    136c:	bb 1f       	adc	r27, r27
    136e:	6a 95       	dec	r22
    1370:	d1 f7       	brne	.-12     	; 0x1366 <delay+0x3c>
    1372:	bc 01       	movw	r22, r24
    1374:	2d c0       	rjmp	.+90     	; 0x13d0 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1376:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1378:	f8 94       	cli
	m = timer0_overflow_count;
    137a:	80 91 37 07 	lds	r24, 0x0737
    137e:	90 91 38 07 	lds	r25, 0x0738
    1382:	a0 91 39 07 	lds	r26, 0x0739
    1386:	b0 91 3a 07 	lds	r27, 0x073A
#if defined(TCNT0)
	t = TCNT0;
    138a:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    138c:	a8 9b       	sbis	0x15, 0	; 21
    138e:	05 c0       	rjmp	.+10     	; 0x139a <delay+0x70>
    1390:	ef 3f       	cpi	r30, 0xFF	; 255
    1392:	19 f0       	breq	.+6      	; 0x139a <delay+0x70>
		m++;
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	a1 1d       	adc	r26, r1
    1398:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    139a:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    139c:	ba 2f       	mov	r27, r26
    139e:	a9 2f       	mov	r26, r25
    13a0:	98 2f       	mov	r25, r24
    13a2:	88 27       	eor	r24, r24
    13a4:	8e 0f       	add	r24, r30
    13a6:	91 1d       	adc	r25, r1
    13a8:	a1 1d       	adc	r26, r1
    13aa:	b1 1d       	adc	r27, r1
    13ac:	e2 e0       	ldi	r30, 0x02	; 2
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	aa 1f       	adc	r26, r26
    13b4:	bb 1f       	adc	r27, r27
    13b6:	ea 95       	dec	r30
    13b8:	d1 f7       	brne	.-12     	; 0x13ae <delay+0x84>
    13ba:	86 1b       	sub	r24, r22
    13bc:	97 0b       	sbc	r25, r23
    13be:	88 5e       	subi	r24, 0xE8	; 232
    13c0:	93 40       	sbci	r25, 0x03	; 3
    13c2:	c8 f2       	brcs	.-78     	; 0x1376 <delay+0x4c>
			ms--;
    13c4:	21 50       	subi	r18, 0x01	; 1
    13c6:	30 40       	sbci	r19, 0x00	; 0
    13c8:	40 40       	sbci	r20, 0x00	; 0
    13ca:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    13cc:	68 51       	subi	r22, 0x18	; 24
    13ce:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    13d0:	21 15       	cp	r18, r1
    13d2:	31 05       	cpc	r19, r1
    13d4:	41 05       	cpc	r20, r1
    13d6:	51 05       	cpc	r21, r1
    13d8:	71 f6       	brne	.-100    	; 0x1376 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    13da:	08 95       	ret

000013dc <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	39 f0       	breq	.+14     	; 0x13ee <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    13e8:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <delayMicroseconds+0xe>
    13ee:	08 95       	ret

000013f0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    13f0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    13f2:	84 b5       	in	r24, 0x24	; 36
    13f4:	82 60       	ori	r24, 0x02	; 2
    13f6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    13f8:	84 b5       	in	r24, 0x24	; 36
    13fa:	81 60       	ori	r24, 0x01	; 1
    13fc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    13fe:	85 b5       	in	r24, 0x25	; 37
    1400:	82 60       	ori	r24, 0x02	; 2
    1402:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1404:	85 b5       	in	r24, 0x25	; 37
    1406:	81 60       	ori	r24, 0x01	; 1
    1408:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    140a:	ee e6       	ldi	r30, 0x6E	; 110
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1414:	e1 e8       	ldi	r30, 0x81	; 129
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    141a:	80 81       	ld	r24, Z
    141c:	82 60       	ori	r24, 0x02	; 2
    141e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1420:	80 81       	ld	r24, Z
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1426:	e0 e8       	ldi	r30, 0x80	; 128
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1430:	e1 eb       	ldi	r30, 0xB1	; 177
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	84 60       	ori	r24, 0x04	; 4
    1438:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    143a:	e0 eb       	ldi	r30, 0xB0	; 176
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	81 60       	ori	r24, 0x01	; 1
    1442:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1444:	ea e7       	ldi	r30, 0x7A	; 122
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	84 60       	ori	r24, 0x04	; 4
    144c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    144e:	80 81       	ld	r24, Z
    1450:	82 60       	ori	r24, 0x02	; 2
    1452:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1454:	80 81       	ld	r24, Z
    1456:	81 60       	ori	r24, 0x01	; 1
    1458:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    145a:	80 81       	ld	r24, Z
    145c:	80 68       	ori	r24, 0x80	; 128
    145e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1460:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1464:	08 95       	ret

00001466 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	bc 01       	movw	r22, r24
    1470:	82 30       	cpi	r24, 0x02	; 2
    1472:	91 05       	cpc	r25, r1
    1474:	10 f4       	brcc	.+4      	; 0x147a <malloc+0x14>
    1476:	62 e0       	ldi	r22, 0x02	; 2
    1478:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    147a:	e0 91 42 07 	lds	r30, 0x0742
    147e:	f0 91 43 07 	lds	r31, 0x0743
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	a0 e0       	ldi	r26, 0x00	; 0
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	24 c0       	rjmp	.+72     	; 0x14d4 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	86 17       	cp	r24, r22
    1492:	97 07       	cpc	r25, r23
    1494:	d0 f0       	brcs	.+52     	; 0x14ca <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    1496:	86 17       	cp	r24, r22
    1498:	97 07       	cpc	r25, r23
    149a:	71 f4       	brne	.+28     	; 0x14b8 <malloc+0x52>
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    14a0:	10 97       	sbiw	r26, 0x00	; 0
    14a2:	29 f0       	breq	.+10     	; 0x14ae <malloc+0x48>
				fp2->nx = fp1->nx;
    14a4:	13 96       	adiw	r26, 0x03	; 3
    14a6:	9c 93       	st	X, r25
    14a8:	8e 93       	st	-X, r24
    14aa:	12 97       	sbiw	r26, 0x02	; 2
    14ac:	2c c0       	rjmp	.+88     	; 0x1506 <malloc+0xa0>
			else
				__flp = fp1->nx;
    14ae:	90 93 43 07 	sts	0x0743, r25
    14b2:	80 93 42 07 	sts	0x0742, r24
    14b6:	27 c0       	rjmp	.+78     	; 0x1506 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    14b8:	41 15       	cp	r20, r1
    14ba:	51 05       	cpc	r21, r1
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <malloc+0x5e>
    14be:	84 17       	cp	r24, r20
    14c0:	95 07       	cpc	r25, r21
    14c2:	18 f4       	brcc	.+6      	; 0x14ca <malloc+0x64>
    14c4:	8d 01       	movw	r16, r26
    14c6:	ac 01       	movw	r20, r24
    14c8:	ef 01       	movw	r28, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    14ca:	df 01       	movw	r26, r30
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	93 81       	ldd	r25, Z+3	; 0x03
    14d0:	9c 01       	movw	r18, r24
    14d2:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    14d4:	30 97       	sbiw	r30, 0x00	; 0
    14d6:	d1 f6       	brne	.-76     	; 0x148c <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    14d8:	41 15       	cp	r20, r1
    14da:	51 05       	cpc	r21, r1
    14dc:	f9 f0       	breq	.+62     	; 0x151c <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    14de:	ca 01       	movw	r24, r20
    14e0:	86 1b       	sub	r24, r22
    14e2:	97 0b       	sbc	r25, r23
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	91 05       	cpc	r25, r1
    14e8:	80 f4       	brcc	.+32     	; 0x150a <malloc+0xa4>
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    14ee:	01 15       	cp	r16, r1
    14f0:	11 05       	cpc	r17, r1
    14f2:	21 f0       	breq	.+8      	; 0x14fc <malloc+0x96>
				sfp2->nx = sfp1->nx;
    14f4:	f8 01       	movw	r30, r16
    14f6:	93 83       	std	Z+3, r25	; 0x03
    14f8:	82 83       	std	Z+2, r24	; 0x02
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    14fc:	90 93 43 07 	sts	0x0743, r25
    1500:	80 93 42 07 	sts	0x0742, r24
			return &(sfp1->nx);
    1504:	fe 01       	movw	r30, r28
    1506:	32 96       	adiw	r30, 0x02	; 2
    1508:	45 c0       	rjmp	.+138    	; 0x1594 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    150a:	fe 01       	movw	r30, r28
    150c:	e8 0f       	add	r30, r24
    150e:	f9 1f       	adc	r31, r25
    1510:	61 93       	st	Z+, r22
    1512:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    1514:	02 97       	sbiw	r24, 0x02	; 2
    1516:	99 83       	std	Y+1, r25	; 0x01
    1518:	88 83       	st	Y, r24
    151a:	3c c0       	rjmp	.+120    	; 0x1594 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    151c:	80 91 40 07 	lds	r24, 0x0740
    1520:	90 91 41 07 	lds	r25, 0x0741
    1524:	89 2b       	or	r24, r25
    1526:	41 f4       	brne	.+16     	; 0x1538 <malloc+0xd2>
		__brkval = __malloc_heap_start;
    1528:	80 91 1d 02 	lds	r24, 0x021D
    152c:	90 91 1e 02 	lds	r25, 0x021E
    1530:	90 93 41 07 	sts	0x0741, r25
    1534:	80 93 40 07 	sts	0x0740, r24
	cp = __malloc_heap_end;
    1538:	40 91 1f 02 	lds	r20, 0x021F
    153c:	50 91 20 02 	lds	r21, 0x0220
	if (cp == 0)
    1540:	41 15       	cp	r20, r1
    1542:	51 05       	cpc	r21, r1
    1544:	41 f4       	brne	.+16     	; 0x1556 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    1546:	4d b7       	in	r20, 0x3d	; 61
    1548:	5e b7       	in	r21, 0x3e	; 62
    154a:	80 91 1b 02 	lds	r24, 0x021B
    154e:	90 91 1c 02 	lds	r25, 0x021C
    1552:	48 1b       	sub	r20, r24
    1554:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    1556:	20 91 40 07 	lds	r18, 0x0740
    155a:	30 91 41 07 	lds	r19, 0x0741
    155e:	24 17       	cp	r18, r20
    1560:	35 07       	cpc	r19, r21
    1562:	b0 f4       	brcc	.+44     	; 0x1590 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    1564:	ca 01       	movw	r24, r20
    1566:	82 1b       	sub	r24, r18
    1568:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    156a:	86 17       	cp	r24, r22
    156c:	97 07       	cpc	r25, r23
    156e:	80 f0       	brcs	.+32     	; 0x1590 <malloc+0x12a>
    1570:	ab 01       	movw	r20, r22
    1572:	4e 5f       	subi	r20, 0xFE	; 254
    1574:	5f 4f       	sbci	r21, 0xFF	; 255
    1576:	84 17       	cp	r24, r20
    1578:	95 07       	cpc	r25, r21
    157a:	50 f0       	brcs	.+20     	; 0x1590 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    157c:	42 0f       	add	r20, r18
    157e:	53 1f       	adc	r21, r19
    1580:	50 93 41 07 	sts	0x0741, r21
    1584:	40 93 40 07 	sts	0x0740, r20
		fp1->sz = len;
    1588:	f9 01       	movw	r30, r18
    158a:	61 93       	st	Z+, r22
    158c:	71 93       	st	Z+, r23
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <malloc+0x12e>
		return &(fp1->nx);
    1590:	e0 e0       	ldi	r30, 0x00	; 0
    1592:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    1594:	cf 01       	movw	r24, r30
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	9c 01       	movw	r18, r24
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	09 f4       	brne	.+2      	; 0x15ac <free+0xc>
    15aa:	8f c0       	rjmp	.+286    	; 0x16ca <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    15ac:	ec 01       	movw	r28, r24
    15ae:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    15b0:	1b 82       	std	Y+3, r1	; 0x03
    15b2:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    15b4:	60 91 42 07 	lds	r22, 0x0742
    15b8:	70 91 43 07 	lds	r23, 0x0743
    15bc:	61 15       	cp	r22, r1
    15be:	71 05       	cpc	r23, r1
    15c0:	81 f4       	brne	.+32     	; 0x15e2 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    15c2:	88 81       	ld	r24, Y
    15c4:	99 81       	ldd	r25, Y+1	; 0x01
    15c6:	82 0f       	add	r24, r18
    15c8:	93 1f       	adc	r25, r19
    15ca:	20 91 40 07 	lds	r18, 0x0740
    15ce:	30 91 41 07 	lds	r19, 0x0741
    15d2:	28 17       	cp	r18, r24
    15d4:	39 07       	cpc	r19, r25
    15d6:	39 f5       	brne	.+78     	; 0x1626 <free+0x86>
			__brkval = cpnew;
    15d8:	d0 93 41 07 	sts	0x0741, r29
    15dc:	c0 93 40 07 	sts	0x0740, r28
    15e0:	74 c0       	rjmp	.+232    	; 0x16ca <free+0x12a>
		else
			__flp = fpnew;
    15e2:	db 01       	movw	r26, r22
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    15e8:	ac 17       	cp	r26, r28
    15ea:	bd 07       	cpc	r27, r29
    15ec:	08 f1       	brcs	.+66     	; 0x1630 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    15ee:	bb 83       	std	Y+3, r27	; 0x03
    15f0:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    15f2:	fe 01       	movw	r30, r28
    15f4:	21 91       	ld	r18, Z+
    15f6:	31 91       	ld	r19, Z+
    15f8:	e2 0f       	add	r30, r18
    15fa:	f3 1f       	adc	r31, r19
    15fc:	ae 17       	cp	r26, r30
    15fe:	bf 07       	cpc	r27, r31
    1600:	79 f4       	brne	.+30     	; 0x1620 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    1602:	8d 91       	ld	r24, X+
    1604:	9c 91       	ld	r25, X
    1606:	11 97       	sbiw	r26, 0x01	; 1
    1608:	28 0f       	add	r18, r24
    160a:	39 1f       	adc	r19, r25
    160c:	2e 5f       	subi	r18, 0xFE	; 254
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
    1610:	39 83       	std	Y+1, r19	; 0x01
    1612:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    1614:	12 96       	adiw	r26, 0x02	; 2
    1616:	8d 91       	ld	r24, X+
    1618:	9c 91       	ld	r25, X
    161a:	13 97       	sbiw	r26, 0x03	; 3
    161c:	9b 83       	std	Y+3, r25	; 0x03
    161e:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    1620:	41 15       	cp	r20, r1
    1622:	51 05       	cpc	r21, r1
    1624:	71 f4       	brne	.+28     	; 0x1642 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    1626:	d0 93 43 07 	sts	0x0743, r29
    162a:	c0 93 42 07 	sts	0x0742, r28
    162e:	4d c0       	rjmp	.+154    	; 0x16ca <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    1630:	12 96       	adiw	r26, 0x02	; 2
    1632:	8d 91       	ld	r24, X+
    1634:	9c 91       	ld	r25, X
    1636:	13 97       	sbiw	r26, 0x03	; 3
    1638:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	11 f0       	breq	.+4      	; 0x1642 <free+0xa2>
    163e:	dc 01       	movw	r26, r24
    1640:	d3 cf       	rjmp	.-90     	; 0x15e8 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    1642:	da 01       	movw	r26, r20
    1644:	13 96       	adiw	r26, 0x03	; 3
    1646:	dc 93       	st	X, r29
    1648:	ce 93       	st	-X, r28
    164a:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    164c:	fa 01       	movw	r30, r20
    164e:	21 91       	ld	r18, Z+
    1650:	31 91       	ld	r19, Z+
    1652:	e2 0f       	add	r30, r18
    1654:	f3 1f       	adc	r31, r19
    1656:	ce 17       	cp	r28, r30
    1658:	df 07       	cpc	r29, r31
    165a:	69 f4       	brne	.+26     	; 0x1676 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    165c:	88 81       	ld	r24, Y
    165e:	99 81       	ldd	r25, Y+1	; 0x01
    1660:	28 0f       	add	r18, r24
    1662:	39 1f       	adc	r19, r25
    1664:	2e 5f       	subi	r18, 0xFE	; 254
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	fa 01       	movw	r30, r20
    166a:	31 83       	std	Z+1, r19	; 0x01
    166c:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	9b 81       	ldd	r25, Y+3	; 0x03
    1672:	93 83       	std	Z+3, r25	; 0x03
    1674:	82 83       	std	Z+2, r24	; 0x02
    1676:	e0 e0       	ldi	r30, 0x00	; 0
    1678:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    167a:	db 01       	movw	r26, r22
    167c:	12 96       	adiw	r26, 0x02	; 2
    167e:	8d 91       	ld	r24, X+
    1680:	9c 91       	ld	r25, X
    1682:	13 97       	sbiw	r26, 0x03	; 3
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	19 f0       	breq	.+6      	; 0x168e <free+0xee>
    1688:	bc 01       	movw	r22, r24
    168a:	fd 01       	movw	r30, r26
    168c:	f6 cf       	rjmp	.-20     	; 0x167a <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    168e:	ab 01       	movw	r20, r22
    1690:	4e 5f       	subi	r20, 0xFE	; 254
    1692:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    1694:	db 01       	movw	r26, r22
    1696:	8d 91       	ld	r24, X+
    1698:	9c 91       	ld	r25, X
    169a:	84 0f       	add	r24, r20
    169c:	95 1f       	adc	r25, r21
    169e:	20 91 40 07 	lds	r18, 0x0740
    16a2:	30 91 41 07 	lds	r19, 0x0741
    16a6:	28 17       	cp	r18, r24
    16a8:	39 07       	cpc	r19, r25
    16aa:	79 f4       	brne	.+30     	; 0x16ca <free+0x12a>
		if (fp2 == NULL)
    16ac:	30 97       	sbiw	r30, 0x00	; 0
    16ae:	29 f4       	brne	.+10     	; 0x16ba <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    16b0:	10 92 43 07 	sts	0x0743, r1
    16b4:	10 92 42 07 	sts	0x0742, r1
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <free+0x11e>
		else
			fp2->nx = NULL;
    16ba:	13 82       	std	Z+3, r1	; 0x03
    16bc:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    16be:	42 50       	subi	r20, 0x02	; 2
    16c0:	50 40       	sbci	r21, 0x00	; 0
    16c2:	50 93 41 07 	sts	0x0741, r21
    16c6:	40 93 40 07 	sts	0x0740, r20
	}
}
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	08 95       	ret

000016d0 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    16d0:	6f 92       	push	r6
    16d2:	7f 92       	push	r7
    16d4:	8f 92       	push	r8
    16d6:	9f 92       	push	r9
    16d8:	af 92       	push	r10
    16da:	bf 92       	push	r11
    16dc:	cf 92       	push	r12
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	8c 01       	movw	r16, r24
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	29 f4       	brne	.+10     	; 0x16fc <realloc+0x2c>
		return malloc(len);
    16f2:	cb 01       	movw	r24, r22
    16f4:	0e 94 33 0a 	call	0x1466	; 0x1466 <malloc>
    16f8:	8c 01       	movw	r16, r24
    16fa:	bb c0       	rjmp	.+374    	; 0x1872 <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    16fc:	8e ef       	ldi	r24, 0xFE	; 254
    16fe:	e8 2e       	mov	r14, r24
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	f8 2e       	mov	r15, r24
    1704:	e0 0e       	add	r14, r16
    1706:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    1708:	48 01       	movw	r8, r16
    170a:	86 0e       	add	r8, r22
    170c:	97 1e       	adc	r9, r23
	if (cp < cp1)
    170e:	8e 14       	cp	r8, r14
    1710:	9f 04       	cpc	r9, r15
    1712:	08 f4       	brcc	.+2      	; 0x1716 <realloc+0x46>
    1714:	ac c0       	rjmp	.+344    	; 0x186e <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    1716:	d7 01       	movw	r26, r14
    1718:	4d 91       	ld	r20, X+
    171a:	5c 91       	ld	r21, X
    171c:	11 97       	sbiw	r26, 0x01	; 1
    171e:	46 17       	cp	r20, r22
    1720:	57 07       	cpc	r21, r23
    1722:	b8 f0       	brcs	.+46     	; 0x1752 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    1724:	45 30       	cpi	r20, 0x05	; 5
    1726:	51 05       	cpc	r21, r1
    1728:	08 f4       	brcc	.+2      	; 0x172c <realloc+0x5c>
    172a:	a3 c0       	rjmp	.+326    	; 0x1872 <realloc+0x1a2>
    172c:	ca 01       	movw	r24, r20
    172e:	04 97       	sbiw	r24, 0x04	; 4
    1730:	86 17       	cp	r24, r22
    1732:	97 07       	cpc	r25, r23
    1734:	08 f4       	brcc	.+2      	; 0x1738 <realloc+0x68>
    1736:	9d c0       	rjmp	.+314    	; 0x1872 <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    1738:	42 50       	subi	r20, 0x02	; 2
    173a:	50 40       	sbci	r21, 0x00	; 0
    173c:	46 1b       	sub	r20, r22
    173e:	57 0b       	sbc	r21, r23
    1740:	f4 01       	movw	r30, r8
    1742:	41 93       	st	Z+, r20
    1744:	51 93       	st	Z+, r21
		fp1->sz = len;
    1746:	6d 93       	st	X+, r22
    1748:	7c 93       	st	X, r23
		free(&(fp2->nx));
    174a:	cf 01       	movw	r24, r30
    174c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <free>
    1750:	90 c0       	rjmp	.+288    	; 0x1872 <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    1752:	5b 01       	movw	r10, r22
    1754:	a4 1a       	sub	r10, r20
    1756:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    1758:	38 01       	movw	r6, r16
    175a:	64 0e       	add	r6, r20
    175c:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    175e:	a0 91 42 07 	lds	r26, 0x0742
    1762:	b0 91 43 07 	lds	r27, 0x0743
    1766:	e0 e0       	ldi	r30, 0x00	; 0
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	cc 24       	eor	r12, r12
    176c:	dd 24       	eor	r13, r13
    176e:	47 c0       	rjmp	.+142    	; 0x17fe <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    1770:	a6 15       	cp	r26, r6
    1772:	b7 05       	cpc	r27, r7
    1774:	a9 f5       	brne	.+106    	; 0x17e0 <realloc+0x110>
    1776:	cd 91       	ld	r28, X+
    1778:	dc 91       	ld	r29, X
    177a:	11 97       	sbiw	r26, 0x01	; 1
    177c:	ce 01       	movw	r24, r28
    177e:	02 96       	adiw	r24, 0x02	; 2
    1780:	8a 15       	cp	r24, r10
    1782:	9b 05       	cpc	r25, r11
    1784:	68 f1       	brcs	.+90     	; 0x17e0 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    1786:	ce 01       	movw	r24, r28
    1788:	8a 19       	sub	r24, r10
    178a:	9b 09       	sbc	r25, r11
    178c:	02 96       	adiw	r24, 0x02	; 2
    178e:	12 96       	adiw	r26, 0x02	; 2
    1790:	2c 91       	ld	r18, X
    1792:	12 97       	sbiw	r26, 0x02	; 2
    1794:	13 96       	adiw	r26, 0x03	; 3
    1796:	3c 91       	ld	r19, X
    1798:	05 97       	sbiw	r24, 0x05	; 5
    179a:	58 f0       	brcs	.+22     	; 0x17b2 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    179c:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    179e:	22 83       	std	Z+2, r18	; 0x02
    17a0:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    17a2:	ca 19       	sub	r28, r10
    17a4:	db 09       	sbc	r29, r11
    17a6:	d1 83       	std	Z+1, r29	; 0x01
    17a8:	c0 83       	st	Z, r28
				fp1->sz = len;
    17aa:	d7 01       	movw	r26, r14
    17ac:	6d 93       	st	X+, r22
    17ae:	7c 93       	st	X, r23
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    17b2:	4e 5f       	subi	r20, 0xFE	; 254
    17b4:	5f 4f       	sbci	r21, 0xFF	; 255
    17b6:	4c 0f       	add	r20, r28
    17b8:	5d 1f       	adc	r21, r29
    17ba:	f7 01       	movw	r30, r14
    17bc:	51 83       	std	Z+1, r21	; 0x01
    17be:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    17c0:	c9 01       	movw	r24, r18
    17c2:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    17c4:	c1 14       	cp	r12, r1
    17c6:	d1 04       	cpc	r13, r1
    17c8:	31 f0       	breq	.+12     	; 0x17d6 <realloc+0x106>
				ofp3->nx = fp2;
    17ca:	d6 01       	movw	r26, r12
    17cc:	13 96       	adiw	r26, 0x03	; 3
    17ce:	fc 93       	st	X, r31
    17d0:	ee 93       	st	-X, r30
    17d2:	12 97       	sbiw	r26, 0x02	; 2
    17d4:	4e c0       	rjmp	.+156    	; 0x1872 <realloc+0x1a2>
			else
				__flp = fp2;
    17d6:	f0 93 43 07 	sts	0x0743, r31
    17da:	e0 93 42 07 	sts	0x0742, r30
    17de:	49 c0       	rjmp	.+146    	; 0x1872 <realloc+0x1a2>
    17e0:	8d 91       	ld	r24, X+
    17e2:	9c 91       	ld	r25, X
    17e4:	11 97       	sbiw	r26, 0x01	; 1
    17e6:	e8 17       	cp	r30, r24
    17e8:	f9 07       	cpc	r31, r25
    17ea:	08 f4       	brcc	.+2      	; 0x17ee <realloc+0x11e>
    17ec:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    17ee:	6d 01       	movw	r12, r26
    17f0:	12 96       	adiw	r26, 0x02	; 2
    17f2:	8c 91       	ld	r24, X
    17f4:	12 97       	sbiw	r26, 0x02	; 2
    17f6:	13 96       	adiw	r26, 0x03	; 3
    17f8:	9c 91       	ld	r25, X
    17fa:	9c 01       	movw	r18, r24
    17fc:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    17fe:	10 97       	sbiw	r26, 0x00	; 0
    1800:	09 f0       	breq	.+2      	; 0x1804 <realloc+0x134>
    1802:	b6 cf       	rjmp	.-148    	; 0x1770 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    1804:	80 91 40 07 	lds	r24, 0x0740
    1808:	90 91 41 07 	lds	r25, 0x0741
    180c:	86 15       	cp	r24, r6
    180e:	97 05       	cpc	r25, r7
    1810:	e9 f4       	brne	.+58     	; 0x184c <realloc+0x17c>
    1812:	e6 17       	cp	r30, r22
    1814:	f7 07       	cpc	r31, r23
    1816:	d0 f4       	brcc	.+52     	; 0x184c <realloc+0x17c>
		cp1 = __malloc_heap_end;
    1818:	20 91 1f 02 	lds	r18, 0x021F
    181c:	30 91 20 02 	lds	r19, 0x0220
		cp = (char *)ptr + len;
		if (cp1 == 0)
    1820:	21 15       	cp	r18, r1
    1822:	31 05       	cpc	r19, r1
    1824:	41 f4       	brne	.+16     	; 0x1836 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    1826:	2d b7       	in	r18, 0x3d	; 61
    1828:	3e b7       	in	r19, 0x3e	; 62
    182a:	80 91 1b 02 	lds	r24, 0x021B
    182e:	90 91 1c 02 	lds	r25, 0x021C
    1832:	28 1b       	sub	r18, r24
    1834:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    1836:	82 16       	cp	r8, r18
    1838:	93 06       	cpc	r9, r19
    183a:	c8 f4       	brcc	.+50     	; 0x186e <realloc+0x19e>
			__brkval = cp;
    183c:	90 92 41 07 	sts	0x0741, r9
    1840:	80 92 40 07 	sts	0x0740, r8
			fp1->sz = len;
    1844:	f7 01       	movw	r30, r14
    1846:	71 83       	std	Z+1, r23	; 0x01
    1848:	60 83       	st	Z, r22
    184a:	13 c0       	rjmp	.+38     	; 0x1872 <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    184c:	cb 01       	movw	r24, r22
    184e:	0e 94 33 0a 	call	0x1466	; 0x1466 <malloc>
    1852:	ec 01       	movw	r28, r24
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	59 f0       	breq	.+22     	; 0x186e <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    1858:	d7 01       	movw	r26, r14
    185a:	4d 91       	ld	r20, X+
    185c:	5c 91       	ld	r21, X
    185e:	b8 01       	movw	r22, r16
    1860:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <memcpy>
	free(ptr);
    1864:	c8 01       	movw	r24, r16
    1866:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <free>
    186a:	8e 01       	movw	r16, r28
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <realloc+0x1a2>
	return memp;
    186e:	00 e0       	ldi	r16, 0x00	; 0
    1870:	10 e0       	ldi	r17, 0x00	; 0
}
    1872:	c8 01       	movw	r24, r16
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	ff 90       	pop	r15
    187e:	ef 90       	pop	r14
    1880:	df 90       	pop	r13
    1882:	cf 90       	pop	r12
    1884:	bf 90       	pop	r11
    1886:	af 90       	pop	r10
    1888:	9f 90       	pop	r9
    188a:	8f 90       	pop	r8
    188c:	7f 90       	pop	r7
    188e:	6f 90       	pop	r6
    1890:	08 95       	ret

00001892 <__mulsi3>:
    1892:	62 9f       	mul	r22, r18
    1894:	d0 01       	movw	r26, r0
    1896:	73 9f       	mul	r23, r19
    1898:	f0 01       	movw	r30, r0
    189a:	82 9f       	mul	r24, r18
    189c:	e0 0d       	add	r30, r0
    189e:	f1 1d       	adc	r31, r1
    18a0:	64 9f       	mul	r22, r20
    18a2:	e0 0d       	add	r30, r0
    18a4:	f1 1d       	adc	r31, r1
    18a6:	92 9f       	mul	r25, r18
    18a8:	f0 0d       	add	r31, r0
    18aa:	83 9f       	mul	r24, r19
    18ac:	f0 0d       	add	r31, r0
    18ae:	74 9f       	mul	r23, r20
    18b0:	f0 0d       	add	r31, r0
    18b2:	65 9f       	mul	r22, r21
    18b4:	f0 0d       	add	r31, r0
    18b6:	99 27       	eor	r25, r25
    18b8:	72 9f       	mul	r23, r18
    18ba:	b0 0d       	add	r27, r0
    18bc:	e1 1d       	adc	r30, r1
    18be:	f9 1f       	adc	r31, r25
    18c0:	63 9f       	mul	r22, r19
    18c2:	b0 0d       	add	r27, r0
    18c4:	e1 1d       	adc	r30, r1
    18c6:	f9 1f       	adc	r31, r25
    18c8:	bd 01       	movw	r22, r26
    18ca:	cf 01       	movw	r24, r30
    18cc:	11 24       	eor	r1, r1
    18ce:	08 95       	ret

000018d0 <__udivmodsi4>:
    18d0:	a1 e2       	ldi	r26, 0x21	; 33
    18d2:	1a 2e       	mov	r1, r26
    18d4:	aa 1b       	sub	r26, r26
    18d6:	bb 1b       	sub	r27, r27
    18d8:	fd 01       	movw	r30, r26
    18da:	0d c0       	rjmp	.+26     	; 0x18f6 <__udivmodsi4_ep>

000018dc <__udivmodsi4_loop>:
    18dc:	aa 1f       	adc	r26, r26
    18de:	bb 1f       	adc	r27, r27
    18e0:	ee 1f       	adc	r30, r30
    18e2:	ff 1f       	adc	r31, r31
    18e4:	a2 17       	cp	r26, r18
    18e6:	b3 07       	cpc	r27, r19
    18e8:	e4 07       	cpc	r30, r20
    18ea:	f5 07       	cpc	r31, r21
    18ec:	20 f0       	brcs	.+8      	; 0x18f6 <__udivmodsi4_ep>
    18ee:	a2 1b       	sub	r26, r18
    18f0:	b3 0b       	sbc	r27, r19
    18f2:	e4 0b       	sbc	r30, r20
    18f4:	f5 0b       	sbc	r31, r21

000018f6 <__udivmodsi4_ep>:
    18f6:	66 1f       	adc	r22, r22
    18f8:	77 1f       	adc	r23, r23
    18fa:	88 1f       	adc	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	1a 94       	dec	r1
    1900:	69 f7       	brne	.-38     	; 0x18dc <__udivmodsi4_loop>
    1902:	60 95       	com	r22
    1904:	70 95       	com	r23
    1906:	80 95       	com	r24
    1908:	90 95       	com	r25
    190a:	9b 01       	movw	r18, r22
    190c:	ac 01       	movw	r20, r24
    190e:	bd 01       	movw	r22, r26
    1910:	cf 01       	movw	r24, r30
    1912:	08 95       	ret

00001914 <__tablejump2__>:
    1914:	ee 0f       	add	r30, r30
    1916:	ff 1f       	adc	r31, r31

00001918 <__tablejump__>:
    1918:	05 90       	lpm	r0, Z+
    191a:	f4 91       	lpm	r31, Z+
    191c:	e0 2d       	mov	r30, r0
    191e:	09 94       	ijmp

00001920 <_exit>:
    1920:	f8 94       	cli

00001922 <__stop_program>:
    1922:	ff cf       	rjmp	.-2      	; 0x1922 <__stop_program>
