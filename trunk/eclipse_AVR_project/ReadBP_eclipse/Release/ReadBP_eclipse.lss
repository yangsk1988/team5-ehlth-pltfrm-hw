
ReadBP_eclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  000018ce  00001962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000512  00800224  00800224  00001a86  2**0
                  ALLOC
  3 .debug_aranges 000008e8  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000188c  00000000  00000000  0000236e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000cf47  00000000  00000000  00003bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002073  00000000  00000000  00010b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005ceb  00000000  00000000  00012bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ff0  00000000  00000000  000188a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002a64  00000000  00000000  00019890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005cda  00000000  00000000  0001c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008a0  00000000  00000000  00021fce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//!******************************************************************************

	uint8_t eHealthClass::getGlucometerLength(void)
	{
		return length;
	}
       0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
};
//***************************************************************
// Constructor of the class										*
//***************************************************************

	eHealthDisplayClass::eHealthDisplayClass(void){/*void constructor*/}
       4:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       8:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
       c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
}
      10:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
}
      14:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      18:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      1c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      20:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      24:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      28:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      2c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      30:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      34:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      38:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      3c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      40:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_16>
      44:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      48:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_18>
      4c:	0c 94 2c 04 	jmp	0x858	; 0x858 <__vector_19>
      50:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      54:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      58:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      5c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      60:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>
      64:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__bad_interrupt>

00000068 <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c_0>:
      68:	0a 00                                               ..

0000006a <_ZZN12eHealthClass23readBloodPressureSensorEvE3__c>:
      6a:	0a 45 72 72 6f 72 73 3a 20 43 61 6e 27 74 20 66     .Errors: Can't f
      7a:	69 6e 64 20 74 68 65 20 68 65 61 64 20 6f 66 20     ind the head of 
      8a:	64 61 74 61 00                                      data.

0000008f <_ZZ4loopE3__c_14>:
      8f:	20 62 70 6d 00                                       bpm.

00000094 <_ZZ4loopE3__c_13>:
      94:	50 75 6c 73 65 20 76 61 6c 75 65 20 3a 20 00        Pulse value : .

000000a3 <_ZZ4loopE3__c_12>:
      a3:	20 6d 6d 48 67 00                                    mmHg.

000000a9 <_ZZ4loopE3__c_11>:
      a9:	44 69 61 73 74 6f 6c 69 63 20 76 61 6c 75 65 20     Diastolic value 
      b9:	3a 20 00                                            : .

000000bc <_ZZ4loopE3__c_10>:
      bc:	20 6d 6d 48 67 00                                    mmHg.

000000c2 <_ZZ4loopE3__c_9>:
      c2:	53 79 73 74 6f 6c 69 63 20 76 61 6c 75 65 20 3a     Systolic value :
      d2:	20 00                                                .

000000d4 <_ZZ4loopE3__c_8>:
      d4:	3a 00                                               :.

000000d6 <_ZZ4loopE3__c_7>:
      d6:	20 61 74 20 00                                       at .

000000db <_ZZ4loopE3__c_6>:
      db:	20 6f 66 20 00                                       of .

000000e0 <_ZZ4loopE3__c_5>:
      e0:	20 6f 66 20 00                                       of .

000000e5 <_ZZ4loopE3__c_4>:
      e5:	44 61 74 65 20 2d 3e 20 00                          Date -> .

000000ee <_ZZ4loopE3__c_3>:
      ee:	4d 65 61 73 75 72 65 20 6e 75 6d 62 65 72 20 00     Measure number .

000000fe <_ZZ4loopE3__c_2>:
      fe:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     10e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     11e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 00                    ==========.

00000129 <_ZZ4loopE3__c_1>:
     129:	4e 75 6d 62 65 72 20 6f 66 20 6d 65 61 73 75 72     Number of measur
     139:	65 73 20 3a 20 00                                   es : .

0000013f <_ZZ4loopE3__c_0>:
     13f:	0a 52 65 61 64 69 6e 67 20 45 6e 64 73 2e 0a 00     .Reading Ends...

0000014f <_ZZ4loopE3__c>:
     14f:	0a 3d 3d 0a 52 65 61 64 69 6e 67 20 53 74 61 72     .==.Reading Star
     15f:	74 73 2e 2e 2e 0a 00                                ts.....

00000166 <__ctors_start>:
     166:	05 01       	movw	r0, r10
     168:	b3 02       	muls	r27, r19
     16a:	96 05       	cpc	r25, r6

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d8 e0       	ldi	r29, 0x08	; 8
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61

00000178 <__do_copy_data>:
     178:	12 e0       	ldi	r17, 0x02	; 2
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	ee ec       	ldi	r30, 0xCE	; 206
     180:	f8 e1       	ldi	r31, 0x18	; 24
     182:	02 c0       	rjmp	.+4      	; 0x188 <.do_copy_data_start>

00000184 <.do_copy_data_loop>:
     184:	05 90       	lpm	r0, Z+
     186:	0d 92       	st	X+, r0

00000188 <.do_copy_data_start>:
     188:	a4 32       	cpi	r26, 0x24	; 36
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <.do_copy_data_loop>

0000018e <__do_clear_bss>:
     18e:	17 e0       	ldi	r17, 0x07	; 7
     190:	a4 e2       	ldi	r26, 0x24	; 36
     192:	b2 e0       	ldi	r27, 0x02	; 2
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a6 33       	cpi	r26, 0x36	; 54
     19a:	b1 07       	cpc	r27, r17
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>

0000019e <__do_global_ctors>:
     19e:	11 e0       	ldi	r17, 0x01	; 1
     1a0:	cc e6       	ldi	r28, 0x6C	; 108
     1a2:	d1 e0       	ldi	r29, 0x01	; 1
     1a4:	04 c0       	rjmp	.+8      	; 0x1ae <.do_global_ctors_start>

000001a6 <.do_global_ctors_loop>:
     1a6:	22 97       	sbiw	r28, 0x02	; 2
     1a8:	fe 01       	movw	r30, r28
     1aa:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__tablejump__>

000001ae <.do_global_ctors_start>:
     1ae:	c6 36       	cpi	r28, 0x66	; 102
     1b0:	d1 07       	cpc	r29, r17
     1b2:	c9 f7       	brne	.-14     	; 0x1a6 <.do_global_ctors_loop>
     1b4:	0e 94 05 09 	call	0x120a	; 0x120a <main>
     1b8:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <_exit>

000001bc <__bad_interrupt>:
     1bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c0 <memcpy>:
     1c0:	fb 01       	movw	r30, r22
     1c2:	dc 01       	movw	r26, r24
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <memcpy+0xa>
     1c6:	01 90       	ld	r0, Z+
     1c8:	0d 92       	st	X+, r0
     1ca:	41 50       	subi	r20, 0x01	; 1
     1cc:	50 40       	sbci	r21, 0x00	; 0
     1ce:	d8 f7       	brcc	.-10     	; 0x1c6 <memcpy+0x6>
     1d0:	08 95       	ret

000001d2 <strcpy>:
     1d2:	fb 01       	movw	r30, r22
     1d4:	dc 01       	movw	r26, r24
     1d6:	01 90       	ld	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	00 20       	and	r0, r0
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <strcpy+0x4>
     1de:	08 95       	ret

000001e0 <_ZN12eHealthClass22getBloodPressureLengthEv>:
	//!		Param : void															*
	//!		Returns: uint8_t with length											*
	//!		Example: int length = eHealth.getBloodPressureLength();					*
	//!******************************************************************************

	uint8_t eHealthClass::getBloodPressureLength(void)
     1e0:	fc 01       	movw	r30, r24
     1e2:	e7 52       	subi	r30, 0x27	; 39
     1e4:	fd 4f       	sbci	r31, 0xFD	; 253
	{
		return BPlength;
	}
     1e6:	80 81       	ld	r24, Z
     1e8:	08 95       	ret

000001ea <_ZN12eHealthClass4swapEc>:

	//! Swap data for blood pressure mesure
	
	char eHealthClass::swap(char _data)
	{
		char highBits = (_data & 0xF0) / 16; 
     1ea:	77 27       	eor	r23, r23
     1ec:	67 fd       	sbrc	r22, 7
     1ee:	70 95       	com	r23
     1f0:	86 2f       	mov	r24, r22
     1f2:	82 95       	swap	r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	60 7f       	andi	r22, 0xF0	; 240
     1f8:	70 70       	andi	r23, 0x00	; 0
     1fa:	e4 e0       	ldi	r30, 0x04	; 4
     1fc:	75 95       	asr	r23
     1fe:	67 95       	ror	r22
     200:	ea 95       	dec	r30
     202:	e1 f7       	brne	.-8      	; 0x1fc <_ZN12eHealthClass4swapEc+0x12>
     204:	86 0f       	add	r24, r22
 		char lowBits =  (_data & 0x0F) * 16; 
  		return ~(highBits + lowBits);
	}
     206:	80 95       	com	r24
     208:	08 95       	ret

0000020a <_GLOBAL__I__Z7i2cInitv>:

//***************************************************************
// Preinstantiate Objects										*
//***************************************************************

	eHealthClass eHealth = eHealthClass();
     20a:	08 95       	ret

0000020c <_ZN12eHealthClass13numberToMonthEi>:
	//!		Param : int month in numerical format									*
	//!		Returns: String with the month characters (January, February...).		*
	//!		Example: Serial.print(eHealth.numberToMonth(month));					*
	//!******************************************************************************
	
	String eHealthClass::numberToMonth(int month)
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	ec 01       	movw	r28, r24
	{
		if (month == 1)  return "January"; 
     212:	41 30       	cpi	r20, 0x01	; 1
     214:	51 05       	cpc	r21, r1
     216:	19 f4       	brne	.+6      	; 0x21e <_ZN12eHealthClass13numberToMonthEi+0x12>
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	71 e0       	ldi	r23, 0x01	; 1
     21c:	3e c0       	rjmp	.+124    	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 2)  return "February";
     21e:	42 30       	cpi	r20, 0x02	; 2
     220:	51 05       	cpc	r21, r1
     222:	19 f4       	brne	.+6      	; 0x22a <_ZN12eHealthClass13numberToMonthEi+0x1e>
     224:	68 e0       	ldi	r22, 0x08	; 8
     226:	71 e0       	ldi	r23, 0x01	; 1
     228:	38 c0       	rjmp	.+112    	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 3)  return "March";
     22a:	43 30       	cpi	r20, 0x03	; 3
     22c:	51 05       	cpc	r21, r1
     22e:	19 f4       	brne	.+6      	; 0x236 <_ZN12eHealthClass13numberToMonthEi+0x2a>
     230:	61 e1       	ldi	r22, 0x11	; 17
     232:	71 e0       	ldi	r23, 0x01	; 1
     234:	32 c0       	rjmp	.+100    	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 4)  return "April";
     236:	44 30       	cpi	r20, 0x04	; 4
     238:	51 05       	cpc	r21, r1
     23a:	19 f4       	brne	.+6      	; 0x242 <_ZN12eHealthClass13numberToMonthEi+0x36>
     23c:	67 e1       	ldi	r22, 0x17	; 23
     23e:	71 e0       	ldi	r23, 0x01	; 1
     240:	2c c0       	rjmp	.+88     	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 5)  return "May";
     242:	45 30       	cpi	r20, 0x05	; 5
     244:	51 05       	cpc	r21, r1
     246:	19 f4       	brne	.+6      	; 0x24e <_ZN12eHealthClass13numberToMonthEi+0x42>
     248:	6d e1       	ldi	r22, 0x1D	; 29
     24a:	71 e0       	ldi	r23, 0x01	; 1
     24c:	26 c0       	rjmp	.+76     	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 6)  return "June";
     24e:	46 30       	cpi	r20, 0x06	; 6
     250:	51 05       	cpc	r21, r1
     252:	19 f4       	brne	.+6      	; 0x25a <_ZN12eHealthClass13numberToMonthEi+0x4e>
     254:	61 e2       	ldi	r22, 0x21	; 33
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	20 c0       	rjmp	.+64     	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 7)  return "July";
     25a:	47 30       	cpi	r20, 0x07	; 7
     25c:	51 05       	cpc	r21, r1
     25e:	19 f4       	brne	.+6      	; 0x266 <_ZN12eHealthClass13numberToMonthEi+0x5a>
     260:	66 e2       	ldi	r22, 0x26	; 38
     262:	71 e0       	ldi	r23, 0x01	; 1
     264:	1a c0       	rjmp	.+52     	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 8)  return "August";
     266:	48 30       	cpi	r20, 0x08	; 8
     268:	51 05       	cpc	r21, r1
     26a:	19 f4       	brne	.+6      	; 0x272 <_ZN12eHealthClass13numberToMonthEi+0x66>
     26c:	6b e2       	ldi	r22, 0x2B	; 43
     26e:	71 e0       	ldi	r23, 0x01	; 1
     270:	14 c0       	rjmp	.+40     	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 9)  return "September";
     272:	49 30       	cpi	r20, 0x09	; 9
     274:	51 05       	cpc	r21, r1
     276:	19 f4       	brne	.+6      	; 0x27e <_ZN12eHealthClass13numberToMonthEi+0x72>
     278:	62 e3       	ldi	r22, 0x32	; 50
     27a:	71 e0       	ldi	r23, 0x01	; 1
     27c:	0e c0       	rjmp	.+28     	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 10) return "October";
     27e:	4a 30       	cpi	r20, 0x0A	; 10
     280:	51 05       	cpc	r21, r1
     282:	19 f4       	brne	.+6      	; 0x28a <_ZN12eHealthClass13numberToMonthEi+0x7e>
     284:	6c e3       	ldi	r22, 0x3C	; 60
     286:	71 e0       	ldi	r23, 0x01	; 1
     288:	08 c0       	rjmp	.+16     	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else if (month == 11) return "November";
     28a:	4b 30       	cpi	r20, 0x0B	; 11
     28c:	51 05       	cpc	r21, r1
     28e:	19 f4       	brne	.+6      	; 0x296 <_ZN12eHealthClass13numberToMonthEi+0x8a>
     290:	64 e4       	ldi	r22, 0x44	; 68
     292:	71 e0       	ldi	r23, 0x01	; 1
     294:	02 c0       	rjmp	.+4      	; 0x29a <_ZN12eHealthClass13numberToMonthEi+0x8e>
		else return "December";
     296:	6d e4       	ldi	r22, 0x4D	; 77
     298:	71 e0       	ldi	r23, 0x01	; 1
     29a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN6StringC1EPKc>
	}
     29e:	ce 01       	movw	r24, r28
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <_ZN12eHealthClass23readBloodPressureSensorEv>:
	//!	Param : void																*
	//!	Returns: void																*
	//!	Example: eHealth.initBloodPressureSensor();									*
	//!******************************************************************************

	void eHealthClass::readBloodPressureSensor(void)
     2a6:	bf 92       	push	r11
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	df 93       	push	r29
     2b6:	cf 93       	push	r28
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <_ZN12eHealthClass23readBloodPressureSensorEv+0x14>
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <_ZN12eHealthClass23readBloodPressureSensorEv+0x16>
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	7c 01       	movw	r14, r24
	{	
		unsigned char _data;
		unsigned char _buf[4];//1280=80entries * 16 bytes each
		char Head[4] = {0xC1,0xC2,0xC3,0xC4};//const
     2c2:	81 ec       	ldi	r24, 0xC1	; 193
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	82 ec       	ldi	r24, 0xC2	; 194
     2c8:	8a 83       	std	Y+2, r24	; 0x02
     2ca:	83 ec       	ldi	r24, 0xC3	; 195
     2cc:	8b 83       	std	Y+3, r24	; 0x03
     2ce:	84 ec       	ldi	r24, 0xC4	; 196
     2d0:	8c 83       	std	Y+4, r24	; 0x04
		bool is_head_found = false;
		//int ia=0;
		BPlength=0;
     2d2:	b9 ed       	ldi	r27, 0xD9	; 217
     2d4:	cb 2e       	mov	r12, r27
     2d6:	b2 e0       	ldi	r27, 0x02	; 2
     2d8:	db 2e       	mov	r13, r27
     2da:	ce 0c       	add	r12, r14
     2dc:	df 1c       	adc	r13, r15
     2de:	f6 01       	movw	r30, r12
     2e0:	10 82       	st	Z, r1

		Serial.begin(19200);
     2e2:	87 e0       	ldi	r24, 0x07	; 7
     2e4:	97 e0       	ldi	r25, 0x07	; 7
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	5b e4       	ldi	r21, 0x4B	; 75
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN14HardwareSerial5beginEm>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     2f2:	87 e0       	ldi	r24, 0x07	; 7
     2f4:	97 e0       	ldi	r25, 0x07	; 7
     2f6:	6a ea       	ldi	r22, 0xAA	; 170
     2f8:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN14HardwareSerial5writeEh>
	 	Serial.write(0xAA);
		delayMicroseconds(1);
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 c3 09 	call	0x1386	; 0x1386 <delayMicroseconds>
     304:	87 e0       	ldi	r24, 0x07	; 7
     306:	97 e0       	ldi	r25, 0x07	; 7
     308:	65 e5       	ldi	r22, 0x55	; 85
     30a:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN14HardwareSerial5writeEh>
	 	Serial.write(0x55);
		delayMicroseconds(1);
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 c3 09 	call	0x1386	; 0x1386 <delayMicroseconds>
     316:	87 e0       	ldi	r24, 0x07	; 7
     318:	97 e0       	ldi	r25, 0x07	; 7
     31a:	68 e8       	ldi	r22, 0x88	; 136
     31c:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN14HardwareSerial5writeEh>
		Serial.write(0x88);
	 	delay(2500);
     320:	64 ec       	ldi	r22, 0xC4	; 196
     322:	79 e0       	ldi	r23, 0x09	; 9
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <delay>
		//while(!Serial.available()){}//The first byte is available, but the rest are not.
		
		int num_to_read = Serial.available();
     32c:	87 e0       	ldi	r24, 0x07	; 7
     32e:	97 e0       	ldi	r25, 0x07	; 7
     330:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN14HardwareSerial9availableEv>
		if ( num_to_read > 0) { // The protocol sends the measures 
     334:	18 16       	cp	r1, r24
     336:	19 06       	cpc	r1, r25
     338:	0c f0       	brlt	.+2      	; 0x33c <_ZN12eHealthClass23readBloodPressureSensorEv+0x96>
     33a:	07 c1       	rjmp	.+526    	; 0x54a <_ZN12eHealthClass23readBloodPressureSensorEv+0x2a4>
				Serial.print(_data,HEX);
				Serial.print(" ");
			}
			return;*/
			
			if(Serial.find(Head,4))
     33c:	87 e0       	ldi	r24, 0x07	; 7
     33e:	97 e0       	ldi	r25, 0x07	; 7
     340:	be 01       	movw	r22, r28
     342:	6f 5f       	subi	r22, 0xFF	; 255
     344:	7f 4f       	sbci	r23, 0xFF	; 255
     346:	44 e0       	ldi	r20, 0x04	; 4
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN6Stream4findEPcj>
     34e:	88 23       	and	r24, r24
     350:	39 f0       	breq	.+14     	; 0x360 <_ZN12eHealthClass23readBloodPressureSensorEv+0xba>
			{
				Serial.println(F("\nErrors: Can't find the head of data"));
				return;
			}*/

			Serial.print(F("\n"));
     352:	87 e0       	ldi	r24, 0x07	; 7
     354:	97 e0       	ldi	r25, 0x07	; 7
     356:	68 e6       	ldi	r22, 0x68	; 104
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
     35e:	12 c0       	rjmp	.+36     	; 0x384 <_ZN12eHealthClass23readBloodPressureSensorEv+0xde>
				is_head_found = true;
			}
			else
			{
				is_head_found = false;
				Serial.println(F("\nErrors: Can't find the head of data"));
     360:	87 e0       	ldi	r24, 0x07	; 7
     362:	97 e0       	ldi	r25, 0x07	; 7
     364:	6a e6       	ldi	r22, 0x6A	; 106
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     36c:	ee c0       	rjmp	.+476    	; 0x54a <_ZN12eHealthClass23readBloodPressureSensorEv+0x2a4>

				for (int i = 0; i<4; i++){ // CheckSum 1, WHICH ARE "FF F0 F1 F2"
					_buf[i] = Serial.read();
				}

				if(0xFF == _buf[0] && 0xF0 == _buf[1] && 0xF1 == _buf[2] && 0xF2 == _buf[3])
     36e:	f0 ef       	ldi	r31, 0xF0	; 240
     370:	bf 16       	cp	r11, r31
     372:	41 f4       	brne	.+16     	; 0x384 <_ZN12eHealthClass23readBloodPressureSensorEv+0xde>
     374:	01 3f       	cpi	r16, 0xF1	; 241
     376:	31 f4       	brne	.+12     	; 0x384 <_ZN12eHealthClass23readBloodPressureSensorEv+0xde>
     378:	82 3f       	cpi	r24, 0xF2	; 242
     37a:	21 f4       	brne	.+8      	; 0x384 <_ZN12eHealthClass23readBloodPressureSensorEv+0xde>
				{
					//is_entry_valid=true;
					BPlength++;
     37c:	f6 01       	movw	r30, r12
     37e:	80 81       	ld	r24, Z
     380:	8f 5f       	subi	r24, 0xFF	; 255
     382:	80 83       	st	Z, r24
					Serial.print(_buf[i],HEX);
					Serial.print(F(" "));
				}
				Serial.print(F("\n"));
#endif
				_data = Serial.peek(); 
     384:	87 e0       	ldi	r24, 0x07	; 7
     386:	97 e0       	ldi	r25, 0x07	; 7
     388:	0e 94 ff 04 	call	0x9fe	; 0x9fe <_ZN14HardwareSerial4peekEv>
     38c:	18 2f       	mov	r17, r24

			Serial.print(F("\n"));

			_data = Serial.peek();
			
 			while( Serial.available() && _data != 0xD1 && _data != 0xD4 && BPlength < BP_VECTOR_LEN) //&& _data != 0xFF  // "&& BPlength < BP_VECTOR_LEN(=80 now)" yht to prevent infinity loop
     38e:	87 e0       	ldi	r24, 0x07	; 7
     390:	97 e0       	ldi	r25, 0x07	; 7
     392:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN14HardwareSerial9availableEv>
     396:	89 2b       	or	r24, r25
     398:	09 f4       	brne	.+2      	; 0x39c <_ZN12eHealthClass23readBloodPressureSensorEv+0xf6>
     39a:	c8 c0       	rjmp	.+400    	; 0x52c <_ZN12eHealthClass23readBloodPressureSensorEv+0x286>
     39c:	11 3d       	cpi	r17, 0xD1	; 209
     39e:	09 f4       	brne	.+2      	; 0x3a2 <_ZN12eHealthClass23readBloodPressureSensorEv+0xfc>
     3a0:	c5 c0       	rjmp	.+394    	; 0x52c <_ZN12eHealthClass23readBloodPressureSensorEv+0x286>
     3a2:	14 3d       	cpi	r17, 0xD4	; 212
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <_ZN12eHealthClass23readBloodPressureSensorEv+0x102>
     3a6:	c2 c0       	rjmp	.+388    	; 0x52c <_ZN12eHealthClass23readBloodPressureSensorEv+0x286>
     3a8:	f6 01       	movw	r30, r12
     3aa:	10 81       	ld	r17, Z
     3ac:	10 35       	cpi	r17, 0x50	; 80
     3ae:	08 f0       	brcs	.+2      	; 0x3b2 <_ZN12eHealthClass23readBloodPressureSensorEv+0x10c>
     3b0:	bd c0       	rjmp	.+378    	; 0x52c <_ZN12eHealthClass23readBloodPressureSensorEv+0x286>
			{				
				bloodPressureDataVector[BPlength].year = swap(Serial.read());
     3b2:	87 e0       	ldi	r24, 0x07	; 7
     3b4:	97 e0       	ldi	r25, 0x07	; 7
     3b6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     3ba:	68 2f       	mov	r22, r24
     3bc:	c7 01       	movw	r24, r14
     3be:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN12eHealthClass4swapEc>
     3c2:	e1 2f       	mov	r30, r17
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	37 96       	adiw	r30, 0x07	; 7
     3c8:	a3 e0       	ldi	r26, 0x03	; 3
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	aa 95       	dec	r26
     3d0:	e1 f7       	brne	.-8      	; 0x3ca <_ZN12eHealthClass23readBloodPressureSensorEv+0x124>
     3d2:	ee 0d       	add	r30, r14
     3d4:	ff 1d       	adc	r31, r15
     3d6:	80 83       	st	Z, r24
				bloodPressureDataVector[BPlength].month = swap(Serial.read());
     3d8:	f6 01       	movw	r30, r12
     3da:	80 81       	ld	r24, Z
     3dc:	08 2f       	mov	r16, r24
     3de:	10 e0       	ldi	r17, 0x00	; 0
     3e0:	87 e0       	ldi	r24, 0x07	; 7
     3e2:	97 e0       	ldi	r25, 0x07	; 7
     3e4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     3e8:	68 2f       	mov	r22, r24
     3ea:	c7 01       	movw	r24, r14
     3ec:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN12eHealthClass4swapEc>
     3f0:	73 e0       	ldi	r23, 0x03	; 3
     3f2:	00 0f       	add	r16, r16
     3f4:	11 1f       	adc	r17, r17
     3f6:	7a 95       	dec	r23
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <_ZN12eHealthClass23readBloodPressureSensorEv+0x14c>
     3fa:	0e 0d       	add	r16, r14
     3fc:	1f 1d       	adc	r17, r15
     3fe:	f8 01       	movw	r30, r16
     400:	81 af       	std	Z+57, r24	; 0x39
				bloodPressureDataVector[BPlength].day = swap(Serial.read());
     402:	f6 01       	movw	r30, r12
     404:	80 81       	ld	r24, Z
     406:	08 2f       	mov	r16, r24
     408:	10 e0       	ldi	r17, 0x00	; 0
     40a:	87 e0       	ldi	r24, 0x07	; 7
     40c:	97 e0       	ldi	r25, 0x07	; 7
     40e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     412:	68 2f       	mov	r22, r24
     414:	c7 01       	movw	r24, r14
     416:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN12eHealthClass4swapEc>
     41a:	63 e0       	ldi	r22, 0x03	; 3
     41c:	00 0f       	add	r16, r16
     41e:	11 1f       	adc	r17, r17
     420:	6a 95       	dec	r22
     422:	e1 f7       	brne	.-8      	; 0x41c <_ZN12eHealthClass23readBloodPressureSensorEv+0x176>
     424:	0e 0d       	add	r16, r14
     426:	1f 1d       	adc	r17, r15
     428:	f8 01       	movw	r30, r16
     42a:	82 af       	std	Z+58, r24	; 0x3a
				bloodPressureDataVector[BPlength].hour = swap(Serial.read());
     42c:	f6 01       	movw	r30, r12
     42e:	80 81       	ld	r24, Z
     430:	08 2f       	mov	r16, r24
     432:	10 e0       	ldi	r17, 0x00	; 0
     434:	87 e0       	ldi	r24, 0x07	; 7
     436:	97 e0       	ldi	r25, 0x07	; 7
     438:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     43c:	68 2f       	mov	r22, r24
     43e:	c7 01       	movw	r24, r14
     440:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN12eHealthClass4swapEc>
     444:	53 e0       	ldi	r21, 0x03	; 3
     446:	00 0f       	add	r16, r16
     448:	11 1f       	adc	r17, r17
     44a:	5a 95       	dec	r21
     44c:	e1 f7       	brne	.-8      	; 0x446 <_ZN12eHealthClass23readBloodPressureSensorEv+0x1a0>
     44e:	0e 0d       	add	r16, r14
     450:	1f 1d       	adc	r17, r15
     452:	f8 01       	movw	r30, r16
     454:	83 af       	std	Z+59, r24	; 0x3b
				bloodPressureDataVector[BPlength].minutes = swap(Serial.read());
     456:	f6 01       	movw	r30, r12
     458:	80 81       	ld	r24, Z
     45a:	08 2f       	mov	r16, r24
     45c:	10 e0       	ldi	r17, 0x00	; 0
     45e:	87 e0       	ldi	r24, 0x07	; 7
     460:	97 e0       	ldi	r25, 0x07	; 7
     462:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     466:	68 2f       	mov	r22, r24
     468:	c7 01       	movw	r24, r14
     46a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN12eHealthClass4swapEc>
     46e:	43 e0       	ldi	r20, 0x03	; 3
     470:	00 0f       	add	r16, r16
     472:	11 1f       	adc	r17, r17
     474:	4a 95       	dec	r20
     476:	e1 f7       	brne	.-8      	; 0x470 <_ZN12eHealthClass23readBloodPressureSensorEv+0x1ca>
     478:	0e 0d       	add	r16, r14
     47a:	1f 1d       	adc	r17, r15
     47c:	f8 01       	movw	r30, r16
     47e:	84 af       	std	Z+60, r24	; 0x3c
				bloodPressureDataVector[BPlength].systolic = swap(Serial.read());
     480:	f6 01       	movw	r30, r12
     482:	80 81       	ld	r24, Z
     484:	08 2f       	mov	r16, r24
     486:	10 e0       	ldi	r17, 0x00	; 0
     488:	87 e0       	ldi	r24, 0x07	; 7
     48a:	97 e0       	ldi	r25, 0x07	; 7
     48c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     490:	68 2f       	mov	r22, r24
     492:	c7 01       	movw	r24, r14
     494:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN12eHealthClass4swapEc>
     498:	33 e0       	ldi	r19, 0x03	; 3
     49a:	00 0f       	add	r16, r16
     49c:	11 1f       	adc	r17, r17
     49e:	3a 95       	dec	r19
     4a0:	e1 f7       	brne	.-8      	; 0x49a <_ZN12eHealthClass23readBloodPressureSensorEv+0x1f4>
     4a2:	0e 0d       	add	r16, r14
     4a4:	1f 1d       	adc	r17, r15
     4a6:	f8 01       	movw	r30, r16
     4a8:	85 af       	std	Z+61, r24	; 0x3d
				bloodPressureDataVector[BPlength].diastolic = swap(Serial.read());
     4aa:	f6 01       	movw	r30, r12
     4ac:	80 81       	ld	r24, Z
     4ae:	08 2f       	mov	r16, r24
     4b0:	10 e0       	ldi	r17, 0x00	; 0
     4b2:	87 e0       	ldi	r24, 0x07	; 7
     4b4:	97 e0       	ldi	r25, 0x07	; 7
     4b6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     4ba:	68 2f       	mov	r22, r24
     4bc:	c7 01       	movw	r24, r14
     4be:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN12eHealthClass4swapEc>
     4c2:	23 e0       	ldi	r18, 0x03	; 3
     4c4:	00 0f       	add	r16, r16
     4c6:	11 1f       	adc	r17, r17
     4c8:	2a 95       	dec	r18
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <_ZN12eHealthClass23readBloodPressureSensorEv+0x21e>
     4cc:	0e 0d       	add	r16, r14
     4ce:	1f 1d       	adc	r17, r15
     4d0:	f8 01       	movw	r30, r16
     4d2:	86 af       	std	Z+62, r24	; 0x3e
				bloodPressureDataVector[BPlength].pulse = swap(Serial.read());
     4d4:	f6 01       	movw	r30, r12
     4d6:	80 81       	ld	r24, Z
     4d8:	08 2f       	mov	r16, r24
     4da:	10 e0       	ldi	r17, 0x00	; 0
     4dc:	87 e0       	ldi	r24, 0x07	; 7
     4de:	97 e0       	ldi	r25, 0x07	; 7
     4e0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     4e4:	68 2f       	mov	r22, r24
     4e6:	c7 01       	movw	r24, r14
     4e8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN12eHealthClass4swapEc>
     4ec:	93 e0       	ldi	r25, 0x03	; 3
     4ee:	00 0f       	add	r16, r16
     4f0:	11 1f       	adc	r17, r17
     4f2:	9a 95       	dec	r25
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <_ZN12eHealthClass23readBloodPressureSensorEv+0x248>
     4f6:	0e 0d       	add	r16, r14
     4f8:	1f 1d       	adc	r17, r15
     4fa:	f8 01       	movw	r30, r16
     4fc:	87 af       	std	Z+63, r24	; 0x3f

				for (int i = 0; i<4; i++){ // CheckSum 1, WHICH ARE "FF F0 F1 F2"
					_buf[i] = Serial.read();
     4fe:	87 e0       	ldi	r24, 0x07	; 7
     500:	97 e0       	ldi	r25, 0x07	; 7
     502:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     506:	18 2f       	mov	r17, r24
     508:	87 e0       	ldi	r24, 0x07	; 7
     50a:	97 e0       	ldi	r25, 0x07	; 7
     50c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     510:	b8 2e       	mov	r11, r24
     512:	87 e0       	ldi	r24, 0x07	; 7
     514:	97 e0       	ldi	r25, 0x07	; 7
     516:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
     51a:	08 2f       	mov	r16, r24
     51c:	87 e0       	ldi	r24, 0x07	; 7
     51e:	97 e0       	ldi	r25, 0x07	; 7
     520:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
				}

				if(0xFF == _buf[0] && 0xF0 == _buf[1] && 0xF1 == _buf[2] && 0xF2 == _buf[3])
     524:	1f 3f       	cpi	r17, 0xFF	; 255
     526:	09 f0       	breq	.+2      	; 0x52a <_ZN12eHealthClass23readBloodPressureSensorEv+0x284>
     528:	2d cf       	rjmp	.-422    	; 0x384 <_ZN12eHealthClass23readBloodPressureSensorEv+0xde>
     52a:	21 cf       	rjmp	.-446    	; 0x36e <_ZN12eHealthClass23readBloodPressureSensorEv+0xc8>
     52c:	00 e0       	ldi	r16, 0x00	; 0
     52e:	10 e0       	ldi	r17, 0x00	; 0
				
			}


 			for (int i = 0; i<4; i++){ // CheckSum 2, WHICH ARE "D1 D2 D3 D4"
  				_buf[i] = Serial.read();
     530:	87 e0       	ldi	r24, 0x07	; 7
     532:	97 e0       	ldi	r25, 0x07	; 7
     534:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN14HardwareSerial4readEv>
				_data = Serial.peek(); 
				
			}


 			for (int i = 0; i<4; i++){ // CheckSum 2, WHICH ARE "D1 D2 D3 D4"
     538:	0f 5f       	subi	r16, 0xFF	; 255
     53a:	1f 4f       	sbci	r17, 0xFF	; 255
     53c:	04 30       	cpi	r16, 0x04	; 4
     53e:	11 05       	cpc	r17, r1
     540:	b9 f7       	brne	.-18     	; 0x530 <_ZN12eHealthClass23readBloodPressureSensorEv+0x28a>
				Serial.print(_buf[i],HEX);//yht
				Serial.print(F(" "));
 			}
			Serial.print(("\n"));	
#endif
			Serial.flush();	//flush all the data unread.		
     542:	87 e0       	ldi	r24, 0x07	; 7
     544:	97 e0       	ldi	r25, 0x07	; 7
     546:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN14HardwareSerial5flushEv>
		}
	}
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	cf 91       	pop	r28
     554:	df 91       	pop	r29
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	08 95       	ret

00000566 <_GLOBAL__I_eHealthLogo>:

//***************************************************************
// Preinstantiate Objects										*
//***************************************************************

	eHealthDisplayClass eHealthDisplay = eHealthDisplayClass();
     566:	08 95       	ret

00000568 <loop>:

void setup() {
   Serial.begin(19200); //115200
}

void loop() {
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	27 97       	sbiw	r28, 0x07	; 7
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61

  //READ BP DATA
  //Serial.write(0x0D);Serial.write(0x0A);
  Serial.print(F("\n==\nReading Starts...\n"));
     58c:	87 e0       	ldi	r24, 0x07	; 7
     58e:	97 e0       	ldi	r25, 0x07	; 7
     590:	6f e4       	ldi	r22, 0x4F	; 79
     592:	71 e0       	ldi	r23, 0x01	; 1
     594:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
  eHealth.readBloodPressureSensor();
     598:	84 e2       	ldi	r24, 0x24	; 36
     59a:	92 e0       	ldi	r25, 0x02	; 2
     59c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_ZN12eHealthClass23readBloodPressureSensorEv>
  Serial.print(F("\nReading Ends.\n"));
     5a0:	87 e0       	ldi	r24, 0x07	; 7
     5a2:	97 e0       	ldi	r25, 0x07	; 7
     5a4:	6f e3       	ldi	r22, 0x3F	; 63
     5a6:	71 e0       	ldi	r23, 0x01	; 1
     5a8:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>

  //PRINT BP DATA
  uint8_t numberOfData = eHealth.getBloodPressureLength();
     5ac:	84 e2       	ldi	r24, 0x24	; 36
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN12eHealthClass22getBloodPressureLengthEv>
     5b4:	18 2f       	mov	r17, r24
  Serial.print(F("Number of measures : "));
     5b6:	87 e0       	ldi	r24, 0x07	; 7
     5b8:	97 e0       	ldi	r25, 0x07	; 7
     5ba:	69 e2       	ldi	r22, 0x29	; 41
     5bc:	71 e0       	ldi	r23, 0x01	; 1
     5be:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(numberOfData, DEC);
     5c2:	87 e0       	ldi	r24, 0x07	; 7
     5c4:	97 e0       	ldi	r25, 0x07	; 7
     5c6:	61 2f       	mov	r22, r17
     5c8:	4a e0       	ldi	r20, 0x0A	; 10
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN5Print7printlnEhi>
  delay(200);
     5d0:	68 ec       	ldi	r22, 0xC8	; 200
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <delay>
     5dc:	8c e5       	ldi	r24, 0x5C	; 92
     5de:	e8 2e       	mov	r14, r24
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	f8 2e       	mov	r15, r24
     5e4:	cc 24       	eor	r12, r12
     5e6:	dd 24       	eor	r13, r13


  for (int i = 0; i<numberOfData; i++) {
     5e8:	a1 2e       	mov	r10, r17
     5ea:	bb 24       	eor	r11, r11
    Serial.println(i + 1);

    Serial.print(F("Date -> "));
    Serial.print(eHealth.bloodPressureDataVector[i].day);
    Serial.print(F(" of "));
    Serial.print(eHealth.numberToMonth(eHealth.bloodPressureDataVector[i].month));
     5ec:	8e 01       	movw	r16, r28
     5ee:	0f 5f       	subi	r16, 0xFF	; 255
     5f0:	1f 4f       	sbci	r17, 0xFF	; 255
     5f2:	c2 c0       	rjmp	.+388    	; 0x778 <loop+0x210>
  delay(200);


  for (int i = 0; i<numberOfData; i++) {
    // The protocol sends data in this order
    Serial.println(F("=========================================="));
     5f4:	87 e0       	ldi	r24, 0x07	; 7
     5f6:	97 e0       	ldi	r25, 0x07	; 7
     5f8:	6e ef       	ldi	r22, 0xFE	; 254
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_ZN5Print7printlnEPK19__FlashStringHelper>

    Serial.print(F("Measure number "));
     600:	87 e0       	ldi	r24, 0x07	; 7
     602:	97 e0       	ldi	r25, 0x07	; 7
     604:	6e ee       	ldi	r22, 0xEE	; 238
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(i + 1);
     60c:	08 94       	sec
     60e:	c1 1c       	adc	r12, r1
     610:	d1 1c       	adc	r13, r1
     612:	87 e0       	ldi	r24, 0x07	; 7
     614:	97 e0       	ldi	r25, 0x07	; 7
     616:	b6 01       	movw	r22, r12
     618:	4a e0       	ldi	r20, 0x0A	; 10
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	0e 94 7f 07 	call	0xefe	; 0xefe <_ZN5Print7printlnEii>

    Serial.print(F("Date -> "));
     620:	87 e0       	ldi	r24, 0x07	; 7
     622:	97 e0       	ldi	r25, 0x07	; 7
     624:	65 ee       	ldi	r22, 0xE5	; 229
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(eHealth.bloodPressureDataVector[i].day);
     62c:	87 e0       	ldi	r24, 0x07	; 7
     62e:	97 e0       	ldi	r25, 0x07	; 7
     630:	f7 01       	movw	r30, r14
     632:	62 81       	ldd	r22, Z+2	; 0x02
     634:	4a e0       	ldi	r20, 0x0A	; 10
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN5Print5printEhi>
    Serial.print(F(" of "));
     63c:	87 e0       	ldi	r24, 0x07	; 7
     63e:	97 e0       	ldi	r25, 0x07	; 7
     640:	60 ee       	ldi	r22, 0xE0	; 224
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(eHealth.numberToMonth(eHealth.bloodPressureDataVector[i].month));
     648:	f7 01       	movw	r30, r14
     64a:	41 81       	ldd	r20, Z+1	; 0x01
     64c:	c8 01       	movw	r24, r16
     64e:	64 e2       	ldi	r22, 0x24	; 36
     650:	72 e0       	ldi	r23, 0x02	; 2
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	0e 94 06 01 	call	0x20c	; 0x20c <_ZN12eHealthClass13numberToMonthEi>
     658:	87 e0       	ldi	r24, 0x07	; 7
     65a:	97 e0       	ldi	r25, 0x07	; 7
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_ZN5Print5printERK6String>
     662:	c8 01       	movw	r24, r16
     664:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN6StringD1Ev>
    Serial.print(F(" of "));
     668:	87 e0       	ldi	r24, 0x07	; 7
     66a:	97 e0       	ldi	r25, 0x07	; 7
     66c:	6b ed       	ldi	r22, 0xDB	; 219
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(2000 + eHealth.bloodPressureDataVector[i].year);
     674:	f7 01       	movw	r30, r14
     676:	60 81       	ld	r22, Z
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	60 53       	subi	r22, 0x30	; 48
     67c:	78 4f       	sbci	r23, 0xF8	; 248
     67e:	87 e0       	ldi	r24, 0x07	; 7
     680:	97 e0       	ldi	r25, 0x07	; 7
     682:	4a e0       	ldi	r20, 0x0A	; 10
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN5Print5printEii>
    Serial.print(F(" at "));
     68a:	87 e0       	ldi	r24, 0x07	; 7
     68c:	97 e0       	ldi	r25, 0x07	; 7
     68e:	66 ed       	ldi	r22, 0xD6	; 214
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>

    if (eHealth.bloodPressureDataVector[i].hour < 10) {
     696:	f7 01       	movw	r30, r14
     698:	83 81       	ldd	r24, Z+3	; 0x03
     69a:	8a 30       	cpi	r24, 0x0A	; 10
     69c:	40 f4       	brcc	.+16     	; 0x6ae <loop+0x146>
      Serial.print(0); // Only for best representation.
     69e:	87 e0       	ldi	r24, 0x07	; 7
     6a0:	97 e0       	ldi	r25, 0x07	; 7
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	4a e0       	ldi	r20, 0x0A	; 10
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN5Print5printEii>
    }

    Serial.print(eHealth.bloodPressureDataVector[i].hour);
     6ae:	87 e0       	ldi	r24, 0x07	; 7
     6b0:	97 e0       	ldi	r25, 0x07	; 7
     6b2:	f7 01       	movw	r30, r14
     6b4:	63 81       	ldd	r22, Z+3	; 0x03
     6b6:	4a e0       	ldi	r20, 0x0A	; 10
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN5Print5printEhi>
    Serial.print(F(":"));
     6be:	87 e0       	ldi	r24, 0x07	; 7
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	64 ed       	ldi	r22, 0xD4	; 212
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>

    if (eHealth.bloodPressureDataVector[i].minutes < 10) {
     6ca:	f7 01       	movw	r30, r14
     6cc:	84 81       	ldd	r24, Z+4	; 0x04
     6ce:	8a 30       	cpi	r24, 0x0A	; 10
     6d0:	40 f4       	brcc	.+16     	; 0x6e2 <loop+0x17a>
      Serial.print(0);// Only for best representation.
     6d2:	87 e0       	ldi	r24, 0x07	; 7
     6d4:	97 e0       	ldi	r25, 0x07	; 7
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	4a e0       	ldi	r20, 0x0A	; 10
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN5Print5printEii>
    }
    Serial.println(eHealth.bloodPressureDataVector[i].minutes);
     6e2:	87 e0       	ldi	r24, 0x07	; 7
     6e4:	97 e0       	ldi	r25, 0x07	; 7
     6e6:	f7 01       	movw	r30, r14
     6e8:	64 81       	ldd	r22, Z+4	; 0x04
     6ea:	4a e0       	ldi	r20, 0x0A	; 10
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN5Print7printlnEhi>

    Serial.print(F("Systolic value : "));
     6f2:	87 e0       	ldi	r24, 0x07	; 7
     6f4:	97 e0       	ldi	r25, 0x07	; 7
     6f6:	62 ec       	ldi	r22, 0xC2	; 194
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(30+eHealth.bloodPressureDataVector[i].systolic);
     6fe:	f7 01       	movw	r30, r14
     700:	65 81       	ldd	r22, Z+5	; 0x05
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	62 5e       	subi	r22, 0xE2	; 226
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	87 e0       	ldi	r24, 0x07	; 7
     70a:	97 e0       	ldi	r25, 0x07	; 7
     70c:	4a e0       	ldi	r20, 0x0A	; 10
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN5Print5printEii>
    Serial.println(F(" mmHg"));
     714:	87 e0       	ldi	r24, 0x07	; 7
     716:	97 e0       	ldi	r25, 0x07	; 7
     718:	6c eb       	ldi	r22, 0xBC	; 188
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_ZN5Print7printlnEPK19__FlashStringHelper>

    Serial.print(F("Diastolic value : "));
     720:	87 e0       	ldi	r24, 0x07	; 7
     722:	97 e0       	ldi	r25, 0x07	; 7
     724:	69 ea       	ldi	r22, 0xA9	; 169
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(eHealth.bloodPressureDataVector[i].diastolic);
     72c:	87 e0       	ldi	r24, 0x07	; 7
     72e:	97 e0       	ldi	r25, 0x07	; 7
     730:	f7 01       	movw	r30, r14
     732:	66 81       	ldd	r22, Z+6	; 0x06
     734:	4a e0       	ldi	r20, 0x0A	; 10
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN5Print5printEhi>
    Serial.println(F(" mmHg"));
     73c:	87 e0       	ldi	r24, 0x07	; 7
     73e:	97 e0       	ldi	r25, 0x07	; 7
     740:	63 ea       	ldi	r22, 0xA3	; 163
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_ZN5Print7printlnEPK19__FlashStringHelper>

    Serial.print(F("Pulse value : "));
     748:	87 e0       	ldi	r24, 0x07	; 7
     74a:	97 e0       	ldi	r25, 0x07	; 7
     74c:	64 e9       	ldi	r22, 0x94	; 148
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(eHealth.bloodPressureDataVector[i].pulse);
     754:	87 e0       	ldi	r24, 0x07	; 7
     756:	97 e0       	ldi	r25, 0x07	; 7
     758:	f7 01       	movw	r30, r14
     75a:	67 81       	ldd	r22, Z+7	; 0x07
     75c:	4a e0       	ldi	r20, 0x0A	; 10
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN5Print5printEhi>
    Serial.println(F(" bpm"));
     764:	87 e0       	ldi	r24, 0x07	; 7
     766:	97 e0       	ldi	r25, 0x07	; 7
     768:	6f e8       	ldi	r22, 0x8F	; 143
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_ZN5Print7printlnEPK19__FlashStringHelper>
     770:	88 e0       	ldi	r24, 0x08	; 8
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	e8 0e       	add	r14, r24
     776:	f9 1e       	adc	r15, r25
  Serial.print(F("Number of measures : "));
  Serial.println(numberOfData, DEC);
  delay(200);


  for (int i = 0; i<numberOfData; i++) {
     778:	ca 14       	cp	r12, r10
     77a:	db 04       	cpc	r13, r11
     77c:	0c f4       	brge	.+2      	; 0x780 <loop+0x218>
     77e:	3a cf       	rjmp	.-396    	; 0x5f4 <loop+0x8c>
    Serial.print(F("Pulse value : "));
    Serial.print(eHealth.bloodPressureDataVector[i].pulse);
    Serial.println(F(" bpm"));
  }

  delay(20000);
     780:	60 e2       	ldi	r22, 0x20	; 32
     782:	7e e4       	ldi	r23, 0x4E	; 78
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <delay>
}
     78c:	27 96       	adiw	r28, 0x07	; 7
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
     798:	cf 91       	pop	r28
     79a:	df 91       	pop	r29
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	08 95       	ret

000007ae <setup>:

#include "eHealth.h"
//#include <eHealthDisplay.h>

void setup() {
   Serial.begin(19200); //115200
     7ae:	87 e0       	ldi	r24, 0x07	; 7
     7b0:	97 e0       	ldi	r25, 0x07	; 7
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	5b e4       	ldi	r21, 0x4B	; 75
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN14HardwareSerial5beginEm>
}
     7be:	08 95       	ret

000007c0 <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     7c0:	08 95       	ret

000007c2 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
     7c2:	1f 92       	push	r1
     7c4:	0f 92       	push	r0
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	0f 92       	push	r0
     7ca:	11 24       	eor	r1, r1
     7cc:	2f 93       	push	r18
     7ce:	3f 93       	push	r19
     7d0:	4f 93       	push	r20
     7d2:	8f 93       	push	r24
     7d4:	9f 93       	push	r25
     7d6:	ef 93       	push	r30
     7d8:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
     7da:	80 91 c0 00 	lds	r24, 0x00C0
     7de:	82 fd       	sbrc	r24, 2
     7e0:	1c c0       	rjmp	.+56     	; 0x81a <__vector_18+0x58>
      unsigned char c = UDR0;
     7e2:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     7e6:	20 91 ff 05 	lds	r18, 0x05FF
     7ea:	30 91 00 06 	lds	r19, 0x0600

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     7ee:	2f 5f       	subi	r18, 0xFF	; 255
     7f0:	3f 4f       	sbci	r19, 0xFF	; 255
     7f2:	30 70       	andi	r19, 0x00	; 0
     7f4:	80 91 01 06 	lds	r24, 0x0601
     7f8:	90 91 02 06 	lds	r25, 0x0602
     7fc:	28 17       	cp	r18, r24
     7fe:	39 07       	cpc	r19, r25
     800:	71 f0       	breq	.+28     	; 0x81e <__vector_18+0x5c>
    buffer->buffer[buffer->head] = c;
     802:	e0 91 ff 05 	lds	r30, 0x05FF
     806:	f0 91 00 06 	lds	r31, 0x0600
     80a:	e1 50       	subi	r30, 0x01	; 1
     80c:	fb 4f       	sbci	r31, 0xFB	; 251
     80e:	40 83       	st	Z, r20
    buffer->head = i;
     810:	30 93 00 06 	sts	0x0600, r19
     814:	20 93 ff 05 	sts	0x05FF, r18
     818:	02 c0       	rjmp	.+4      	; 0x81e <__vector_18+0x5c>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
     81a:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	9f 91       	pop	r25
     824:	8f 91       	pop	r24
     826:	4f 91       	pop	r20
     828:	3f 91       	pop	r19
     82a:	2f 91       	pop	r18
     82c:	0f 90       	pop	r0
     82e:	0f be       	out	0x3f, r0	; 63
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     836:	e0 91 13 07 	lds	r30, 0x0713
     83a:	f0 91 14 07 	lds	r31, 0x0714
     83e:	e0 50       	subi	r30, 0x00	; 0
     840:	ff 4f       	sbci	r31, 0xFF	; 255
     842:	81 91       	ld	r24, Z+
     844:	91 91       	ld	r25, Z+
     846:	20 81       	ld	r18, Z
     848:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     84a:	80 50       	subi	r24, 0x00	; 0
     84c:	9f 4f       	sbci	r25, 0xFF	; 255
     84e:	82 17       	cp	r24, r18
     850:	11 f0       	breq	.+4      	; 0x856 <_Z14serialEventRunv+0x20>
     852:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z11serialEventv>
     856:	08 95       	ret

00000858 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     858:	1f 92       	push	r1
     85a:	0f 92       	push	r0
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	0f 92       	push	r0
     860:	11 24       	eor	r1, r1
     862:	2f 93       	push	r18
     864:	3f 93       	push	r19
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     86e:	20 91 03 07 	lds	r18, 0x0703
     872:	30 91 04 07 	lds	r19, 0x0704
     876:	80 91 05 07 	lds	r24, 0x0705
     87a:	90 91 06 07 	lds	r25, 0x0706
     87e:	28 17       	cp	r18, r24
     880:	39 07       	cpc	r19, r25
     882:	31 f4       	brne	.+12     	; 0x890 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     884:	80 91 c1 00 	lds	r24, 0x00C1
     888:	8f 7d       	andi	r24, 0xDF	; 223
     88a:	80 93 c1 00 	sts	0x00C1, r24
     88e:	13 c0       	rjmp	.+38     	; 0x8b6 <__vector_19+0x5e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     890:	e0 91 05 07 	lds	r30, 0x0705
     894:	f0 91 06 07 	lds	r31, 0x0706
     898:	ed 5f       	subi	r30, 0xFD	; 253
     89a:	f9 4f       	sbci	r31, 0xF9	; 249
     89c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     89e:	80 91 05 07 	lds	r24, 0x0705
     8a2:	90 91 06 07 	lds	r25, 0x0706
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	90 70       	andi	r25, 0x00	; 0
     8aa:	90 93 06 07 	sts	0x0706, r25
     8ae:	80 93 05 07 	sts	0x0705, r24
	
  #if defined(UDR0)
    UDR0 = c;
     8b2:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	9f 91       	pop	r25
     8bc:	8f 91       	pop	r24
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	0f 90       	pop	r0
     8c8:	1f 90       	pop	r1
     8ca:	18 95       	reti

000008cc <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
     8e0:	7a 01       	movw	r14, r20
     8e2:	8b 01       	movw	r16, r22
     8e4:	dd 24       	eor	r13, r13
     8e6:	40 30       	cpi	r20, 0x00	; 0
     8e8:	81 ee       	ldi	r24, 0xE1	; 225
     8ea:	58 07       	cpc	r21, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	68 07       	cpc	r22, r24
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	78 07       	cpc	r23, r24
     8f4:	11 f0       	breq	.+4      	; 0x8fa <_ZN14HardwareSerial5beginEm+0x2e>
     8f6:	dd 24       	eor	r13, r13
     8f8:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	a9 2e       	mov	r10, r25
     8fe:	b1 2c       	mov	r11, r1
     900:	ec 89       	ldd	r30, Y+20	; 0x14
     902:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     904:	dd 20       	and	r13, r13
     906:	69 f0       	breq	.+26     	; 0x922 <__stack+0x23>
    *_ucsra = 1 << _u2x;
     908:	c5 01       	movw	r24, r10
     90a:	08 a0       	ldd	r0, Y+32	; 0x20
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__stack+0x13>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	0a 94       	dec	r0
     914:	e2 f7       	brpl	.-8      	; 0x90e <__stack+0xf>
     916:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	79 e0       	ldi	r23, 0x09	; 9
     91c:	8d e3       	ldi	r24, 0x3D	; 61
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	05 c0       	rjmp	.+10     	; 0x92c <__stack+0x2d>
  } else {
    *_ucsra = 0;
     922:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     924:	60 e8       	ldi	r22, 0x80	; 128
     926:	74 e8       	ldi	r23, 0x84	; 132
     928:	8e e1       	ldi	r24, 0x1E	; 30
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	a8 01       	movw	r20, r16
     92e:	97 01       	movw	r18, r14
     930:	0e 94 3d 0c 	call	0x187a	; 0x187a <__udivmodsi4>
     934:	21 50       	subi	r18, 0x01	; 1
     936:	30 40       	sbci	r19, 0x00	; 0
     938:	40 40       	sbci	r20, 0x00	; 0
     93a:	50 40       	sbci	r21, 0x00	; 0
     93c:	56 95       	lsr	r21
     93e:	47 95       	ror	r20
     940:	37 95       	ror	r19
     942:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     944:	80 e1       	ldi	r24, 0x10	; 16
     946:	20 30       	cpi	r18, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	20 f0       	brcs	.+8      	; 0x954 <__stack+0x55>
     94c:	dd 20       	and	r13, r13
     94e:	11 f0       	breq	.+4      	; 0x954 <__stack+0x55>
     950:	dd 24       	eor	r13, r13
     952:	d6 cf       	rjmp	.-84     	; 0x900 <__stack+0x1>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     954:	e8 89       	ldd	r30, Y+16	; 0x10
     956:	f9 89       	ldd	r31, Y+17	; 0x11
     958:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     95a:	ea 89       	ldd	r30, Y+18	; 0x12
     95c:	fb 89       	ldd	r31, Y+19	; 0x13
     95e:	20 83       	st	Z, r18

  transmitting = false;
     960:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
     962:	ee 89       	ldd	r30, Y+22	; 0x16
     964:	ff 89       	ldd	r31, Y+23	; 0x17
     966:	40 81       	ld	r20, Z
     968:	21 e0       	ldi	r18, 0x01	; 1
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	c9 01       	movw	r24, r18
     96e:	0c 8c       	ldd	r0, Y+28	; 0x1c
     970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	0a 94       	dec	r0
     978:	e2 f7       	brpl	.-8      	; 0x972 <__stack+0x73>
     97a:	48 2b       	or	r20, r24
     97c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     97e:	ee 89       	ldd	r30, Y+22	; 0x16
     980:	ff 89       	ldd	r31, Y+23	; 0x17
     982:	40 81       	ld	r20, Z
     984:	c9 01       	movw	r24, r18
     986:	0d 8c       	ldd	r0, Y+29	; 0x1d
     988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	0a 94       	dec	r0
     990:	e2 f7       	brpl	.-8      	; 0x98a <__stack+0x8b>
     992:	48 2b       	or	r20, r24
     994:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     996:	ee 89       	ldd	r30, Y+22	; 0x16
     998:	ff 89       	ldd	r31, Y+23	; 0x17
     99a:	40 81       	ld	r20, Z
     99c:	c9 01       	movw	r24, r18
     99e:	0e 8c       	ldd	r0, Y+30	; 0x1e
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0xa7>
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	0a 94       	dec	r0
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <__stack+0xa3>
     9aa:	48 2b       	or	r20, r24
     9ac:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     9ae:	ee 89       	ldd	r30, Y+22	; 0x16
     9b0:	ff 89       	ldd	r31, Y+23	; 0x17
     9b2:	80 81       	ld	r24, Z
     9b4:	0f 8c       	ldd	r0, Y+31	; 0x1f
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <__stack+0xbd>
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	0a 94       	dec	r0
     9be:	e2 f7       	brpl	.-8      	; 0x9b8 <__stack+0xb9>
     9c0:	20 95       	com	r18
     9c2:	28 23       	and	r18, r24
     9c4:	20 83       	st	Z, r18
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	bf 90       	pop	r11
     9d6:	af 90       	pop	r10
     9d8:	08 95       	ret

000009da <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     9da:	dc 01       	movw	r26, r24
     9dc:	1c 96       	adiw	r26, 0x0c	; 12
     9de:	ed 91       	ld	r30, X+
     9e0:	fc 91       	ld	r31, X
     9e2:	1d 97       	sbiw	r26, 0x0d	; 13
     9e4:	e0 50       	subi	r30, 0x00	; 0
     9e6:	ff 4f       	sbci	r31, 0xFF	; 255
     9e8:	21 91       	ld	r18, Z+
     9ea:	31 91       	ld	r19, Z+
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	20 50       	subi	r18, 0x00	; 0
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	28 1b       	sub	r18, r24
     9f6:	39 0b       	sbc	r19, r25
     9f8:	30 70       	andi	r19, 0x00	; 0
}
     9fa:	c9 01       	movw	r24, r18
     9fc:	08 95       	ret

000009fe <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     9fe:	dc 01       	movw	r26, r24
     a00:	1c 96       	adiw	r26, 0x0c	; 12
     a02:	ed 91       	ld	r30, X+
     a04:	fc 91       	ld	r31, X
     a06:	1d 97       	sbiw	r26, 0x0d	; 13
     a08:	e0 50       	subi	r30, 0x00	; 0
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	20 81       	ld	r18, Z
     a0e:	31 81       	ldd	r19, Z+1	; 0x01
     a10:	e0 50       	subi	r30, 0x00	; 0
     a12:	f1 40       	sbci	r31, 0x01	; 1
     a14:	df 01       	movw	r26, r30
     a16:	ae 5f       	subi	r26, 0xFE	; 254
     a18:	be 4f       	sbci	r27, 0xFE	; 254
     a1a:	8d 91       	ld	r24, X+
     a1c:	9c 91       	ld	r25, X
     a1e:	11 97       	sbiw	r26, 0x01	; 1
     a20:	28 17       	cp	r18, r24
     a22:	39 07       	cpc	r19, r25
     a24:	19 f4       	brne	.+6      	; 0xa2c <_ZN14HardwareSerial4peekEv+0x2e>
     a26:	2f ef       	ldi	r18, 0xFF	; 255
     a28:	3f ef       	ldi	r19, 0xFF	; 255
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     a2c:	8d 91       	ld	r24, X+
     a2e:	9c 91       	ld	r25, X
     a30:	e8 0f       	add	r30, r24
     a32:	f9 1f       	adc	r31, r25
     a34:	80 81       	ld	r24, Z
     a36:	28 2f       	mov	r18, r24
     a38:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     a3a:	c9 01       	movw	r24, r18
     a3c:	08 95       	ret

00000a3e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     a3e:	dc 01       	movw	r26, r24
     a40:	1c 96       	adiw	r26, 0x0c	; 12
     a42:	ed 91       	ld	r30, X+
     a44:	fc 91       	ld	r31, X
     a46:	1d 97       	sbiw	r26, 0x0d	; 13
     a48:	e0 50       	subi	r30, 0x00	; 0
     a4a:	ff 4f       	sbci	r31, 0xFF	; 255
     a4c:	20 81       	ld	r18, Z
     a4e:	31 81       	ldd	r19, Z+1	; 0x01
     a50:	e0 50       	subi	r30, 0x00	; 0
     a52:	f1 40       	sbci	r31, 0x01	; 1
     a54:	df 01       	movw	r26, r30
     a56:	ae 5f       	subi	r26, 0xFE	; 254
     a58:	be 4f       	sbci	r27, 0xFE	; 254
     a5a:	8d 91       	ld	r24, X+
     a5c:	9c 91       	ld	r25, X
     a5e:	11 97       	sbiw	r26, 0x01	; 1
     a60:	28 17       	cp	r18, r24
     a62:	39 07       	cpc	r19, r25
     a64:	19 f4       	brne	.+6      	; 0xa6c <_ZN14HardwareSerial4readEv+0x2e>
     a66:	2f ef       	ldi	r18, 0xFF	; 255
     a68:	3f ef       	ldi	r19, 0xFF	; 255
     a6a:	0f c0       	rjmp	.+30     	; 0xa8a <_ZN14HardwareSerial4readEv+0x4c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     a6c:	8d 91       	ld	r24, X+
     a6e:	9c 91       	ld	r25, X
     a70:	11 97       	sbiw	r26, 0x01	; 1
     a72:	e8 0f       	add	r30, r24
     a74:	f9 1f       	adc	r31, r25
     a76:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     a78:	8d 91       	ld	r24, X+
     a7a:	9c 91       	ld	r25, X
     a7c:	11 97       	sbiw	r26, 0x01	; 1
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	90 70       	andi	r25, 0x00	; 0
     a82:	11 96       	adiw	r26, 0x01	; 1
     a84:	9c 93       	st	X, r25
     a86:	8e 93       	st	-X, r24
    return c;
     a88:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     a8a:	c9 01       	movw	r24, r18
     a8c:	08 95       	ret

00000a8e <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
     a8e:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
     a90:	91 96       	adiw	r26, 0x21	; 33
     a92:	8c 91       	ld	r24, X
     a94:	91 97       	sbiw	r26, 0x21	; 33
     a96:	88 23       	and	r24, r24
     a98:	39 f0       	breq	.+14     	; 0xaa8 <_ZN14HardwareSerial5flushEv+0x1a>
     a9a:	54 96       	adiw	r26, 0x14	; 20
     a9c:	ed 91       	ld	r30, X+
     a9e:	fc 91       	ld	r31, X
     aa0:	55 97       	sbiw	r26, 0x15	; 21
     aa2:	80 81       	ld	r24, Z
     aa4:	86 ff       	sbrs	r24, 6
     aa6:	f9 cf       	rjmp	.-14     	; 0xa9a <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
     aa8:	91 96       	adiw	r26, 0x21	; 33
     aaa:	1c 92       	st	X, r1
}
     aac:	08 95       	ret

00000aae <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     ab4:	ee 85       	ldd	r30, Y+14	; 0x0e
     ab6:	ff 85       	ldd	r31, Y+15	; 0x0f
     ab8:	e0 50       	subi	r30, 0x00	; 0
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	20 81       	ld	r18, Z
     abe:	31 81       	ldd	r19, Z+1	; 0x01
     ac0:	e0 50       	subi	r30, 0x00	; 0
     ac2:	f1 40       	sbci	r31, 0x01	; 1
     ac4:	2f 5f       	subi	r18, 0xFF	; 255
     ac6:	3f 4f       	sbci	r19, 0xFF	; 255
     ac8:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     aca:	df 01       	movw	r26, r30
     acc:	ae 5f       	subi	r26, 0xFE	; 254
     ace:	be 4f       	sbci	r27, 0xFE	; 254
     ad0:	8d 91       	ld	r24, X+
     ad2:	9c 91       	ld	r25, X
     ad4:	11 97       	sbiw	r26, 0x01	; 1
     ad6:	28 17       	cp	r18, r24
     ad8:	39 07       	cpc	r19, r25
     ada:	d1 f3       	breq	.-12     	; 0xad0 <_ZN14HardwareSerial5writeEh+0x22>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     adc:	e0 50       	subi	r30, 0x00	; 0
     ade:	ff 4f       	sbci	r31, 0xFF	; 255
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	e0 50       	subi	r30, 0x00	; 0
     ae6:	f1 40       	sbci	r31, 0x01	; 1
     ae8:	e8 0f       	add	r30, r24
     aea:	f9 1f       	adc	r31, r25
     aec:	60 83       	st	Z, r22
  _tx_buffer->head = i;
     aee:	ee 85       	ldd	r30, Y+14	; 0x0e
     af0:	ff 85       	ldd	r31, Y+15	; 0x0f
     af2:	e0 50       	subi	r30, 0x00	; 0
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	31 83       	std	Z+1, r19	; 0x01
     af8:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     afa:	ee 89       	ldd	r30, Y+22	; 0x16
     afc:	ff 89       	ldd	r31, Y+23	; 0x17
     afe:	20 81       	ld	r18, Z
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0f 8c       	ldd	r0, Y+31	; 0x1f
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <_ZN14HardwareSerial5writeEh+0x5e>
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	0a 94       	dec	r0
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <_ZN14HardwareSerial5writeEh+0x5a>
     b10:	28 2b       	or	r18, r24
     b12:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
     b18:	ec 89       	ldd	r30, Y+20	; 0x14
     b1a:	fd 89       	ldd	r31, Y+21	; 0x15
     b1c:	80 81       	ld	r24, Z
     b1e:	80 64       	ori	r24, 0x40	; 64
     b20:	80 83       	st	Z, r24
  
  return 1;
}
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b2c:	10 92 0a 07 	sts	0x070A, r1
     b30:	10 92 09 07 	sts	0x0709, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     b34:	88 ee       	ldi	r24, 0xE8	; 232
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	a0 e0       	ldi	r26, 0x00	; 0
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	80 93 0b 07 	sts	0x070B, r24
     b40:	90 93 0c 07 	sts	0x070C, r25
     b44:	a0 93 0d 07 	sts	0x070D, r26
     b48:	b0 93 0e 07 	sts	0x070E, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     b4c:	88 e1       	ldi	r24, 0x18	; 24
     b4e:	92 e0       	ldi	r25, 0x02	; 2
     b50:	90 93 08 07 	sts	0x0708, r25
     b54:	80 93 07 07 	sts	0x0707, r24
{
  _rx_buffer = rx_buffer;
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	94 e0       	ldi	r25, 0x04	; 4
     b5c:	90 93 14 07 	sts	0x0714, r25
     b60:	80 93 13 07 	sts	0x0713, r24
  _tx_buffer = tx_buffer;
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	96 e0       	ldi	r25, 0x06	; 6
     b68:	90 93 16 07 	sts	0x0716, r25
     b6c:	80 93 15 07 	sts	0x0715, r24
  _ubrrh = ubrrh;
     b70:	85 ec       	ldi	r24, 0xC5	; 197
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	90 93 18 07 	sts	0x0718, r25
     b78:	80 93 17 07 	sts	0x0717, r24
  _ubrrl = ubrrl;
     b7c:	84 ec       	ldi	r24, 0xC4	; 196
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	90 93 1a 07 	sts	0x071A, r25
     b84:	80 93 19 07 	sts	0x0719, r24
  _ucsra = ucsra;
     b88:	80 ec       	ldi	r24, 0xC0	; 192
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	90 93 1c 07 	sts	0x071C, r25
     b90:	80 93 1b 07 	sts	0x071B, r24
  _ucsrb = ucsrb;
     b94:	81 ec       	ldi	r24, 0xC1	; 193
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	90 93 1e 07 	sts	0x071E, r25
     b9c:	80 93 1d 07 	sts	0x071D, r24
  _ucsrc = ucsrc;
     ba0:	82 ec       	ldi	r24, 0xC2	; 194
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	90 93 20 07 	sts	0x0720, r25
     ba8:	80 93 1f 07 	sts	0x071F, r24
  _udr = udr;
     bac:	86 ec       	ldi	r24, 0xC6	; 198
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	90 93 22 07 	sts	0x0722, r25
     bb4:	80 93 21 07 	sts	0x0721, r24
  _rxen = rxen;
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	80 93 23 07 	sts	0x0723, r24
  _txen = txen;
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	80 93 24 07 	sts	0x0724, r24
  _rxcie = rxcie;
     bc4:	87 e0       	ldi	r24, 0x07	; 7
     bc6:	80 93 25 07 	sts	0x0725, r24
  _udrie = udrie;
     bca:	85 e0       	ldi	r24, 0x05	; 5
     bcc:	80 93 26 07 	sts	0x0726, r24
  _u2x = u2x;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 27 07 	sts	0x0727, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     bd6:	08 95       	ret

00000bd8 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	7c 01       	movw	r14, r24
     bea:	6b 01       	movw	r12, r22
     bec:	8a 01       	movw	r16, r20
     bee:	c0 e0       	ldi	r28, 0x00	; 0
     bf0:	d0 e0       	ldi	r29, 0x00	; 0
     bf2:	0f c0       	rjmp	.+30     	; 0xc12 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
     bf4:	d6 01       	movw	r26, r12
     bf6:	6d 91       	ld	r22, X+
     bf8:	6d 01       	movw	r12, r26
     bfa:	d7 01       	movw	r26, r14
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	01 90       	ld	r0, Z+
     c02:	f0 81       	ld	r31, Z
     c04:	e0 2d       	mov	r30, r0
     c06:	c7 01       	movw	r24, r14
     c08:	09 95       	icall
     c0a:	c8 0f       	add	r28, r24
     c0c:	d9 1f       	adc	r29, r25
     c0e:	01 50       	subi	r16, 0x01	; 1
     c10:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     c12:	01 15       	cp	r16, r1
     c14:	11 05       	cpc	r17, r1
     c16:	71 f7       	brne	.-36     	; 0xbf4 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     c18:	ce 01       	movw	r24, r28
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	08 95       	ret

00000c2c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
     c3a:	8b 01       	movw	r16, r22
     c3c:	c0 e0       	ldi	r28, 0x00	; 0
     c3e:	d0 e0       	ldi	r29, 0x00	; 0
     c40:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     c42:	0f 5f       	subi	r16, 0xFF	; 255
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	64 91       	lpm	r22, Z+
    if (c == 0) break;
     c48:	66 23       	and	r22, r22
     c4a:	59 f0       	breq	.+22     	; 0xc62 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
     c4c:	d7 01       	movw	r26, r14
     c4e:	ed 91       	ld	r30, X+
     c50:	fc 91       	ld	r31, X
     c52:	01 90       	ld	r0, Z+
     c54:	f0 81       	ld	r31, Z
     c56:	e0 2d       	mov	r30, r0
     c58:	c7 01       	movw	r24, r14
     c5a:	09 95       	icall
     c5c:	c8 0f       	add	r28, r24
     c5e:	d9 1f       	adc	r29, r25
     c60:	ef cf       	rjmp	.-34     	; 0xc40 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
     c62:	ce 01       	movw	r24, r28
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	08 95       	ret

00000c72 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     c7c:	dc 01       	movw	r26, r24
     c7e:	ed 91       	ld	r30, X+
     c80:	fc 91       	ld	r31, X
     c82:	01 90       	ld	r0, Z+
     c84:	f0 81       	ld	r31, Z
     c86:	e0 2d       	mov	r30, r0
     c88:	6d e0       	ldi	r22, 0x0D	; 13
     c8a:	09 95       	icall
     c8c:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
     c8e:	d8 01       	movw	r26, r16
     c90:	ed 91       	ld	r30, X+
     c92:	fc 91       	ld	r31, X
     c94:	01 90       	ld	r0, Z+
     c96:	f0 81       	ld	r31, Z
     c98:	e0 2d       	mov	r30, r0
     c9a:	c8 01       	movw	r24, r16
     c9c:	6a e0       	ldi	r22, 0x0A	; 10
     c9e:	09 95       	icall
     ca0:	9c 01       	movw	r18, r24
     ca2:	2e 0d       	add	r18, r14
     ca4:	3f 1d       	adc	r19, r15
     ca6:	c9 01       	movw	r24, r18
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	08 95       	ret

00000cb2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
     cbc:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPK19__FlashStringHelper>
     cc0:	8c 01       	movw	r16, r24
  n += println();
     cc2:	c7 01       	movw	r24, r14
     cc4:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN5Print7printlnEv>
     cc8:	9c 01       	movw	r18, r24
     cca:	20 0f       	add	r18, r16
     ccc:	31 1f       	adc	r19, r17
  return n;
}
     cce:	c9 01       	movw	r24, r18
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	08 95       	ret

00000cda <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
     ce0:	61 15       	cp	r22, r1
     ce2:	71 05       	cpc	r23, r1
     ce4:	19 f4       	brne	.+6      	; 0xcec <_ZN5Print5writeEPKc+0x12>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	0f c0       	rjmp	.+30     	; 0xd0a <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
     cec:	db 01       	movw	r26, r22
     cee:	0d 90       	ld	r0, X+
     cf0:	00 20       	and	r0, r0
     cf2:	e9 f7       	brne	.-6      	; 0xcee <_ZN5Print5writeEPKc+0x14>
     cf4:	11 97       	sbiw	r26, 0x01	; 1
     cf6:	a6 1b       	sub	r26, r22
     cf8:	b7 0b       	sbc	r27, r23
     cfa:	e8 81       	ld	r30, Y
     cfc:	f9 81       	ldd	r31, Y+1	; 0x01
     cfe:	02 80       	ldd	r0, Z+2	; 0x02
     d00:	f3 81       	ldd	r31, Z+3	; 0x03
     d02:	e0 2d       	mov	r30, r0
     d04:	ad 01       	movw	r20, r26
     d06:	09 95       	icall
     d08:	9c 01       	movw	r18, r24
    }
     d0a:	c9 01       	movw	r24, r18
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     d12:	4f 92       	push	r4
     d14:	5f 92       	push	r5
     d16:	7f 92       	push	r7
     d18:	8f 92       	push	r8
     d1a:	9f 92       	push	r9
     d1c:	af 92       	push	r10
     d1e:	bf 92       	push	r11
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	a1 97       	sbiw	r28, 0x21	; 33
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	2c 01       	movw	r4, r24
     d42:	74 2e       	mov	r7, r20
     d44:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     d46:	22 30       	cpi	r18, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <_ZN5Print11printNumberEmh+0x3a>
     d4a:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     d4c:	19 a2       	std	Y+33, r1	; 0x21
     d4e:	31 e2       	ldi	r19, 0x21	; 33
     d50:	c3 2e       	mov	r12, r19
     d52:	d1 2c       	mov	r13, r1
     d54:	cc 0e       	add	r12, r28
     d56:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     d58:	82 2e       	mov	r8, r18
     d5a:	99 24       	eor	r9, r9
     d5c:	aa 24       	eor	r10, r10
     d5e:	bb 24       	eor	r11, r11
     d60:	67 2d       	mov	r22, r7
     d62:	75 2f       	mov	r23, r21
     d64:	a5 01       	movw	r20, r10
     d66:	94 01       	movw	r18, r8
     d68:	0e 94 3d 0c 	call	0x187a	; 0x187a <__udivmodsi4>
     d6c:	79 01       	movw	r14, r18
     d6e:	8a 01       	movw	r16, r20
    char c = m - base * n;
     d70:	c8 01       	movw	r24, r16
     d72:	b7 01       	movw	r22, r14
     d74:	a5 01       	movw	r20, r10
     d76:	94 01       	movw	r18, r8
     d78:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsi3>
     d7c:	47 2d       	mov	r20, r7
     d7e:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     d80:	08 94       	sec
     d82:	c1 08       	sbc	r12, r1
     d84:	d1 08       	sbc	r13, r1
     d86:	4a 30       	cpi	r20, 0x0A	; 10
     d88:	14 f4       	brge	.+4      	; 0xd8e <_ZN5Print11printNumberEmh+0x7c>
     d8a:	40 5d       	subi	r20, 0xD0	; 208
     d8c:	01 c0       	rjmp	.+2      	; 0xd90 <_ZN5Print11printNumberEmh+0x7e>
     d8e:	49 5c       	subi	r20, 0xC9	; 201
     d90:	f6 01       	movw	r30, r12
     d92:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     d94:	e1 14       	cp	r14, r1
     d96:	f1 04       	cpc	r15, r1
     d98:	01 05       	cpc	r16, r1
     d9a:	11 05       	cpc	r17, r1
     d9c:	21 f0       	breq	.+8      	; 0xda6 <_ZN5Print11printNumberEmh+0x94>
     d9e:	7e 2c       	mov	r7, r14
     da0:	5f 2d       	mov	r21, r15
     da2:	c8 01       	movw	r24, r16
     da4:	dd cf       	rjmp	.-70     	; 0xd60 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     da6:	c2 01       	movw	r24, r4
     da8:	b6 01       	movw	r22, r12
     daa:	0e 94 6d 06 	call	0xcda	; 0xcda <_ZN5Print5writeEPKc>
}
     dae:	a1 96       	adiw	r28, 0x21	; 33
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	bf 90       	pop	r11
     dcc:	af 90       	pop	r10
     dce:	9f 90       	pop	r9
     dd0:	8f 90       	pop	r8
     dd2:	7f 90       	pop	r7
     dd4:	5f 90       	pop	r5
     dd6:	4f 90       	pop	r4
     dd8:	08 95       	ret

00000dda <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
     dda:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
     ddc:	21 15       	cp	r18, r1
     dde:	31 05       	cpc	r19, r1
     de0:	41 f4       	brne	.+16     	; 0xdf2 <_ZN5Print5printEmi+0x18>
     de2:	ed 91       	ld	r30, X+
     de4:	fc 91       	ld	r31, X
     de6:	01 90       	ld	r0, Z+
     de8:	f0 81       	ld	r31, Z
     dea:	e0 2d       	mov	r30, r0
     dec:	64 2f       	mov	r22, r20
     dee:	09 95       	icall
     df0:	08 95       	ret
  else return printNumber(n, base);
     df2:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN5Print11printNumberEmh>
}
     df6:	08 95       	ret

00000df8 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
     e02:	e6 2e       	mov	r14, r22
     e04:	ff 24       	eor	r15, r15
     e06:	00 e0       	ldi	r16, 0x00	; 0
     e08:	10 e0       	ldi	r17, 0x00	; 0
     e0a:	b8 01       	movw	r22, r16
     e0c:	a7 01       	movw	r20, r14
     e0e:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print5printEmi>
}
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	08 95       	ret

00000e1c <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
     e1c:	cf 92       	push	r12
     e1e:	df 92       	push	r13
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	6c 01       	movw	r12, r24
     e2a:	e6 2e       	mov	r14, r22
     e2c:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     e2e:	ff 24       	eor	r15, r15
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	b8 01       	movw	r22, r16
     e36:	a7 01       	movw	r20, r14
     e38:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN5Print5printEmi>
     e3c:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
     e3e:	c6 01       	movw	r24, r12
     e40:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN5Print7printlnEv>
     e44:	08 0f       	add	r16, r24
     e46:	19 1f       	adc	r17, r25
  return n;
}
     e48:	c8 01       	movw	r24, r16
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	cf 90       	pop	r12
     e56:	08 95       	ret

00000e58 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	ec 01       	movw	r28, r24
     e6a:	6a 01       	movw	r12, r20
     e6c:	7b 01       	movw	r14, r22
{
  if (base == 0) {
     e6e:	21 15       	cp	r18, r1
     e70:	31 05       	cpc	r19, r1
     e72:	41 f4       	brne	.+16     	; 0xe84 <_ZN5Print5printEli+0x2c>
    return write(n);
     e74:	e8 81       	ld	r30, Y
     e76:	f9 81       	ldd	r31, Y+1	; 0x01
     e78:	01 90       	ld	r0, Z+
     e7a:	f0 81       	ld	r31, Z
     e7c:	e0 2d       	mov	r30, r0
     e7e:	64 2f       	mov	r22, r20
     e80:	09 95       	icall
     e82:	1f c0       	rjmp	.+62     	; 0xec2 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
     e84:	2a 30       	cpi	r18, 0x0A	; 10
     e86:	31 05       	cpc	r19, r1
     e88:	d1 f4       	brne	.+52     	; 0xebe <_ZN5Print5printEli+0x66>
    if (n < 0) {
     e8a:	77 ff       	sbrs	r23, 7
     e8c:	17 c0       	rjmp	.+46     	; 0xebc <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     e8e:	e8 81       	ld	r30, Y
     e90:	f9 81       	ldd	r31, Y+1	; 0x01
     e92:	01 90       	ld	r0, Z+
     e94:	f0 81       	ld	r31, Z
     e96:	e0 2d       	mov	r30, r0
     e98:	6d e2       	ldi	r22, 0x2D	; 45
     e9a:	09 95       	icall
     e9c:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
     e9e:	44 27       	eor	r20, r20
     ea0:	55 27       	eor	r21, r21
     ea2:	ba 01       	movw	r22, r20
     ea4:	4c 19       	sub	r20, r12
     ea6:	5d 09       	sbc	r21, r13
     ea8:	6e 09       	sbc	r22, r14
     eaa:	7f 09       	sbc	r23, r15
     eac:	ce 01       	movw	r24, r28
     eae:	2a e0       	ldi	r18, 0x0A	; 10
     eb0:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN5Print11printNumberEmh>
     eb4:	98 01       	movw	r18, r16
     eb6:	28 0f       	add	r18, r24
     eb8:	39 1f       	adc	r19, r25
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
     ebc:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
     ebe:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN5Print11printNumberEmh>
     ec2:	9c 01       	movw	r18, r24
  }
}
     ec4:	c9 01       	movw	r24, r18
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	08 95       	ret

00000ed8 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	7b 01       	movw	r14, r22
     ee2:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
     ee4:	00 27       	eor	r16, r16
     ee6:	f7 fc       	sbrc	r15, 7
     ee8:	00 95       	com	r16
     eea:	10 2f       	mov	r17, r16
     eec:	b8 01       	movw	r22, r16
     eee:	a7 01       	movw	r20, r14
     ef0:	0e 94 2c 07 	call	0xe58	; 0xe58 <_ZN5Print5printEli>
}
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	08 95       	ret

00000efe <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	6c 01       	movw	r12, r24
     f0c:	7b 01       	movw	r14, r22
     f0e:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     f10:	00 27       	eor	r16, r16
     f12:	f7 fc       	sbrc	r15, 7
     f14:	00 95       	com	r16
     f16:	10 2f       	mov	r17, r16
     f18:	b8 01       	movw	r22, r16
     f1a:	a7 01       	movw	r20, r14
     f1c:	0e 94 2c 07 	call	0xe58	; 0xe58 <_ZN5Print5printEli>
     f20:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
     f22:	c6 01       	movw	r24, r12
     f24:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN5Print7printlnEv>
     f28:	08 0f       	add	r16, r24
     f2a:	19 1f       	adc	r17, r25
  return n;
}
     f2c:	c8 01       	movw	r24, r16
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	08 95       	ret

00000f3c <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
     f3c:	af 92       	push	r10
     f3e:	bf 92       	push	r11
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	5c 01       	movw	r10, r24
     f52:	6b 01       	movw	r12, r22
     f54:	ee 24       	eor	r14, r14
     f56:	ff 24       	eor	r15, r15
     f58:	c0 e0       	ldi	r28, 0x00	; 0
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
     f5c:	10 c0       	rjmp	.+32     	; 0xf7e <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
     f5e:	d5 01       	movw	r26, r10
     f60:	ed 91       	ld	r30, X+
     f62:	fc 91       	ld	r31, X
     f64:	00 81       	ld	r16, Z
     f66:	11 81       	ldd	r17, Z+1	; 0x01
     f68:	c6 01       	movw	r24, r12
     f6a:	be 01       	movw	r22, r28
     f6c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZNK6StringixEj>
     f70:	68 2f       	mov	r22, r24
     f72:	c5 01       	movw	r24, r10
     f74:	f8 01       	movw	r30, r16
     f76:	09 95       	icall
     f78:	e8 0e       	add	r14, r24
     f7a:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
     f7c:	21 96       	adiw	r28, 0x01	; 1
     f7e:	f6 01       	movw	r30, r12
     f80:	84 81       	ldd	r24, Z+4	; 0x04
     f82:	95 81       	ldd	r25, Z+5	; 0x05
     f84:	c8 17       	cp	r28, r24
     f86:	d9 07       	cpc	r29, r25
     f88:	50 f3       	brcs	.-44     	; 0xf5e <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
     f8a:	c7 01       	movw	r24, r14
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	08 95       	ret

00000fa2 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ec 01       	movw	r28, r24
{
  int c;
  _startMillis = millis();
     fa8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <millis>
     fac:	68 87       	std	Y+8, r22	; 0x08
     fae:	79 87       	std	Y+9, r23	; 0x09
     fb0:	8a 87       	std	Y+10, r24	; 0x0a
     fb2:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = read();
     fb4:	e8 81       	ld	r30, Y
     fb6:	f9 81       	ldd	r31, Y+1	; 0x01
     fb8:	06 80       	ldd	r0, Z+6	; 0x06
     fba:	f7 81       	ldd	r31, Z+7	; 0x07
     fbc:	e0 2d       	mov	r30, r0
     fbe:	ce 01       	movw	r24, r28
     fc0:	09 95       	icall
     fc2:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
     fc4:	97 ff       	sbrs	r25, 7
     fc6:	15 c0       	rjmp	.+42     	; 0xff2 <_ZN6Stream9timedReadEv+0x50>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
     fc8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <millis>
     fcc:	28 85       	ldd	r18, Y+8	; 0x08
     fce:	39 85       	ldd	r19, Y+9	; 0x09
     fd0:	4a 85       	ldd	r20, Y+10	; 0x0a
     fd2:	5b 85       	ldd	r21, Y+11	; 0x0b
     fd4:	62 1b       	sub	r22, r18
     fd6:	73 0b       	sbc	r23, r19
     fd8:	84 0b       	sbc	r24, r20
     fda:	95 0b       	sbc	r25, r21
     fdc:	2c 81       	ldd	r18, Y+4	; 0x04
     fde:	3d 81       	ldd	r19, Y+5	; 0x05
     fe0:	4e 81       	ldd	r20, Y+6	; 0x06
     fe2:	5f 81       	ldd	r21, Y+7	; 0x07
     fe4:	62 17       	cp	r22, r18
     fe6:	73 07       	cpc	r23, r19
     fe8:	84 07       	cpc	r24, r20
     fea:	95 07       	cpc	r25, r21
     fec:	18 f3       	brcs	.-58     	; 0xfb4 <_ZN6Stream9timedReadEv+0x12>
     fee:	2f ef       	ldi	r18, 0xFF	; 255
     ff0:	3f ef       	ldi	r19, 0xFF	; 255
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
     ff2:	c9 01       	movw	r24, r18
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <_ZN6Stream9findUntilEPcjS0_j>:
}

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
     ffa:	6f 92       	push	r6
     ffc:	7f 92       	push	r7
     ffe:	8f 92       	push	r8
    1000:	9f 92       	push	r9
    1002:	af 92       	push	r10
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	3c 01       	movw	r6, r24
    1018:	7b 01       	movw	r14, r22
    101a:	4a 01       	movw	r8, r20
    101c:	59 01       	movw	r10, r18
    101e:	68 01       	movw	r12, r16
{
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    1020:	fb 01       	movw	r30, r22
    1022:	80 81       	ld	r24, Z
    1024:	88 23       	and	r24, r24
    1026:	d1 f1       	breq	.+116    	; 0x109c <_ZN6Stream9findUntilEPcjS0_j+0xa2>
    1028:	c0 e0       	ldi	r28, 0x00	; 0
    102a:	d0 e0       	ldi	r29, 0x00	; 0
    102c:	2d c0       	rjmp	.+90     	; 0x1088 <_ZN6Stream9findUntilEPcjS0_j+0x8e>
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
    102e:	f7 01       	movw	r30, r14
    1030:	ec 0f       	add	r30, r28
    1032:	fd 1f       	adc	r31, r29
    1034:	80 81       	ld	r24, Z
    1036:	99 27       	eor	r25, r25
    1038:	87 fd       	sbrc	r24, 7
    103a:	90 95       	com	r25
    103c:	28 17       	cp	r18, r24
    103e:	39 07       	cpc	r19, r25
    1040:	11 f0       	breq	.+4      	; 0x1046 <_ZN6Stream9findUntilEPcjS0_j+0x4c>
    1042:	c0 e0       	ldi	r28, 0x00	; 0
    1044:	d0 e0       	ldi	r29, 0x00	; 0
      index = 0; // reset index if any char does not match
    
    if( c == target[index]){
    1046:	f7 01       	movw	r30, r14
    1048:	ec 0f       	add	r30, r28
    104a:	fd 1f       	adc	r31, r29
    104c:	80 81       	ld	r24, Z
    104e:	99 27       	eor	r25, r25
    1050:	87 fd       	sbrc	r24, 7
    1052:	90 95       	com	r25
    1054:	28 17       	cp	r18, r24
    1056:	39 07       	cpc	r19, r25
    1058:	21 f4       	brne	.+8      	; 0x1062 <_ZN6Stream9findUntilEPcjS0_j+0x68>
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
    105a:	21 96       	adiw	r28, 0x01	; 1
    105c:	c8 15       	cp	r28, r8
    105e:	d9 05       	cpc	r29, r9
    1060:	e8 f4       	brcc	.+58     	; 0x109c <_ZN6Stream9findUntilEPcjS0_j+0xa2>
        return true;
      }
    }
    
    if(termLen > 0 && c == terminator[termIndex]){
    1062:	c1 14       	cp	r12, r1
    1064:	d1 04       	cpc	r13, r1
    1066:	81 f0       	breq	.+32     	; 0x1088 <_ZN6Stream9findUntilEPcjS0_j+0x8e>
    1068:	f5 01       	movw	r30, r10
    106a:	e0 0f       	add	r30, r16
    106c:	f1 1f       	adc	r31, r17
    106e:	80 81       	ld	r24, Z
    1070:	99 27       	eor	r25, r25
    1072:	87 fd       	sbrc	r24, 7
    1074:	90 95       	com	r25
    1076:	28 17       	cp	r18, r24
    1078:	39 07       	cpc	r19, r25
    107a:	31 f4       	brne	.+12     	; 0x1088 <_ZN6Stream9findUntilEPcjS0_j+0x8e>
      if(++termIndex >= termLen)
    107c:	0f 5f       	subi	r16, 0xFF	; 255
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	0c 15       	cp	r16, r12
    1082:	1d 05       	cpc	r17, r13
    1084:	18 f0       	brcs	.+6      	; 0x108c <_ZN6Stream9findUntilEPcjS0_j+0x92>
    1086:	0c c0       	rjmp	.+24     	; 0x10a0 <_ZN6Stream9findUntilEPcjS0_j+0xa6>
    1088:	00 e0       	ldi	r16, 0x00	; 0
    108a:	10 e0       	ldi	r17, 0x00	; 0
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    108c:	c3 01       	movw	r24, r6
    108e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_ZN6Stream9timedReadEv>
    1092:	9c 01       	movw	r18, r24
    1094:	18 16       	cp	r1, r24
    1096:	19 06       	cpc	r1, r25
    1098:	54 f2       	brlt	.-108    	; 0x102e <_ZN6Stream9findUntilEPcjS0_j+0x34>
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <_ZN6Stream9findUntilEPcjS0_j+0xa6>
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <_ZN6Stream9findUntilEPcjS0_j+0xa8>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
      termIndex = 0;
  }
  return false;
}
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	7f 90       	pop	r7
    10bc:	6f 90       	pop	r6
    10be:	08 95       	ret

000010c0 <_ZN6Stream4findEPcj>:
  return findUntil(target, NULL);
}

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
{
  return findUntil(target, length, NULL, 0);
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	00 e0       	ldi	r16, 0x00	; 0
    10ca:	10 e0       	ldi	r17, 0x00	; 0
    10cc:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZN6Stream9findUntilEPcjS0_j>
}
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    10d6:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    10d8:	84 81       	ldd	r24, Z+4	; 0x04
    10da:	95 81       	ldd	r25, Z+5	; 0x05
    10dc:	68 17       	cp	r22, r24
    10de:	79 07       	cpc	r23, r25
    10e0:	48 f4       	brcc	.+18     	; 0x10f4 <_ZNK6StringixEj+0x1e>
    10e2:	01 90       	ld	r0, Z+
    10e4:	f0 81       	ld	r31, Z
    10e6:	e0 2d       	mov	r30, r0
    10e8:	30 97       	sbiw	r30, 0x00	; 0
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    10ec:	e6 0f       	add	r30, r22
    10ee:	f7 1f       	adc	r31, r23
    10f0:	80 81       	ld	r24, Z
    10f2:	08 95       	ret
    10f4:	80 e0       	ldi	r24, 0x00	; 0
}
    10f6:	08 95       	ret

000010f8 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    10f8:	0f 93       	push	r16
    10fa:	1f 93       	push	r17
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	ec 01       	movw	r28, r24
    1102:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1104:	6f 5f       	subi	r22, 0xFF	; 255
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	88 81       	ld	r24, Y
    110a:	99 81       	ldd	r25, Y+1	; 0x01
    110c:	0e 94 3d 0b 	call	0x167a	; 0x167a <realloc>
	if (newbuffer) {
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	11 f4       	brne	.+4      	; 0x1118 <_ZN6String12changeBufferEj+0x20>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	05 c0       	rjmp	.+10     	; 0x1122 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    1118:	99 83       	std	Y+1, r25	; 0x01
    111a:	88 83       	st	Y, r24
		capacity = maxStrLen;
    111c:	1b 83       	std	Y+3, r17	; 0x03
    111e:	0a 83       	std	Y+2, r16	; 0x02
    1120:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	08 95       	ret

0000112c <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    1132:	88 81       	ld	r24, Y
    1134:	99 81       	ldd	r25, Y+1	; 0x01
    1136:	89 2b       	or	r24, r25
    1138:	29 f0       	breq	.+10     	; 0x1144 <_ZN6String7reserveEj+0x18>
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	86 17       	cp	r24, r22
    1140:	97 07       	cpc	r25, r23
    1142:	60 f4       	brcc	.+24     	; 0x115c <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    1144:	ce 01       	movw	r24, r28
    1146:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN6String12changeBufferEj>
    114a:	88 23       	and	r24, r24
    114c:	41 f0       	breq	.+16     	; 0x115e <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	9d 81       	ldd	r25, Y+5	; 0x05
    1152:	89 2b       	or	r24, r25
    1154:	19 f4       	brne	.+6      	; 0x115c <_ZN6String7reserveEj+0x30>
    1156:	e8 81       	ld	r30, Y
    1158:	f9 81       	ldd	r31, Y+1	; 0x01
    115a:	10 82       	st	Z, r1
    115c:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    116a:	88 81       	ld	r24, Y
    116c:	99 81       	ldd	r25, Y+1	; 0x01
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	11 f0       	breq	.+4      	; 0x1176 <_ZN6String10invalidateEv+0x12>
    1172:	0e 94 a5 0a 	call	0x154a	; 0x154a <free>
	buffer = NULL;
    1176:	19 82       	std	Y+1, r1	; 0x01
    1178:	18 82       	st	Y, r1
	capacity = len = 0;
    117a:	1d 82       	std	Y+5, r1	; 0x05
    117c:	1c 82       	std	Y+4, r1	; 0x04
    117e:	1b 82       	std	Y+3, r1	; 0x03
    1180:	1a 82       	std	Y+2, r1	; 0x02
}
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	ec 01       	movw	r28, r24
    1196:	7b 01       	movw	r14, r22
    1198:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    119a:	ba 01       	movw	r22, r20
    119c:	0e 94 96 08 	call	0x112c	; 0x112c <_ZN6String7reserveEj>
    11a0:	88 23       	and	r24, r24
    11a2:	21 f4       	brne	.+8      	; 0x11ac <_ZN6String4copyEPKcj+0x24>
		invalidate();
    11a4:	ce 01       	movw	r24, r28
    11a6:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN6String10invalidateEv>
    11aa:	07 c0       	rjmp	.+14     	; 0x11ba <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    11ac:	1d 83       	std	Y+5, r17	; 0x05
    11ae:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    11b0:	88 81       	ld	r24, Y
    11b2:	99 81       	ldd	r25, Y+1	; 0x01
    11b4:	b7 01       	movw	r22, r14
    11b6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <strcpy>
	return *this;
}
    11ba:	ce 01       	movw	r24, r28
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	08 95       	ret

000011ca <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    11d0:	19 82       	std	Y+1, r1	; 0x01
    11d2:	18 82       	st	Y, r1
	capacity = 0;
    11d4:	1b 82       	std	Y+3, r1	; 0x03
    11d6:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    11d8:	1d 82       	std	Y+5, r1	; 0x05
    11da:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    11dc:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    11de:	61 15       	cp	r22, r1
    11e0:	71 05       	cpc	r23, r1
    11e2:	51 f0       	breq	.+20     	; 0x11f8 <_ZN6StringC1EPKc+0x2e>
    11e4:	db 01       	movw	r26, r22
    11e6:	0d 90       	ld	r0, X+
    11e8:	00 20       	and	r0, r0
    11ea:	e9 f7       	brne	.-6      	; 0x11e6 <_ZN6StringC1EPKc+0x1c>
    11ec:	11 97       	sbiw	r26, 0x01	; 1
    11ee:	a6 1b       	sub	r26, r22
    11f0:	b7 0b       	sbc	r27, r23
    11f2:	ad 01       	movw	r20, r26
    11f4:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN6String4copyEPKcj>
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    11fe:	fc 01       	movw	r30, r24
{
	free(buffer);
    1200:	80 81       	ld	r24, Z
    1202:	91 81       	ldd	r25, Z+1	; 0x01
    1204:	0e 94 a5 0a 	call	0x154a	; 0x154a <free>
}
    1208:	08 95       	ret

0000120a <main>:
#include <Arduino.h>

int main(void)
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
{
	init();
    120e:	0e 94 cd 09 	call	0x139a	; 0x139a <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1212:	0e 94 d7 03 	call	0x7ae	; 0x7ae <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1216:	cb e1       	ldi	r28, 0x1B	; 27
    1218:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
    121a:	0e 94 b4 02 	call	0x568	; 0x568 <loop>
		if (serialEventRun) serialEventRun();
    121e:	20 97       	sbiw	r28, 0x00	; 0
    1220:	e1 f3       	breq	.-8      	; 0x121a <main+0x10>
    1222:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14serialEventRunv>
    1226:	f9 cf       	rjmp	.-14     	; 0x121a <main+0x10>

00001228 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    123e:	80 91 2d 07 	lds	r24, 0x072D
    1242:	90 91 2e 07 	lds	r25, 0x072E
    1246:	a0 91 2f 07 	lds	r26, 0x072F
    124a:	b0 91 30 07 	lds	r27, 0x0730
	unsigned char f = timer0_fract;
    124e:	30 91 31 07 	lds	r19, 0x0731

	m += MILLIS_INC;
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	a1 1d       	adc	r26, r1
    1256:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1258:	23 2f       	mov	r18, r19
    125a:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    125c:	2d 37       	cpi	r18, 0x7D	; 125
    125e:	20 f0       	brcs	.+8      	; 0x1268 <__vector_16+0x40>
		f -= FRACT_MAX;
    1260:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	a1 1d       	adc	r26, r1
    1266:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1268:	20 93 31 07 	sts	0x0731, r18
	timer0_millis = m;
    126c:	80 93 2d 07 	sts	0x072D, r24
    1270:	90 93 2e 07 	sts	0x072E, r25
    1274:	a0 93 2f 07 	sts	0x072F, r26
    1278:	b0 93 30 07 	sts	0x0730, r27
	timer0_overflow_count++;
    127c:	80 91 29 07 	lds	r24, 0x0729
    1280:	90 91 2a 07 	lds	r25, 0x072A
    1284:	a0 91 2b 07 	lds	r26, 0x072B
    1288:	b0 91 2c 07 	lds	r27, 0x072C
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	a1 1d       	adc	r26, r1
    1290:	b1 1d       	adc	r27, r1
    1292:	80 93 29 07 	sts	0x0729, r24
    1296:	90 93 2a 07 	sts	0x072A, r25
    129a:	a0 93 2b 07 	sts	0x072B, r26
    129e:	b0 93 2c 07 	sts	0x072C, r27
}
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	3f 91       	pop	r19
    12ac:	2f 91       	pop	r18
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    12b8:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    12ba:	f8 94       	cli
	m = timer0_millis;
    12bc:	20 91 2d 07 	lds	r18, 0x072D
    12c0:	30 91 2e 07 	lds	r19, 0x072E
    12c4:	40 91 2f 07 	lds	r20, 0x072F
    12c8:	50 91 30 07 	lds	r21, 0x0730
	SREG = oldSREG;
    12cc:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    12ce:	b9 01       	movw	r22, r18
    12d0:	ca 01       	movw	r24, r20
    12d2:	08 95       	ret

000012d4 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    12d4:	9b 01       	movw	r18, r22
    12d6:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    12d8:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    12da:	f8 94       	cli
	m = timer0_overflow_count;
    12dc:	80 91 29 07 	lds	r24, 0x0729
    12e0:	90 91 2a 07 	lds	r25, 0x072A
    12e4:	a0 91 2b 07 	lds	r26, 0x072B
    12e8:	b0 91 2c 07 	lds	r27, 0x072C
#if defined(TCNT0)
	t = TCNT0;
    12ec:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    12ee:	a8 9b       	sbis	0x15, 0	; 21
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <delay+0x28>
    12f2:	6f 3f       	cpi	r22, 0xFF	; 255
    12f4:	19 f0       	breq	.+6      	; 0x12fc <delay+0x28>
		m++;
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	a1 1d       	adc	r26, r1
    12fa:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    12fc:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    12fe:	ba 2f       	mov	r27, r26
    1300:	a9 2f       	mov	r26, r25
    1302:	98 2f       	mov	r25, r24
    1304:	88 27       	eor	r24, r24
    1306:	86 0f       	add	r24, r22
    1308:	91 1d       	adc	r25, r1
    130a:	a1 1d       	adc	r26, r1
    130c:	b1 1d       	adc	r27, r1
    130e:	62 e0       	ldi	r22, 0x02	; 2
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	aa 1f       	adc	r26, r26
    1316:	bb 1f       	adc	r27, r27
    1318:	6a 95       	dec	r22
    131a:	d1 f7       	brne	.-12     	; 0x1310 <delay+0x3c>
    131c:	bc 01       	movw	r22, r24
    131e:	2d c0       	rjmp	.+90     	; 0x137a <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1320:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1322:	f8 94       	cli
	m = timer0_overflow_count;
    1324:	80 91 29 07 	lds	r24, 0x0729
    1328:	90 91 2a 07 	lds	r25, 0x072A
    132c:	a0 91 2b 07 	lds	r26, 0x072B
    1330:	b0 91 2c 07 	lds	r27, 0x072C
#if defined(TCNT0)
	t = TCNT0;
    1334:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1336:	a8 9b       	sbis	0x15, 0	; 21
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <delay+0x70>
    133a:	ef 3f       	cpi	r30, 0xFF	; 255
    133c:	19 f0       	breq	.+6      	; 0x1344 <delay+0x70>
		m++;
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	a1 1d       	adc	r26, r1
    1342:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1344:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1346:	ba 2f       	mov	r27, r26
    1348:	a9 2f       	mov	r26, r25
    134a:	98 2f       	mov	r25, r24
    134c:	88 27       	eor	r24, r24
    134e:	8e 0f       	add	r24, r30
    1350:	91 1d       	adc	r25, r1
    1352:	a1 1d       	adc	r26, r1
    1354:	b1 1d       	adc	r27, r1
    1356:	e2 e0       	ldi	r30, 0x02	; 2
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	aa 1f       	adc	r26, r26
    135e:	bb 1f       	adc	r27, r27
    1360:	ea 95       	dec	r30
    1362:	d1 f7       	brne	.-12     	; 0x1358 <delay+0x84>
    1364:	86 1b       	sub	r24, r22
    1366:	97 0b       	sbc	r25, r23
    1368:	88 5e       	subi	r24, 0xE8	; 232
    136a:	93 40       	sbci	r25, 0x03	; 3
    136c:	c8 f2       	brcs	.-78     	; 0x1320 <delay+0x4c>
			ms--;
    136e:	21 50       	subi	r18, 0x01	; 1
    1370:	30 40       	sbci	r19, 0x00	; 0
    1372:	40 40       	sbci	r20, 0x00	; 0
    1374:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1376:	68 51       	subi	r22, 0x18	; 24
    1378:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    137a:	21 15       	cp	r18, r1
    137c:	31 05       	cpc	r19, r1
    137e:	41 05       	cpc	r20, r1
    1380:	51 05       	cpc	r21, r1
    1382:	71 f6       	brne	.-100    	; 0x1320 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1384:	08 95       	ret

00001386 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	39 f0       	breq	.+14     	; 0x1398 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    1392:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <delayMicroseconds+0xe>
    1398:	08 95       	ret

0000139a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    139a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    139c:	84 b5       	in	r24, 0x24	; 36
    139e:	82 60       	ori	r24, 0x02	; 2
    13a0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    13a2:	84 b5       	in	r24, 0x24	; 36
    13a4:	81 60       	ori	r24, 0x01	; 1
    13a6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    13a8:	85 b5       	in	r24, 0x25	; 37
    13aa:	82 60       	ori	r24, 0x02	; 2
    13ac:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    13ae:	85 b5       	in	r24, 0x25	; 37
    13b0:	81 60       	ori	r24, 0x01	; 1
    13b2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    13b4:	ee e6       	ldi	r30, 0x6E	; 110
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    13be:	e1 e8       	ldi	r30, 0x81	; 129
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    13c4:	80 81       	ld	r24, Z
    13c6:	82 60       	ori	r24, 0x02	; 2
    13c8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    13ca:	80 81       	ld	r24, Z
    13cc:	81 60       	ori	r24, 0x01	; 1
    13ce:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    13d0:	e0 e8       	ldi	r30, 0x80	; 128
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	81 60       	ori	r24, 0x01	; 1
    13d8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    13da:	e1 eb       	ldi	r30, 0xB1	; 177
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	84 60       	ori	r24, 0x04	; 4
    13e2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    13e4:	e0 eb       	ldi	r30, 0xB0	; 176
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    13ee:	ea e7       	ldi	r30, 0x7A	; 122
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	84 60       	ori	r24, 0x04	; 4
    13f6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    13f8:	80 81       	ld	r24, Z
    13fa:	82 60       	ori	r24, 0x02	; 2
    13fc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    13fe:	80 81       	ld	r24, Z
    1400:	81 60       	ori	r24, 0x01	; 1
    1402:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1404:	80 81       	ld	r24, Z
    1406:	80 68       	ori	r24, 0x80	; 128
    1408:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    140a:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    140e:	08 95       	ret

00001410 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	bc 01       	movw	r22, r24
    141a:	82 30       	cpi	r24, 0x02	; 2
    141c:	91 05       	cpc	r25, r1
    141e:	10 f4       	brcc	.+4      	; 0x1424 <malloc+0x14>
    1420:	62 e0       	ldi	r22, 0x02	; 2
    1422:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    1424:	e0 91 34 07 	lds	r30, 0x0734
    1428:	f0 91 35 07 	lds	r31, 0x0735
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	a0 e0       	ldi	r26, 0x00	; 0
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	24 c0       	rjmp	.+72     	; 0x147e <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	86 17       	cp	r24, r22
    143c:	97 07       	cpc	r25, r23
    143e:	d0 f0       	brcs	.+52     	; 0x1474 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    1440:	86 17       	cp	r24, r22
    1442:	97 07       	cpc	r25, r23
    1444:	71 f4       	brne	.+28     	; 0x1462 <malloc+0x52>
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    144a:	10 97       	sbiw	r26, 0x00	; 0
    144c:	29 f0       	breq	.+10     	; 0x1458 <malloc+0x48>
				fp2->nx = fp1->nx;
    144e:	13 96       	adiw	r26, 0x03	; 3
    1450:	9c 93       	st	X, r25
    1452:	8e 93       	st	-X, r24
    1454:	12 97       	sbiw	r26, 0x02	; 2
    1456:	2c c0       	rjmp	.+88     	; 0x14b0 <malloc+0xa0>
			else
				__flp = fp1->nx;
    1458:	90 93 35 07 	sts	0x0735, r25
    145c:	80 93 34 07 	sts	0x0734, r24
    1460:	27 c0       	rjmp	.+78     	; 0x14b0 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    1462:	41 15       	cp	r20, r1
    1464:	51 05       	cpc	r21, r1
    1466:	19 f0       	breq	.+6      	; 0x146e <malloc+0x5e>
    1468:	84 17       	cp	r24, r20
    146a:	95 07       	cpc	r25, r21
    146c:	18 f4       	brcc	.+6      	; 0x1474 <malloc+0x64>
    146e:	8d 01       	movw	r16, r26
    1470:	ac 01       	movw	r20, r24
    1472:	ef 01       	movw	r28, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    1474:	df 01       	movw	r26, r30
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	9c 01       	movw	r18, r24
    147c:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    147e:	30 97       	sbiw	r30, 0x00	; 0
    1480:	d1 f6       	brne	.-76     	; 0x1436 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    1482:	41 15       	cp	r20, r1
    1484:	51 05       	cpc	r21, r1
    1486:	f9 f0       	breq	.+62     	; 0x14c6 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    1488:	ca 01       	movw	r24, r20
    148a:	86 1b       	sub	r24, r22
    148c:	97 0b       	sbc	r25, r23
    148e:	84 30       	cpi	r24, 0x04	; 4
    1490:	91 05       	cpc	r25, r1
    1492:	80 f4       	brcc	.+32     	; 0x14b4 <malloc+0xa4>
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    1498:	01 15       	cp	r16, r1
    149a:	11 05       	cpc	r17, r1
    149c:	21 f0       	breq	.+8      	; 0x14a6 <malloc+0x96>
				sfp2->nx = sfp1->nx;
    149e:	f8 01       	movw	r30, r16
    14a0:	93 83       	std	Z+3, r25	; 0x03
    14a2:	82 83       	std	Z+2, r24	; 0x02
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <malloc+0x9e>
			else
				__flp = sfp1->nx;
    14a6:	90 93 35 07 	sts	0x0735, r25
    14aa:	80 93 34 07 	sts	0x0734, r24
			return &(sfp1->nx);
    14ae:	fe 01       	movw	r30, r28
    14b0:	32 96       	adiw	r30, 0x02	; 2
    14b2:	45 c0       	rjmp	.+138    	; 0x153e <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    14b4:	fe 01       	movw	r30, r28
    14b6:	e8 0f       	add	r30, r24
    14b8:	f9 1f       	adc	r31, r25
    14ba:	61 93       	st	Z+, r22
    14bc:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    14be:	02 97       	sbiw	r24, 0x02	; 2
    14c0:	99 83       	std	Y+1, r25	; 0x01
    14c2:	88 83       	st	Y, r24
    14c4:	3c c0       	rjmp	.+120    	; 0x153e <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    14c6:	80 91 32 07 	lds	r24, 0x0732
    14ca:	90 91 33 07 	lds	r25, 0x0733
    14ce:	89 2b       	or	r24, r25
    14d0:	41 f4       	brne	.+16     	; 0x14e2 <malloc+0xd2>
		__brkval = __malloc_heap_start;
    14d2:	80 91 10 02 	lds	r24, 0x0210
    14d6:	90 91 11 02 	lds	r25, 0x0211
    14da:	90 93 33 07 	sts	0x0733, r25
    14de:	80 93 32 07 	sts	0x0732, r24
	cp = __malloc_heap_end;
    14e2:	40 91 12 02 	lds	r20, 0x0212
    14e6:	50 91 13 02 	lds	r21, 0x0213
	if (cp == 0)
    14ea:	41 15       	cp	r20, r1
    14ec:	51 05       	cpc	r21, r1
    14ee:	41 f4       	brne	.+16     	; 0x1500 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    14f0:	4d b7       	in	r20, 0x3d	; 61
    14f2:	5e b7       	in	r21, 0x3e	; 62
    14f4:	80 91 0e 02 	lds	r24, 0x020E
    14f8:	90 91 0f 02 	lds	r25, 0x020F
    14fc:	48 1b       	sub	r20, r24
    14fe:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    1500:	20 91 32 07 	lds	r18, 0x0732
    1504:	30 91 33 07 	lds	r19, 0x0733
    1508:	24 17       	cp	r18, r20
    150a:	35 07       	cpc	r19, r21
    150c:	b0 f4       	brcc	.+44     	; 0x153a <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    150e:	ca 01       	movw	r24, r20
    1510:	82 1b       	sub	r24, r18
    1512:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    1514:	86 17       	cp	r24, r22
    1516:	97 07       	cpc	r25, r23
    1518:	80 f0       	brcs	.+32     	; 0x153a <malloc+0x12a>
    151a:	ab 01       	movw	r20, r22
    151c:	4e 5f       	subi	r20, 0xFE	; 254
    151e:	5f 4f       	sbci	r21, 0xFF	; 255
    1520:	84 17       	cp	r24, r20
    1522:	95 07       	cpc	r25, r21
    1524:	50 f0       	brcs	.+20     	; 0x153a <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    1526:	42 0f       	add	r20, r18
    1528:	53 1f       	adc	r21, r19
    152a:	50 93 33 07 	sts	0x0733, r21
    152e:	40 93 32 07 	sts	0x0732, r20
		fp1->sz = len;
    1532:	f9 01       	movw	r30, r18
    1534:	61 93       	st	Z+, r22
    1536:	71 93       	st	Z+, r23
    1538:	02 c0       	rjmp	.+4      	; 0x153e <malloc+0x12e>
		return &(fp1->nx);
    153a:	e0 e0       	ldi	r30, 0x00	; 0
    153c:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    153e:	cf 01       	movw	r24, r30
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	08 95       	ret

0000154a <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	9c 01       	movw	r18, r24
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	09 f4       	brne	.+2      	; 0x1556 <free+0xc>
    1554:	8f c0       	rjmp	.+286    	; 0x1674 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    1556:	ec 01       	movw	r28, r24
    1558:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    155a:	1b 82       	std	Y+3, r1	; 0x03
    155c:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    155e:	60 91 34 07 	lds	r22, 0x0734
    1562:	70 91 35 07 	lds	r23, 0x0735
    1566:	61 15       	cp	r22, r1
    1568:	71 05       	cpc	r23, r1
    156a:	81 f4       	brne	.+32     	; 0x158c <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    156c:	88 81       	ld	r24, Y
    156e:	99 81       	ldd	r25, Y+1	; 0x01
    1570:	82 0f       	add	r24, r18
    1572:	93 1f       	adc	r25, r19
    1574:	20 91 32 07 	lds	r18, 0x0732
    1578:	30 91 33 07 	lds	r19, 0x0733
    157c:	28 17       	cp	r18, r24
    157e:	39 07       	cpc	r19, r25
    1580:	39 f5       	brne	.+78     	; 0x15d0 <free+0x86>
			__brkval = cpnew;
    1582:	d0 93 33 07 	sts	0x0733, r29
    1586:	c0 93 32 07 	sts	0x0732, r28
    158a:	74 c0       	rjmp	.+232    	; 0x1674 <free+0x12a>
		else
			__flp = fpnew;
    158c:	db 01       	movw	r26, r22
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    1592:	ac 17       	cp	r26, r28
    1594:	bd 07       	cpc	r27, r29
    1596:	08 f1       	brcs	.+66     	; 0x15da <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    1598:	bb 83       	std	Y+3, r27	; 0x03
    159a:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    159c:	fe 01       	movw	r30, r28
    159e:	21 91       	ld	r18, Z+
    15a0:	31 91       	ld	r19, Z+
    15a2:	e2 0f       	add	r30, r18
    15a4:	f3 1f       	adc	r31, r19
    15a6:	ae 17       	cp	r26, r30
    15a8:	bf 07       	cpc	r27, r31
    15aa:	79 f4       	brne	.+30     	; 0x15ca <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    15ac:	8d 91       	ld	r24, X+
    15ae:	9c 91       	ld	r25, X
    15b0:	11 97       	sbiw	r26, 0x01	; 1
    15b2:	28 0f       	add	r18, r24
    15b4:	39 1f       	adc	r19, r25
    15b6:	2e 5f       	subi	r18, 0xFE	; 254
    15b8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ba:	39 83       	std	Y+1, r19	; 0x01
    15bc:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    15be:	12 96       	adiw	r26, 0x02	; 2
    15c0:	8d 91       	ld	r24, X+
    15c2:	9c 91       	ld	r25, X
    15c4:	13 97       	sbiw	r26, 0x03	; 3
    15c6:	9b 83       	std	Y+3, r25	; 0x03
    15c8:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    15ca:	41 15       	cp	r20, r1
    15cc:	51 05       	cpc	r21, r1
    15ce:	71 f4       	brne	.+28     	; 0x15ec <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    15d0:	d0 93 35 07 	sts	0x0735, r29
    15d4:	c0 93 34 07 	sts	0x0734, r28
    15d8:	4d c0       	rjmp	.+154    	; 0x1674 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    15da:	12 96       	adiw	r26, 0x02	; 2
    15dc:	8d 91       	ld	r24, X+
    15de:	9c 91       	ld	r25, X
    15e0:	13 97       	sbiw	r26, 0x03	; 3
    15e2:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	11 f0       	breq	.+4      	; 0x15ec <free+0xa2>
    15e8:	dc 01       	movw	r26, r24
    15ea:	d3 cf       	rjmp	.-90     	; 0x1592 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    15ec:	da 01       	movw	r26, r20
    15ee:	13 96       	adiw	r26, 0x03	; 3
    15f0:	dc 93       	st	X, r29
    15f2:	ce 93       	st	-X, r28
    15f4:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    15f6:	fa 01       	movw	r30, r20
    15f8:	21 91       	ld	r18, Z+
    15fa:	31 91       	ld	r19, Z+
    15fc:	e2 0f       	add	r30, r18
    15fe:	f3 1f       	adc	r31, r19
    1600:	ce 17       	cp	r28, r30
    1602:	df 07       	cpc	r29, r31
    1604:	69 f4       	brne	.+26     	; 0x1620 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    1606:	88 81       	ld	r24, Y
    1608:	99 81       	ldd	r25, Y+1	; 0x01
    160a:	28 0f       	add	r18, r24
    160c:	39 1f       	adc	r19, r25
    160e:	2e 5f       	subi	r18, 0xFE	; 254
    1610:	3f 4f       	sbci	r19, 0xFF	; 255
    1612:	fa 01       	movw	r30, r20
    1614:	31 83       	std	Z+1, r19	; 0x01
    1616:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
    161c:	93 83       	std	Z+3, r25	; 0x03
    161e:	82 83       	std	Z+2, r24	; 0x02
    1620:	e0 e0       	ldi	r30, 0x00	; 0
    1622:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    1624:	db 01       	movw	r26, r22
    1626:	12 96       	adiw	r26, 0x02	; 2
    1628:	8d 91       	ld	r24, X+
    162a:	9c 91       	ld	r25, X
    162c:	13 97       	sbiw	r26, 0x03	; 3
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	19 f0       	breq	.+6      	; 0x1638 <free+0xee>
    1632:	bc 01       	movw	r22, r24
    1634:	fd 01       	movw	r30, r26
    1636:	f6 cf       	rjmp	.-20     	; 0x1624 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    1638:	ab 01       	movw	r20, r22
    163a:	4e 5f       	subi	r20, 0xFE	; 254
    163c:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    163e:	db 01       	movw	r26, r22
    1640:	8d 91       	ld	r24, X+
    1642:	9c 91       	ld	r25, X
    1644:	84 0f       	add	r24, r20
    1646:	95 1f       	adc	r25, r21
    1648:	20 91 32 07 	lds	r18, 0x0732
    164c:	30 91 33 07 	lds	r19, 0x0733
    1650:	28 17       	cp	r18, r24
    1652:	39 07       	cpc	r19, r25
    1654:	79 f4       	brne	.+30     	; 0x1674 <free+0x12a>
		if (fp2 == NULL)
    1656:	30 97       	sbiw	r30, 0x00	; 0
    1658:	29 f4       	brne	.+10     	; 0x1664 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    165a:	10 92 35 07 	sts	0x0735, r1
    165e:	10 92 34 07 	sts	0x0734, r1
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <free+0x11e>
		else
			fp2->nx = NULL;
    1664:	13 82       	std	Z+3, r1	; 0x03
    1666:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    1668:	42 50       	subi	r20, 0x02	; 2
    166a:	50 40       	sbci	r21, 0x00	; 0
    166c:	50 93 33 07 	sts	0x0733, r21
    1670:	40 93 32 07 	sts	0x0732, r20
	}
}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	08 95       	ret

0000167a <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    167a:	6f 92       	push	r6
    167c:	7f 92       	push	r7
    167e:	8f 92       	push	r8
    1680:	9f 92       	push	r9
    1682:	af 92       	push	r10
    1684:	bf 92       	push	r11
    1686:	cf 92       	push	r12
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	8c 01       	movw	r16, r24
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	29 f4       	brne	.+10     	; 0x16a6 <realloc+0x2c>
		return malloc(len);
    169c:	cb 01       	movw	r24, r22
    169e:	0e 94 08 0a 	call	0x1410	; 0x1410 <malloc>
    16a2:	8c 01       	movw	r16, r24
    16a4:	bb c0       	rjmp	.+374    	; 0x181c <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    16a6:	8e ef       	ldi	r24, 0xFE	; 254
    16a8:	e8 2e       	mov	r14, r24
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	f8 2e       	mov	r15, r24
    16ae:	e0 0e       	add	r14, r16
    16b0:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    16b2:	48 01       	movw	r8, r16
    16b4:	86 0e       	add	r8, r22
    16b6:	97 1e       	adc	r9, r23
	if (cp < cp1)
    16b8:	8e 14       	cp	r8, r14
    16ba:	9f 04       	cpc	r9, r15
    16bc:	08 f4       	brcc	.+2      	; 0x16c0 <realloc+0x46>
    16be:	ac c0       	rjmp	.+344    	; 0x1818 <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    16c0:	d7 01       	movw	r26, r14
    16c2:	4d 91       	ld	r20, X+
    16c4:	5c 91       	ld	r21, X
    16c6:	11 97       	sbiw	r26, 0x01	; 1
    16c8:	46 17       	cp	r20, r22
    16ca:	57 07       	cpc	r21, r23
    16cc:	b8 f0       	brcs	.+46     	; 0x16fc <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    16ce:	45 30       	cpi	r20, 0x05	; 5
    16d0:	51 05       	cpc	r21, r1
    16d2:	08 f4       	brcc	.+2      	; 0x16d6 <realloc+0x5c>
    16d4:	a3 c0       	rjmp	.+326    	; 0x181c <realloc+0x1a2>
    16d6:	ca 01       	movw	r24, r20
    16d8:	04 97       	sbiw	r24, 0x04	; 4
    16da:	86 17       	cp	r24, r22
    16dc:	97 07       	cpc	r25, r23
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <realloc+0x68>
    16e0:	9d c0       	rjmp	.+314    	; 0x181c <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    16e2:	42 50       	subi	r20, 0x02	; 2
    16e4:	50 40       	sbci	r21, 0x00	; 0
    16e6:	46 1b       	sub	r20, r22
    16e8:	57 0b       	sbc	r21, r23
    16ea:	f4 01       	movw	r30, r8
    16ec:	41 93       	st	Z+, r20
    16ee:	51 93       	st	Z+, r21
		fp1->sz = len;
    16f0:	6d 93       	st	X+, r22
    16f2:	7c 93       	st	X, r23
		free(&(fp2->nx));
    16f4:	cf 01       	movw	r24, r30
    16f6:	0e 94 a5 0a 	call	0x154a	; 0x154a <free>
    16fa:	90 c0       	rjmp	.+288    	; 0x181c <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    16fc:	5b 01       	movw	r10, r22
    16fe:	a4 1a       	sub	r10, r20
    1700:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    1702:	38 01       	movw	r6, r16
    1704:	64 0e       	add	r6, r20
    1706:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    1708:	a0 91 34 07 	lds	r26, 0x0734
    170c:	b0 91 35 07 	lds	r27, 0x0735
    1710:	e0 e0       	ldi	r30, 0x00	; 0
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	cc 24       	eor	r12, r12
    1716:	dd 24       	eor	r13, r13
    1718:	47 c0       	rjmp	.+142    	; 0x17a8 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    171a:	a6 15       	cp	r26, r6
    171c:	b7 05       	cpc	r27, r7
    171e:	a9 f5       	brne	.+106    	; 0x178a <realloc+0x110>
    1720:	cd 91       	ld	r28, X+
    1722:	dc 91       	ld	r29, X
    1724:	11 97       	sbiw	r26, 0x01	; 1
    1726:	ce 01       	movw	r24, r28
    1728:	02 96       	adiw	r24, 0x02	; 2
    172a:	8a 15       	cp	r24, r10
    172c:	9b 05       	cpc	r25, r11
    172e:	68 f1       	brcs	.+90     	; 0x178a <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    1730:	ce 01       	movw	r24, r28
    1732:	8a 19       	sub	r24, r10
    1734:	9b 09       	sbc	r25, r11
    1736:	02 96       	adiw	r24, 0x02	; 2
    1738:	12 96       	adiw	r26, 0x02	; 2
    173a:	2c 91       	ld	r18, X
    173c:	12 97       	sbiw	r26, 0x02	; 2
    173e:	13 96       	adiw	r26, 0x03	; 3
    1740:	3c 91       	ld	r19, X
    1742:	05 97       	sbiw	r24, 0x05	; 5
    1744:	58 f0       	brcs	.+22     	; 0x175c <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    1746:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    1748:	22 83       	std	Z+2, r18	; 0x02
    174a:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    174c:	ca 19       	sub	r28, r10
    174e:	db 09       	sbc	r29, r11
    1750:	d1 83       	std	Z+1, r29	; 0x01
    1752:	c0 83       	st	Z, r28
				fp1->sz = len;
    1754:	d7 01       	movw	r26, r14
    1756:	6d 93       	st	X+, r22
    1758:	7c 93       	st	X, r23
    175a:	09 c0       	rjmp	.+18     	; 0x176e <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    175c:	4e 5f       	subi	r20, 0xFE	; 254
    175e:	5f 4f       	sbci	r21, 0xFF	; 255
    1760:	4c 0f       	add	r20, r28
    1762:	5d 1f       	adc	r21, r29
    1764:	f7 01       	movw	r30, r14
    1766:	51 83       	std	Z+1, r21	; 0x01
    1768:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    176a:	c9 01       	movw	r24, r18
    176c:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    176e:	c1 14       	cp	r12, r1
    1770:	d1 04       	cpc	r13, r1
    1772:	31 f0       	breq	.+12     	; 0x1780 <realloc+0x106>
				ofp3->nx = fp2;
    1774:	d6 01       	movw	r26, r12
    1776:	13 96       	adiw	r26, 0x03	; 3
    1778:	fc 93       	st	X, r31
    177a:	ee 93       	st	-X, r30
    177c:	12 97       	sbiw	r26, 0x02	; 2
    177e:	4e c0       	rjmp	.+156    	; 0x181c <realloc+0x1a2>
			else
				__flp = fp2;
    1780:	f0 93 35 07 	sts	0x0735, r31
    1784:	e0 93 34 07 	sts	0x0734, r30
    1788:	49 c0       	rjmp	.+146    	; 0x181c <realloc+0x1a2>
    178a:	8d 91       	ld	r24, X+
    178c:	9c 91       	ld	r25, X
    178e:	11 97       	sbiw	r26, 0x01	; 1
    1790:	e8 17       	cp	r30, r24
    1792:	f9 07       	cpc	r31, r25
    1794:	08 f4       	brcc	.+2      	; 0x1798 <realloc+0x11e>
    1796:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    1798:	6d 01       	movw	r12, r26
    179a:	12 96       	adiw	r26, 0x02	; 2
    179c:	8c 91       	ld	r24, X
    179e:	12 97       	sbiw	r26, 0x02	; 2
    17a0:	13 96       	adiw	r26, 0x03	; 3
    17a2:	9c 91       	ld	r25, X
    17a4:	9c 01       	movw	r18, r24
    17a6:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    17a8:	10 97       	sbiw	r26, 0x00	; 0
    17aa:	09 f0       	breq	.+2      	; 0x17ae <realloc+0x134>
    17ac:	b6 cf       	rjmp	.-148    	; 0x171a <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    17ae:	80 91 32 07 	lds	r24, 0x0732
    17b2:	90 91 33 07 	lds	r25, 0x0733
    17b6:	86 15       	cp	r24, r6
    17b8:	97 05       	cpc	r25, r7
    17ba:	e9 f4       	brne	.+58     	; 0x17f6 <realloc+0x17c>
    17bc:	e6 17       	cp	r30, r22
    17be:	f7 07       	cpc	r31, r23
    17c0:	d0 f4       	brcc	.+52     	; 0x17f6 <realloc+0x17c>
		cp1 = __malloc_heap_end;
    17c2:	20 91 12 02 	lds	r18, 0x0212
    17c6:	30 91 13 02 	lds	r19, 0x0213
		cp = (char *)ptr + len;
		if (cp1 == 0)
    17ca:	21 15       	cp	r18, r1
    17cc:	31 05       	cpc	r19, r1
    17ce:	41 f4       	brne	.+16     	; 0x17e0 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    17d0:	2d b7       	in	r18, 0x3d	; 61
    17d2:	3e b7       	in	r19, 0x3e	; 62
    17d4:	80 91 0e 02 	lds	r24, 0x020E
    17d8:	90 91 0f 02 	lds	r25, 0x020F
    17dc:	28 1b       	sub	r18, r24
    17de:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    17e0:	82 16       	cp	r8, r18
    17e2:	93 06       	cpc	r9, r19
    17e4:	c8 f4       	brcc	.+50     	; 0x1818 <realloc+0x19e>
			__brkval = cp;
    17e6:	90 92 33 07 	sts	0x0733, r9
    17ea:	80 92 32 07 	sts	0x0732, r8
			fp1->sz = len;
    17ee:	f7 01       	movw	r30, r14
    17f0:	71 83       	std	Z+1, r23	; 0x01
    17f2:	60 83       	st	Z, r22
    17f4:	13 c0       	rjmp	.+38     	; 0x181c <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    17f6:	cb 01       	movw	r24, r22
    17f8:	0e 94 08 0a 	call	0x1410	; 0x1410 <malloc>
    17fc:	ec 01       	movw	r28, r24
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	59 f0       	breq	.+22     	; 0x1818 <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    1802:	d7 01       	movw	r26, r14
    1804:	4d 91       	ld	r20, X+
    1806:	5c 91       	ld	r21, X
    1808:	b8 01       	movw	r22, r16
    180a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <memcpy>
	free(ptr);
    180e:	c8 01       	movw	r24, r16
    1810:	0e 94 a5 0a 	call	0x154a	; 0x154a <free>
    1814:	8e 01       	movw	r16, r28
    1816:	02 c0       	rjmp	.+4      	; 0x181c <realloc+0x1a2>
	return memp;
    1818:	00 e0       	ldi	r16, 0x00	; 0
    181a:	10 e0       	ldi	r17, 0x00	; 0
}
    181c:	c8 01       	movw	r24, r16
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	9f 90       	pop	r9
    1834:	8f 90       	pop	r8
    1836:	7f 90       	pop	r7
    1838:	6f 90       	pop	r6
    183a:	08 95       	ret

0000183c <__mulsi3>:
    183c:	62 9f       	mul	r22, r18
    183e:	d0 01       	movw	r26, r0
    1840:	73 9f       	mul	r23, r19
    1842:	f0 01       	movw	r30, r0
    1844:	82 9f       	mul	r24, r18
    1846:	e0 0d       	add	r30, r0
    1848:	f1 1d       	adc	r31, r1
    184a:	64 9f       	mul	r22, r20
    184c:	e0 0d       	add	r30, r0
    184e:	f1 1d       	adc	r31, r1
    1850:	92 9f       	mul	r25, r18
    1852:	f0 0d       	add	r31, r0
    1854:	83 9f       	mul	r24, r19
    1856:	f0 0d       	add	r31, r0
    1858:	74 9f       	mul	r23, r20
    185a:	f0 0d       	add	r31, r0
    185c:	65 9f       	mul	r22, r21
    185e:	f0 0d       	add	r31, r0
    1860:	99 27       	eor	r25, r25
    1862:	72 9f       	mul	r23, r18
    1864:	b0 0d       	add	r27, r0
    1866:	e1 1d       	adc	r30, r1
    1868:	f9 1f       	adc	r31, r25
    186a:	63 9f       	mul	r22, r19
    186c:	b0 0d       	add	r27, r0
    186e:	e1 1d       	adc	r30, r1
    1870:	f9 1f       	adc	r31, r25
    1872:	bd 01       	movw	r22, r26
    1874:	cf 01       	movw	r24, r30
    1876:	11 24       	eor	r1, r1
    1878:	08 95       	ret

0000187a <__udivmodsi4>:
    187a:	a1 e2       	ldi	r26, 0x21	; 33
    187c:	1a 2e       	mov	r1, r26
    187e:	aa 1b       	sub	r26, r26
    1880:	bb 1b       	sub	r27, r27
    1882:	fd 01       	movw	r30, r26
    1884:	0d c0       	rjmp	.+26     	; 0x18a0 <__udivmodsi4_ep>

00001886 <__udivmodsi4_loop>:
    1886:	aa 1f       	adc	r26, r26
    1888:	bb 1f       	adc	r27, r27
    188a:	ee 1f       	adc	r30, r30
    188c:	ff 1f       	adc	r31, r31
    188e:	a2 17       	cp	r26, r18
    1890:	b3 07       	cpc	r27, r19
    1892:	e4 07       	cpc	r30, r20
    1894:	f5 07       	cpc	r31, r21
    1896:	20 f0       	brcs	.+8      	; 0x18a0 <__udivmodsi4_ep>
    1898:	a2 1b       	sub	r26, r18
    189a:	b3 0b       	sbc	r27, r19
    189c:	e4 0b       	sbc	r30, r20
    189e:	f5 0b       	sbc	r31, r21

000018a0 <__udivmodsi4_ep>:
    18a0:	66 1f       	adc	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	88 1f       	adc	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	1a 94       	dec	r1
    18aa:	69 f7       	brne	.-38     	; 0x1886 <__udivmodsi4_loop>
    18ac:	60 95       	com	r22
    18ae:	70 95       	com	r23
    18b0:	80 95       	com	r24
    18b2:	90 95       	com	r25
    18b4:	9b 01       	movw	r18, r22
    18b6:	ac 01       	movw	r20, r24
    18b8:	bd 01       	movw	r22, r26
    18ba:	cf 01       	movw	r24, r30
    18bc:	08 95       	ret

000018be <__tablejump2__>:
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31

000018c2 <__tablejump__>:
    18c2:	05 90       	lpm	r0, Z+
    18c4:	f4 91       	lpm	r31, Z+
    18c6:	e0 2d       	mov	r30, r0
    18c8:	09 94       	ijmp

000018ca <_exit>:
    18ca:	f8 94       	cli

000018cc <__stop_program>:
    18cc:	ff cf       	rjmp	.-2      	; 0x18cc <__stop_program>
